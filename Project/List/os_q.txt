; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\os_q.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\os_q.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\os_q.crf ..\UCOSIII\uCOS-III\Source\os_q.c]
                          THUMB

                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;70     
;;;71     void  OSQCreate (OS_Q        *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;72                      CPU_CHAR    *p_name,
;;;73                      OS_MSG_QTY   max_qty,
;;;74                      OS_ERR      *p_err)
;;;75     
;;;76     {
000004  4604              MOV      r4,r0
;;;77         CPU_SR_ALLOC();
;;;78     
;;;79     
;;;80     
;;;81     #ifdef OS_SAFETY_CRITICAL
;;;82         if (p_err == (OS_ERR *)0) {
;;;83             OS_SAFETY_CRITICAL_EXCEPTION();
;;;84             return;
;;;85         }
;;;86     #endif
;;;87     
;;;88     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;89         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;90            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;91             return;
;;;92         }
;;;93     #endif
;;;94     
;;;95     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;96         if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
000006  481c              LDR      r0,|L1.120|
000008  4617              MOV      r7,r2                 ;76
00000a  4688              MOV      r8,r1                 ;76
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000e  461d              MOV      r5,r3                 ;76
000010  b110              CBZ      r0,|L1.24|
;;;97            *p_err = OS_ERR_CREATE_ISR;
000012  f64260e1          MOV      r0,#0x2ee1
;;;98             return;
000016  e02c              B        |L1.114|
                  |L1.24|
;;;99         }
;;;100    #endif
;;;101    
;;;102    #if OS_CFG_ARG_CHK_EN > 0u
;;;103        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
000018  b334              CBZ      r4,|L1.104|
;;;104           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;105            return;
;;;106        }
;;;107        if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
00001a  b347              CBZ      r7,|L1.110|
;;;108           *p_err = OS_ERR_Q_SIZE;
;;;109            return;
;;;110        }
;;;111    #endif
;;;112    
;;;113        OS_CRITICAL_ENTER();
00001c  f7fffffe          BL       CPU_SR_Save
000020  4e16              LDR      r6,|L1.124|
000022  7831              LDRB     r1,[r6,#0]  ; OSSchedLockNestingCtr
000024  1c49              ADDS     r1,r1,#1
000026  7031              STRB     r1,[r6,#0]
000028  f7fffffe          BL       CPU_SR_Restore
;;;114        p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
00002c  4814              LDR      r0,|L1.128|
;;;115        p_q->NamePtr = p_name;
;;;116        OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
00002e  e9c40800          STRD     r0,r8,[r4,#0]
000032  4639              MOV      r1,r7
000034  f1040020          ADD      r0,r4,#0x20
000038  f7fffffe          BL       OS_MsgQInit
;;;117                    max_qty);
;;;118        OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
00003c  f1040008          ADD      r0,r4,#8
000040  f7fffffe          BL       OS_PendListInit
;;;119    
;;;120    #if OS_CFG_DBG_EN > 0u
;;;121        OS_QDbgListAdd(p_q);
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       OS_QDbgListAdd
;;;122    #endif
;;;123        OSQQty++;                                               /* One more queue created                                 */
00004a  490e              LDR      r1,|L1.132|
00004c  8808              LDRH     r0,[r1,#0]  ; OSQQty
00004e  1c40              ADDS     r0,r0,#1
000050  8008              STRH     r0,[r1,#0]
;;;124    
;;;125        OS_CRITICAL_EXIT_NO_SCHED();
000052  f7fffffe          BL       CPU_SR_Save
000056  7831              LDRB     r1,[r6,#0]  ; OSSchedLockNestingCtr
000058  1e49              SUBS     r1,r1,#1
00005a  7031              STRB     r1,[r6,#0]
00005c  f7fffffe          BL       CPU_SR_Restore
;;;126       *p_err = OS_ERR_NONE;
000060  2000              MOVS     r0,#0
000062  8028              STRH     r0,[r5,#0]
                  |L1.100|
;;;127    }
000064  e8bd81f0          POP      {r4-r8,pc}
                  |L1.104|
000068  f64550c3          MOV      r0,#0x5dc3            ;104
00006c  e001              B        |L1.114|
                  |L1.110|
00006e  f2465094          MOV      r0,#0x6594            ;108
                  |L1.114|
000072  8018              STRH     r0,[r3,#0]            ;108
000074  e7f6              B        |L1.100|
;;;128    
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      OSIntNestingCtr
                  |L1.124|
                          DCD      OSSchedLockNestingCtr
                  |L1.128|
                          DCD      0x55455551
                  |L1.132|
                          DCD      OSQQty

                          AREA ||i.OSQDel||, CODE, READONLY, ALIGN=2

                  OSQDel PROC
;;;166    #if OS_CFG_Q_DEL_EN > 0u
;;;167    OS_OBJ_QTY  OSQDel (OS_Q    *p_q,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;168                        OS_OPT   opt,
;;;169                        OS_ERR  *p_err)
;;;170    {
000004  4606              MOV      r6,r0
;;;171        OS_OBJ_QTY     cnt;
;;;172        OS_OBJ_QTY     nbr_tasks;
;;;173        OS_PEND_DATA  *p_pend_data;
;;;174        OS_PEND_LIST  *p_pend_list;
;;;175        OS_TCB        *p_tcb;
;;;176        CPU_TS         ts;
;;;177        CPU_SR_ALLOC();
;;;178    
;;;179    
;;;180    
;;;181    #ifdef OS_SAFETY_CRITICAL
;;;182        if (p_err == (OS_ERR *)0) {
;;;183            OS_SAFETY_CRITICAL_EXCEPTION();
;;;184            return ((OS_OBJ_QTY)0);
;;;185        }
;;;186    #endif
;;;187    
;;;188    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;189        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't delete a message queue from an ISR               */
000006  483e              LDR      r0,|L2.256|
000008  4689              MOV      r9,r1                 ;170
00000a  4614              MOV      r4,r2                 ;170
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000e  b110              CBZ      r0,|L2.22|
;;;190           *p_err = OS_ERR_DEL_ISR;
000010  f24320c9          MOV      r0,#0x32c9
;;;191            return ((OS_OBJ_QTY)0);
000014  e00a              B        |L2.44|
                  |L2.22|
;;;192        }
;;;193    #endif
;;;194    
;;;195    #if OS_CFG_ARG_CHK_EN > 0u
;;;196        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
000016  b13e              CBZ      r6,|L2.40|
;;;197           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;198            return ((OS_OBJ_QTY)0u);
;;;199        }
;;;200        switch (opt) {                                          /* Validate 'opt'                                         */
;;;201            case OS_OPT_DEL_NO_PEND:
;;;202            case OS_OPT_DEL_ALWAYS:
;;;203                 break;
;;;204    
;;;205            default:
;;;206                *p_err =  OS_ERR_OPT_INVALID;
000018  f6456b25          MOV      r11,#0x5e25
00001c  b151              CBZ      r1,|L2.52|
00001e  2901              CMP      r1,#1                 ;200
000020  d008              BEQ      |L2.52|
000022  f8a2b000          STRH     r11,[r2,#0]
;;;207                 return ((OS_OBJ_QTY)0u);
000026  e002              B        |L2.46|
                  |L2.40|
000028  f64550c3          MOV      r0,#0x5dc3            ;197
                  |L2.44|
00002c  8010              STRH     r0,[r2,#0]            ;190
                  |L2.46|
;;;208        }
;;;209    #endif
;;;210    
;;;211    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;212        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;213           *p_err = OS_ERR_OBJ_TYPE;
;;;214            return ((OS_OBJ_QTY)0);
00002e  2000              MOVS     r0,#0
                  |L2.48|
;;;215        }
;;;216    #endif
;;;217    
;;;218        CPU_CRITICAL_ENTER();
;;;219        p_pend_list = &p_q->PendList;
;;;220        cnt         = p_pend_list->NbrEntries;
;;;221        nbr_tasks   = cnt;
;;;222        switch (opt) {
;;;223            case OS_OPT_DEL_NO_PEND:                            /* Delete message queue only if no task waiting           */
;;;224                 if (nbr_tasks == (OS_OBJ_QTY)0) {
;;;225    #if OS_CFG_DBG_EN > 0u
;;;226                     OS_QDbgListRemove(p_q);
;;;227    #endif
;;;228                     OSQQty--;
;;;229                     OS_QClr(p_q);
;;;230                     CPU_CRITICAL_EXIT();
;;;231                    *p_err = OS_ERR_NONE;
;;;232                 } else {
;;;233                     CPU_CRITICAL_EXIT();
;;;234                    *p_err = OS_ERR_TASK_WAITING;
;;;235                 }
;;;236                 break;
;;;237    
;;;238            case OS_OPT_DEL_ALWAYS:                             /* Always delete the message queue                        */
;;;239                 OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
;;;240                 ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
;;;241                 while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
;;;242                     p_pend_data = p_pend_list->HeadPtr;
;;;243                     p_tcb       = p_pend_data->TCBPtr;
;;;244                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_q),
;;;245                                   p_tcb,
;;;246                                   ts);
;;;247                     cnt--;
;;;248                 }
;;;249    #if OS_CFG_DBG_EN > 0u
;;;250                 OS_QDbgListRemove(p_q);
;;;251    #endif
;;;252                 OSQQty--;
;;;253                 OS_QClr(p_q);
;;;254                 OS_CRITICAL_EXIT_NO_SCHED();
;;;255                 OSSched();                                     /* Find highest priority task ready to run                */
;;;256                *p_err = OS_ERR_NONE;
;;;257                 break;
;;;258    
;;;259            default:
;;;260                 CPU_CRITICAL_EXIT();
;;;261                *p_err = OS_ERR_OPT_INVALID;
;;;262                 break;
;;;263        }
;;;264        return (nbr_tasks);
;;;265    }
000030  e8bd9ff0          POP      {r4-r12,pc}
                  |L2.52|
000034  4933              LDR      r1,|L2.260|
000036  6830              LDR      r0,[r6,#0]            ;212
000038  4288              CMP      r0,r1                 ;212
00003a  d002              BEQ      |L2.66|
00003c  f64550c4          MOV      r0,#0x5dc4            ;213
000040  e7f4              B        |L2.44|
                  |L2.66|
000042  f7fffffe          BL       CPU_SR_Save
000046  4682              MOV      r10,r0                ;218
000048  8a35              LDRH     r5,[r6,#0x10]         ;220
00004a  ea5f0009          MOVS     r0,r9                 ;222
00004e  f8df90b8          LDR      r9,|L2.264|
000052  f1060708          ADD      r7,r6,#8              ;219
000056  46a8              MOV      r8,r5                 ;221
000058  d008              BEQ      |L2.108|
00005a  2801              CMP      r0,#1                 ;222
00005c  d01f              BEQ      |L2.158|
00005e  4650              MOV      r0,r10                ;260
000060  f7fffffe          BL       CPU_SR_Restore
000064  f8a4b000          STRH     r11,[r4,#0]           ;261
                  |L2.104|
000068  4640              MOV      r0,r8                 ;264
00006a  e7e1              B        |L2.48|
                  |L2.108|
00006c  f1b80f00          CMP      r8,#0                 ;224
000070  d006              BEQ      |L2.128|
000072  4650              MOV      r0,r10                ;233
000074  f7fffffe          BL       CPU_SR_Restore
000078  f247105f          MOV      r0,#0x715f            ;234
                  |L2.124|
00007c  8020              STRH     r0,[r4,#0]            ;231
00007e  e7f3              B        |L2.104|
                  |L2.128|
000080  4630              MOV      r0,r6                 ;226
000082  f7fffffe          BL       OS_QDbgListRemove
000086  f8b91000          LDRH     r1,[r9,#0]            ;228  ; OSQQty
00008a  4630              MOV      r0,r6                 ;229
00008c  1e49              SUBS     r1,r1,#1              ;228
00008e  f8a91000          STRH     r1,[r9,#0]            ;228
000092  f7fffffe          BL       OS_QClr
000096  4650              MOV      r0,r10                ;230
000098  f7fffffe          BL       CPU_SR_Restore
00009c  e02d              B        |L2.250|
                  |L2.158|
00009e  f8dfb06c          LDR      r11,|L2.268|
0000a2  4650              MOV      r0,r10                ;239
0000a4  f89b1000          LDRB     r1,[r11,#0]           ;239  ; OSSchedLockNestingCtr
0000a8  1c49              ADDS     r1,r1,#1              ;239
0000aa  f88b1000          STRB     r1,[r11,#0]           ;239
0000ae  f7fffffe          BL       CPU_SR_Restore
0000b2  f7fffffe          BL       CPU_TS_TmrRd
0000b6  4682              MOV      r10,r0                ;240
0000b8  e007              B        |L2.202|
                  |L2.186|
0000ba  6838              LDR      r0,[r7,#0]            ;243
0000bc  4652              MOV      r2,r10                ;244
0000be  6881              LDR      r1,[r0,#8]            ;244
0000c0  4630              MOV      r0,r6                 ;244
0000c2  f7fffffe          BL       OS_PendObjDel
0000c6  1e6d              SUBS     r5,r5,#1              ;247
0000c8  b2ad              UXTH     r5,r5                 ;247
                  |L2.202|
0000ca  2d00              CMP      r5,#0                 ;241
0000cc  d1f5              BNE      |L2.186|
0000ce  4630              MOV      r0,r6                 ;250
0000d0  f7fffffe          BL       OS_QDbgListRemove
0000d4  f8b91000          LDRH     r1,[r9,#0]            ;252  ; OSQQty
0000d8  4630              MOV      r0,r6                 ;253
0000da  1e49              SUBS     r1,r1,#1              ;252
0000dc  f8a91000          STRH     r1,[r9,#0]            ;252
0000e0  f7fffffe          BL       OS_QClr
0000e4  f7fffffe          BL       CPU_SR_Save
0000e8  f89b2000          LDRB     r2,[r11,#0]           ;254  ; OSSchedLockNestingCtr
0000ec  1e52              SUBS     r2,r2,#1              ;254
0000ee  f88b2000          STRB     r2,[r11,#0]           ;254
0000f2  f7fffffe          BL       CPU_SR_Restore
0000f6  f7fffffe          BL       OSSched
                  |L2.250|
0000fa  2000              MOVS     r0,#0                 ;256
0000fc  e7be              B        |L2.124|
;;;266    #endif
                          ENDP

0000fe  0000              DCW      0x0000
                  |L2.256|
                          DCD      OSIntNestingCtr
                  |L2.260|
                          DCD      0x55455551
                  |L2.264|
                          DCD      OSQQty
                  |L2.268|
                          DCD      OSSchedLockNestingCtr

                          AREA ||i.OSQFlush||, CODE, READONLY, ALIGN=2

                  OSQFlush PROC
;;;293    #if OS_CFG_Q_FLUSH_EN > 0u
;;;294    OS_MSG_QTY  OSQFlush (OS_Q    *p_q,
000000  b570              PUSH     {r4-r6,lr}
;;;295                          OS_ERR  *p_err)
;;;296    {
000002  4606              MOV      r6,r0
;;;297        OS_MSG_QTY  entries;
;;;298        CPU_SR_ALLOC();
;;;299    
;;;300    
;;;301    
;;;302    #ifdef OS_SAFETY_CRITICAL
;;;303        if (p_err == (OS_ERR *)0) {
;;;304            OS_SAFETY_CRITICAL_EXCEPTION();
;;;305            return ((OS_MSG_QTY)0);
;;;306        }
;;;307    #endif
;;;308    
;;;309    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;310        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't flush a message queue from an ISR                */
000004  481b              LDR      r0,|L3.116|
000006  460c              MOV      r4,r1                 ;296
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000a  b110              CBZ      r0,|L3.18|
;;;311           *p_err = OS_ERR_FLUSH_ISR;
00000c  f44f506c          MOV      r0,#0x3b00
;;;312            return ((OS_MSG_QTY)0);
000010  e00b              B        |L3.42|
                  |L3.18|
;;;313        }
;;;314    #endif
;;;315    
;;;316    #if OS_CFG_ARG_CHK_EN > 0u
;;;317        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
000012  b146              CBZ      r6,|L3.38|
;;;318           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;319            return ((OS_MSG_QTY)0);
;;;320        }
;;;321    #endif
;;;322    
;;;323    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;324        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
000014  4918              LDR      r1,|L3.120|
000016  6830              LDR      r0,[r6,#0]
000018  4288              CMP      r0,r1
00001a  d008              BEQ      |L3.46|
;;;325           *p_err = OS_ERR_OBJ_TYPE;
00001c  f64550c4          MOV      r0,#0x5dc4
000020  8020              STRH     r0,[r4,#0]
                  |L3.34|
;;;326            return ((OS_MSG_QTY)0);
000022  2000              MOVS     r0,#0
;;;327        }
;;;328    #endif
;;;329    
;;;330        OS_CRITICAL_ENTER();
;;;331        entries = OS_MsgQFreeAll(&p_q->MsgQ);                   /* Return all OS_MSGs to the OS_MSG pool                  */
;;;332        OS_CRITICAL_EXIT();
;;;333       *p_err   = OS_ERR_NONE;
;;;334        return ((OS_MSG_QTY)entries);
;;;335    }
000024  bd70              POP      {r4-r6,pc}
                  |L3.38|
000026  f64550c3          MOV      r0,#0x5dc3            ;318
                  |L3.42|
00002a  8008              STRH     r0,[r1,#0]            ;311
00002c  e7f9              B        |L3.34|
                  |L3.46|
00002e  f7fffffe          BL       CPU_SR_Save
000032  4d12              LDR      r5,|L3.124|
000034  7829              LDRB     r1,[r5,#0]            ;330  ; OSSchedLockNestingCtr
000036  1c49              ADDS     r1,r1,#1              ;330
000038  7029              STRB     r1,[r5,#0]            ;330
00003a  f7fffffe          BL       CPU_SR_Restore
00003e  f1060020          ADD      r0,r6,#0x20           ;331
000042  f7fffffe          BL       OS_MsgQFreeAll
000046  4606              MOV      r6,r0                 ;331
000048  f7fffffe          BL       CPU_SR_Save
00004c  7829              LDRB     r1,[r5,#0]            ;332  ; OSSchedLockNestingCtr
00004e  1e49              SUBS     r1,r1,#1              ;332
000050  f01101ff          ANDS     r1,r1,#0xff           ;332
000054  7029              STRB     r1,[r5,#0]            ;332
000056  d107              BNE      |L3.104|
000058  4909              LDR      r1,|L3.128|
00005a  8809              LDRH     r1,[r1,#0]            ;332  ; OSIntQNbrEntries
00005c  b121              CBZ      r1,|L3.104|
00005e  f7fffffe          BL       CPU_SR_Restore
000062  f7fffffe          BL       OS_Sched0
000066  e001              B        |L3.108|
                  |L3.104|
000068  f7fffffe          BL       CPU_SR_Restore
                  |L3.108|
00006c  2000              MOVS     r0,#0                 ;333
00006e  8020              STRH     r0,[r4,#0]            ;333
000070  4630              MOV      r0,r6                 ;334
000072  bd70              POP      {r4-r6,pc}
;;;336    #endif
                          ENDP

                  |L3.116|
                          DCD      OSIntNestingCtr
                  |L3.120|
                          DCD      0x55455551
                  |L3.124|
                          DCD      OSSchedLockNestingCtr
                  |L3.128|
                          DCD      OSIntQNbrEntries

                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;383    
;;;384    void  *OSQPend (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;385                    OS_TICK       timeout,
;;;386                    OS_OPT        opt,
;;;387                    OS_MSG_SIZE  *p_msg_size,
;;;388                    CPU_TS       *p_ts,
;;;389                    OS_ERR       *p_err)
;;;390    {
000004  4607              MOV      r7,r0
000006  b089              SUB      sp,sp,#0x24
;;;391        OS_PEND_DATA  pend_data;
;;;392        void         *p_void;
;;;393        CPU_SR_ALLOC();
;;;394    
;;;395    
;;;396    
;;;397    #ifdef OS_SAFETY_CRITICAL
;;;398        if (p_err == (OS_ERR *)0) {
;;;399            OS_SAFETY_CRITICAL_EXCEPTION();
;;;400            return ((void *)0);
;;;401        }
;;;402    #endif
;;;403    
;;;404    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;405        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
000008  4853              LDR      r0,|L4.344|
00000a  e9dd5412          LDRD     r5,r4,[sp,#0x48]      ;390
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000010  4691              MOV      r9,r2                 ;390
000012  461e              MOV      r6,r3                 ;390
000014  468b              MOV      r11,r1                ;390
000016  b110              CBZ      r0,|L4.30|
;;;406           *p_err = OS_ERR_PEND_ISR;
000018  f24610ae          MOV      r0,#0x61ae
;;;407            return ((void *)0);
00001c  e03f              B        |L4.158|
                  |L4.30|
;;;408        }
;;;409    #endif
;;;410    
;;;411    #if OS_CFG_ARG_CHK_EN > 0u
;;;412        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
00001e  b13f              CBZ      r7,|L4.48|
;;;413           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;414            return ((void *)0);
;;;415        }
;;;416        if (p_msg_size == (OS_MSG_SIZE *)0) {
000020  b14e              CBZ      r6,|L4.54|
;;;417           *p_err = OS_ERR_PTR_INVALID;
;;;418            return ((void *)0);
;;;419        }
;;;420        switch (opt) {
000022  b15a              CBZ      r2,|L4.60|
000024  f5b24f00          CMP      r2,#0x8000
000028  d008              BEQ      |L4.60|
;;;421            case OS_OPT_PEND_BLOCKING:
;;;422            case OS_OPT_PEND_NON_BLOCKING:
;;;423                 break;
;;;424    
;;;425            default:
;;;426                *p_err = OS_ERR_OPT_INVALID;
00002a  f6456025          MOV      r0,#0x5e25
;;;427                 return ((void *)0);
00002e  e036              B        |L4.158|
                  |L4.48|
000030  f64550c3          MOV      r0,#0x5dc3            ;413
000034  e033              B        |L4.158|
                  |L4.54|
000036  f24620d5          MOV      r0,#0x62d5            ;417
00003a  e030              B        |L4.158|
                  |L4.60|
;;;428        }
;;;429    #endif
;;;430    
;;;431    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;432        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
00003c  4947              LDR      r1,|L4.348|
00003e  6838              LDR      r0,[r7,#0]
000040  4288              CMP      r0,r1
000042  d002              BEQ      |L4.74|
;;;433           *p_err = OS_ERR_OBJ_TYPE;
000044  f64550c4          MOV      r0,#0x5dc4
;;;434            return ((void *)0);
000048  e029              B        |L4.158|
                  |L4.74|
00004a  f04f0800          MOV      r8,#0
;;;435        }
;;;436    #endif
;;;437    
;;;438        if (p_ts != (CPU_TS *)0) {
00004e  b10d              CBZ      r5,|L4.84|
;;;439           *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
000050  f8c58000          STR      r8,[r5,#0]
                  |L4.84|
;;;440        }
;;;441    
;;;442        CPU_CRITICAL_ENTER();
000054  f7fffffe          BL       CPU_SR_Save
;;;443        p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
000058  9000              STR      r0,[sp,#0]
00005a  4623              MOV      r3,r4
00005c  462a              MOV      r2,r5
00005e  4631              MOV      r1,r6
000060  f1070020          ADD      r0,r7,#0x20
000064  f7fffffe          BL       OS_MsgQGet
000068  4682              MOV      r10,r0
;;;444                            p_msg_size,
;;;445                            p_ts,
;;;446                            p_err);
;;;447        if (*p_err == OS_ERR_NONE) {
00006a  8820              LDRH     r0,[r4,#0]
00006c  b140              CBZ      r0,|L4.128|
;;;448            CPU_CRITICAL_EXIT();
;;;449            return (p_void);                                    /* Yes, Return message received                           */
;;;450        }
;;;451    
;;;452        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
00006e  ea5f4009          LSLS     r0,r9,#16
000072  d50c              BPL      |L4.142|
;;;453            CPU_CRITICAL_EXIT();
000074  9800              LDR      r0,[sp,#0]
000076  f7fffffe          BL       CPU_SR_Restore
;;;454           *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
00007a  f24610b0          MOV      r0,#0x61b0
;;;455            return ((void *)0);
00007e  e00e              B        |L4.158|
                  |L4.128|
000080  9800              LDR      r0,[sp,#0]            ;448
000082  f7fffffe          BL       CPU_SR_Restore
000086  4650              MOV      r0,r10                ;449
                  |L4.136|
;;;456        } else {
;;;457            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;458                CPU_CRITICAL_EXIT();
;;;459               *p_err = OS_ERR_SCHED_LOCKED;
;;;460                return ((void *)0);
;;;461            }
;;;462        }
;;;463    
;;;464        OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();                  /* Lock the scheduler/re-enable interrupts                */
;;;465        OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
;;;466                (OS_PEND_OBJ *)((void *)p_q),
;;;467                OS_TASK_PEND_ON_Q,
;;;468                timeout);
;;;469        OS_CRITICAL_EXIT_NO_SCHED();
;;;470    
;;;471        OSSched();                                              /* Find the next highest priority task ready to run       */
;;;472    
;;;473        CPU_CRITICAL_ENTER();
;;;474        switch (OSTCBCurPtr->PendStatus) {
;;;475            case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
;;;476                 p_void     = OSTCBCurPtr->MsgPtr;
;;;477                *p_msg_size = OSTCBCurPtr->MsgSize;
;;;478                 if (p_ts  != (CPU_TS *)0) {
;;;479                    *p_ts   =  OSTCBCurPtr->TS;
;;;480                 }
;;;481                *p_err      = OS_ERR_NONE;
;;;482                 break;
;;;483    
;;;484            case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
;;;485                 p_void     = (void      *)0;
;;;486                *p_msg_size = (OS_MSG_SIZE)0;
;;;487                 if (p_ts  != (CPU_TS *)0) {
;;;488                    *p_ts   =  OSTCBCurPtr->TS;
;;;489                 }
;;;490                *p_err      = OS_ERR_PEND_ABORT;
;;;491                 break;
;;;492    
;;;493            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
;;;494                 p_void     = (void      *)0;
;;;495                *p_msg_size = (OS_MSG_SIZE)0;
;;;496                 if (p_ts  != (CPU_TS *)0) {
;;;497                    *p_ts   = (CPU_TS  )0;
;;;498                 }
;;;499                *p_err      = OS_ERR_TIMEOUT;
;;;500                 break;
;;;501    
;;;502            case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
;;;503                 p_void     = (void      *)0;
;;;504                *p_msg_size = (OS_MSG_SIZE)0;
;;;505                 if (p_ts  != (CPU_TS *)0) {
;;;506                    *p_ts   =  OSTCBCurPtr->TS;
;;;507                 }
;;;508                *p_err      = OS_ERR_OBJ_DEL;
;;;509                 break;
;;;510    
;;;511            default:
;;;512                 p_void     = (void      *)0;
;;;513                *p_msg_size = (OS_MSG_SIZE)0;
;;;514                *p_err      = OS_ERR_STATUS_INVALID;
;;;515                 break;
;;;516        }
;;;517        CPU_CRITICAL_EXIT();
;;;518        return (p_void);
;;;519    }
000088  b009              ADD      sp,sp,#0x24
00008a  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.142|
00008e  4834              LDR      r0,|L4.352|
000090  7801              LDRB     r1,[r0,#0]            ;457  ; OSSchedLockNestingCtr
000092  b139              CBZ      r1,|L4.164|
000094  9800              LDR      r0,[sp,#0]            ;458
000096  f7fffffe          BL       CPU_SR_Restore
00009a  f6465063          MOV      r0,#0x6d63            ;459
                  |L4.158|
00009e  8020              STRH     r0,[r4,#0]            ;459
0000a0  2000              MOVS     r0,#0                 ;460
0000a2  e7f1              B        |L4.136|
                  |L4.164|
0000a4  4681              MOV      r9,r0                 ;464
0000a6  2001              MOVS     r0,#1                 ;464
0000a8  f8890000          STRB     r0,[r9,#0]            ;464
0000ac  9800              LDR      r0,[sp,#0]            ;464
0000ae  f7fffffe          BL       CPU_SR_Restore
0000b2  465b              MOV      r3,r11                ;465
0000b4  2205              MOVS     r2,#5                 ;465
0000b6  4639              MOV      r1,r7                 ;465
0000b8  a801              ADD      r0,sp,#4              ;465
0000ba  f7fffffe          BL       OS_Pend
0000be  f7fffffe          BL       CPU_SR_Save
0000c2  f8991000          LDRB     r1,[r9,#0]            ;469  ; OSSchedLockNestingCtr
0000c6  1e49              SUBS     r1,r1,#1              ;469
0000c8  f8891000          STRB     r1,[r9,#0]            ;469
0000cc  f7fffffe          BL       CPU_SR_Restore
0000d0  f7fffffe          BL       OSSched
0000d4  f7fffffe          BL       CPU_SR_Save
0000d8  4602              MOV      r2,r0                 ;473
0000da  4822              LDR      r0,|L4.356|
0000dc  6801              LDR      r1,[r0,#0]            ;474  ; OSTCBCurPtr
0000de  f8913035          LDRB     r3,[r1,#0x35]         ;474
0000e2  b163              CBZ      r3,|L4.254|
0000e4  2b01              CMP      r3,#1                 ;474
0000e6  d015              BEQ      |L4.276|
0000e8  2b02              CMP      r3,#2                 ;474
0000ea  d02a              BEQ      |L4.322|
0000ec  2b03              CMP      r3,#3                 ;474
0000ee  f04f0700          MOV      r7,#0                 ;494
0000f2  d019              BEQ      |L4.296|
0000f4  f8a68000          STRH     r8,[r6,#0]            ;513
0000f8  f646602e          MOV      r0,#0x6e2e            ;514
0000fc  e01b              B        |L4.310|
                  |L4.254|
0000fe  6dcf              LDR      r7,[r1,#0x5c]         ;477
000100  f8b11060          LDRH     r1,[r1,#0x60]         ;477
000104  8031              STRH     r1,[r6,#0]            ;477
000106  b115              CBZ      r5,|L4.270|
000108  6800              LDR      r0,[r0,#0]            ;479  ; OSTCBCurPtr
00010a  6c00              LDR      r0,[r0,#0x40]         ;479
00010c  6028              STR      r0,[r5,#0]            ;479
                  |L4.270|
00010e  f8a48000          STRH     r8,[r4,#0]            ;481
000112  e011              B        |L4.312|
                  |L4.276|
000114  2700              MOVS     r7,#0                 ;485
000116  f8a68000          STRH     r8,[r6,#0]            ;486
00011a  b115              CBZ      r5,|L4.290|
00011c  6800              LDR      r0,[r0,#0]            ;488  ; OSTCBCurPtr
00011e  6c00              LDR      r0,[r0,#0x40]         ;488
000120  6028              STR      r0,[r5,#0]            ;488
                  |L4.290|
000122  f24610a9          MOV      r0,#0x61a9            ;490
000126  e006              B        |L4.310|
                  |L4.296|
000128  4640              MOV      r0,r8                 ;495
00012a  f8a68000          STRH     r8,[r6,#0]            ;495
00012e  b105              CBZ      r5,|L4.306|
000130  6028              STR      r0,[r5,#0]            ;497
                  |L4.306|
000132  f24720d9          MOV      r0,#0x72d9            ;499
                  |L4.310|
000136  8020              STRH     r0,[r4,#0]            ;490
                  |L4.312|
000138  4610              MOV      r0,r2                 ;517
00013a  f7fffffe          BL       CPU_SR_Restore
00013e  4638              MOV      r0,r7                 ;518
000140  e7a2              B        |L4.136|
                  |L4.322|
000142  2700              MOVS     r7,#0                 ;503
000144  f8a68000          STRH     r8,[r6,#0]            ;504
000148  b115              CBZ      r5,|L4.336|
00014a  6800              LDR      r0,[r0,#0]            ;506  ; OSTCBCurPtr
00014c  6c00              LDR      r0,[r0,#0x40]         ;506
00014e  6028              STR      r0,[r5,#0]            ;506
                  |L4.336|
000150  f64550c2          MOV      r0,#0x5dc2            ;508
000154  e7ef              B        |L4.310|
;;;520    
                          ENDP

000156  0000              DCW      0x0000
                  |L4.344|
                          DCD      OSIntNestingCtr
                  |L4.348|
                          DCD      0x55455551
                  |L4.352|
                          DCD      OSSchedLockNestingCtr
                  |L4.356|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=2

                  OSQPendAbort PROC
;;;554    #if OS_CFG_Q_PEND_ABORT_EN > 0u
;;;555    OS_OBJ_QTY  OSQPendAbort (OS_Q    *p_q,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;556                              OS_OPT   opt,
;;;557                              OS_ERR  *p_err)
;;;558    {
000004  4604              MOV      r4,r0
;;;559        OS_PEND_LIST  *p_pend_list;
;;;560        OS_TCB        *p_tcb;
;;;561        CPU_TS         ts;
;;;562        OS_OBJ_QTY     nbr_tasks;
;;;563        CPU_SR_ALLOC();
;;;564    
;;;565    
;;;566    
;;;567    #ifdef OS_SAFETY_CRITICAL
;;;568        if (p_err == (OS_ERR *)0) {
;;;569            OS_SAFETY_CRITICAL_EXCEPTION();
;;;570            return ((OS_OBJ_QTY)0u);
;;;571        }
;;;572    #endif
;;;573    
;;;574    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;575        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
000006  4830              LDR      r0,|L5.200|
000008  4688              MOV      r8,r1                 ;558
00000a  4615              MOV      r5,r2                 ;558
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000e  b110              CBZ      r0,|L5.22|
;;;576           *p_err =  OS_ERR_PEND_ABORT_ISR;
000010  f24610aa          MOV      r0,#0x61aa
;;;577            return ((OS_OBJ_QTY)0u);
000014  e011              B        |L5.58|
                  |L5.22|
;;;578        }
;;;579    #endif
;;;580    
;;;581    #if OS_CFG_ARG_CHK_EN > 0u
;;;582        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
000016  b174              CBZ      r4,|L5.54|
;;;583           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;584            return ((OS_OBJ_QTY)0u);
;;;585        }
;;;586        switch (opt) {                                          /* Validate 'opt'                                         */
000018  0008              MOVS     r0,r1
00001a  f44f7a80          MOV      r10,#0x100
00001e  d00e              BEQ      |L5.62|
000020  4550              CMP      r0,r10
000022  d00c              BEQ      |L5.62|
000024  f5b04f00          CMP      r0,#0x8000
000028  d009              BEQ      |L5.62|
00002a  f5b14f01          CMP      r1,#0x8100
00002e  d006              BEQ      |L5.62|
;;;587            case OS_OPT_PEND_ABORT_1:
;;;588            case OS_OPT_PEND_ABORT_ALL:
;;;589            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;590            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;591                 break;
;;;592    
;;;593            default:
;;;594                *p_err =  OS_ERR_OPT_INVALID;
000030  f6456025          MOV      r0,#0x5e25
;;;595                 return ((OS_OBJ_QTY)0u);
000034  e001              B        |L5.58|
                  |L5.54|
000036  f64550c3          MOV      r0,#0x5dc3            ;583
                  |L5.58|
00003a  8010              STRH     r0,[r2,#0]            ;576
00003c  e022              B        |L5.132|
                  |L5.62|
;;;596        }
;;;597    #endif
;;;598    
;;;599    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;600        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure queue was created                            */
00003e  4923              LDR      r1,|L5.204|
000040  6820              LDR      r0,[r4,#0]
000042  4288              CMP      r0,r1
000044  d002              BEQ      |L5.76|
;;;601           *p_err =  OS_ERR_OBJ_TYPE;
000046  f64550c4          MOV      r0,#0x5dc4
;;;602            return ((OS_OBJ_QTY)0u);
00004a  e7f6              B        |L5.58|
                  |L5.76|
;;;603        }
;;;604    #endif
;;;605    
;;;606        CPU_CRITICAL_ENTER();
00004c  f7fffffe          BL       CPU_SR_Save
000050  4601              MOV      r1,r0
;;;607        p_pend_list = &p_q->PendList;
;;;608        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on queue?                             */
000052  8a20              LDRH     r0,[r4,#0x10]
000054  f1040708          ADD      r7,r4,#8              ;607
000058  b170              CBZ      r0,|L5.120|
;;;609            CPU_CRITICAL_EXIT();                                /* No                                                     */
;;;610           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;611            return ((OS_OBJ_QTY)0u);
;;;612        }
;;;613    
;;;614        OS_CRITICAL_ENTER_CPU_CRITICAL_EXIT();
00005a  f8df9074          LDR      r9,|L5.208|
00005e  4608              MOV      r0,r1
000060  f8992000          LDRB     r2,[r9,#0]  ; OSSchedLockNestingCtr
000064  1c52              ADDS     r2,r2,#1
000066  f8892000          STRB     r2,[r9,#0]
00006a  f7fffffe          BL       CPU_SR_Restore
;;;615        nbr_tasks = 0u;
00006e  2600              MOVS     r6,#0
;;;616        ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
000070  f7fffffe          BL       CPU_TS_TmrRd
000074  4683              MOV      r11,r0
;;;617        while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
000076  e012              B        |L5.158|
                  |L5.120|
000078  4608              MOV      r0,r1                 ;609
00007a  f7fffffe          BL       CPU_SR_Restore
00007e  f24610ab          MOV      r0,#0x61ab            ;610
000082  8028              STRH     r0,[r5,#0]            ;610
                  |L5.132|
000084  2000              MOVS     r0,#0                 ;611
                  |L5.134|
;;;618            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;619            OS_PendAbort((OS_PEND_OBJ *)((void *)p_q),
;;;620                         p_tcb,
;;;621                         ts);
;;;622            nbr_tasks++;
;;;623            if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
;;;624                break;                                          /* No                                                     */
;;;625            }
;;;626        }
;;;627        OS_CRITICAL_EXIT_NO_SCHED();
;;;628    
;;;629        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
;;;630            OSSched();                                          /* Run the scheduler                                      */
;;;631        }
;;;632    
;;;633       *p_err = OS_ERR_NONE;
;;;634        return (nbr_tasks);
;;;635    }
000086  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.138|
00008a  6838              LDR      r0,[r7,#0]            ;618
00008c  465a              MOV      r2,r11                ;619
00008e  6881              LDR      r1,[r0,#8]            ;619
000090  4620              MOV      r0,r4                 ;619
000092  f7fffffe          BL       OS_PendAbort
000096  1c76              ADDS     r6,r6,#1              ;622
000098  b2b6              UXTH     r6,r6                 ;622
00009a  45d0              CMP      r8,r10                ;623
00009c  d102              BNE      |L5.164|
                  |L5.158|
00009e  8938              LDRH     r0,[r7,#8]            ;617
0000a0  2800              CMP      r0,#0                 ;617
0000a2  d1f2              BNE      |L5.138|
                  |L5.164|
0000a4  f7fffffe          BL       CPU_SR_Save
0000a8  f8992000          LDRB     r2,[r9,#0]            ;627  ; OSSchedLockNestingCtr
0000ac  1e52              SUBS     r2,r2,#1              ;627
0000ae  f8892000          STRB     r2,[r9,#0]            ;627
0000b2  f7fffffe          BL       CPU_SR_Restore
0000b6  ea5f4008          LSLS     r0,r8,#16             ;629
0000ba  d401              BMI      |L5.192|
0000bc  f7fffffe          BL       OSSched
                  |L5.192|
0000c0  2000              MOVS     r0,#0                 ;633
0000c2  8028              STRH     r0,[r5,#0]            ;633
0000c4  4630              MOV      r0,r6                 ;634
0000c6  e7de              B        |L5.134|
;;;636    #endif
                          ENDP

                  |L5.200|
                          DCD      OSIntNestingCtr
                  |L5.204|
                          DCD      0x55455551
                  |L5.208|
                          DCD      OSSchedLockNestingCtr

                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=2

                  OSQPost PROC
;;;687    
;;;688    void  OSQPost (OS_Q         *p_q,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;689                   void         *p_void,
;;;690                   OS_MSG_SIZE   msg_size,
;;;691                   OS_OPT        opt,
;;;692                   OS_ERR       *p_err)
;;;693    {
000004  4690              MOV      r8,r2
000006  9c0c              LDR      r4,[sp,#0x30]
000008  461d              MOV      r5,r3
00000a  4689              MOV      r9,r1
00000c  0006              MOVS     r6,r0
00000e  d00e              BEQ      |L6.46|
;;;694        CPU_TS  ts;
;;;695    
;;;696    
;;;697    
;;;698    #ifdef OS_SAFETY_CRITICAL
;;;699        if (p_err == (OS_ERR *)0) {
;;;700            OS_SAFETY_CRITICAL_EXCEPTION();
;;;701            return;
;;;702        }
;;;703    #endif
;;;704    
;;;705    #if OS_CFG_ARG_CHK_EN > 0u
;;;706        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
;;;707           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;708            return;
;;;709        }
;;;710        switch (opt) {                                          /* Validate 'opt'                                         */
000010  f44f7100          MOV      r1,#0x200
000014  f5b54f00          CMP      r5,#0x8000
000018  d018              BEQ      |L6.76|
00001a  dc0b              BGT      |L6.52|
00001c  b1b5              CBZ      r5,|L6.76|
00001e  2d10              CMP      r5,#0x10
000020  d014              BEQ      |L6.76|
000022  428d              CMP      r5,r1
000024  d012              BEQ      |L6.76|
000026  f5b57f04          CMP      r5,#0x210
00002a  d10c              BNE      |L6.70|
00002c  e00e              B        |L6.76|
                  |L6.46|
00002e  f64550c3          MOV      r0,#0x5dc3            ;707
000032  e011              B        |L6.88|
                  |L6.52|
000034  f5a54000          SUB      r0,r5,#0x8000
000038  3810              SUBS     r0,r0,#0x10
00003a  d007              BEQ      |L6.76|
00003c  f5b07ff8          CMP      r0,#0x1f0
000040  d004              BEQ      |L6.76|
000042  4288              CMP      r0,r1
000044  d002              BEQ      |L6.76|
                  |L6.70|
;;;711            case OS_OPT_POST_FIFO:
;;;712            case OS_OPT_POST_LIFO:
;;;713            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL:
;;;714            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
;;;715            case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
;;;716            case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
;;;717            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;718            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;719                 break;
;;;720    
;;;721            default:
;;;722                *p_err =  OS_ERR_OPT_INVALID;
000046  f6456025          MOV      r0,#0x5e25
;;;723                 return;
00004a  e005              B        |L6.88|
                  |L6.76|
;;;724        }
;;;725    #endif
;;;726    
;;;727    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;728        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
00004c  4f11              LDR      r7,|L6.148|
00004e  6830              LDR      r0,[r6,#0]
000050  42b8              CMP      r0,r7
000052  d004              BEQ      |L6.94|
;;;729           *p_err = OS_ERR_OBJ_TYPE;
000054  f64550c4          MOV      r0,#0x5dc4
                  |L6.88|
000058  8020              STRH     r0,[r4,#0]
                  |L6.90|
;;;730            return;
;;;731        }
;;;732    #endif
;;;733    
;;;734        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;735    
;;;736    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;737        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {
;;;738            OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_Q,             /* Post to ISR queue                                      */
;;;739                        (void      *)p_q,
;;;740                        (void      *)p_void,
;;;741                        (OS_MSG_SIZE)msg_size,
;;;742                        (OS_FLAGS   )0,
;;;743                        (OS_OPT     )opt,
;;;744                        (CPU_TS     )ts,
;;;745                        (OS_ERR    *)p_err);
;;;746            return;
;;;747        }
;;;748    #endif
;;;749    
;;;750        OS_QPost(p_q,
;;;751                 p_void,
;;;752                 msg_size,
;;;753                 opt,
;;;754                 ts,
;;;755                 p_err);
;;;756    }
00005a  e8bd87ff          POP      {r0-r10,pc}
                  |L6.94|
00005e  f7fffffe          BL       CPU_TS_TmrRd
000062  490d              LDR      r1,|L6.152|
000064  7809              LDRB     r1,[r1,#0]            ;737  ; OSIntNestingCtr
000066  b159              CBZ      r1,|L6.128|
000068  2100              MOVS     r1,#0                 ;738
00006a  e9cd1500          STRD     r1,r5,[sp,#0]         ;738
00006e  e9cd0402          STRD     r0,r4,[sp,#8]         ;738
000072  4643              MOV      r3,r8                 ;738
000074  464a              MOV      r2,r9                 ;738
000076  4631              MOV      r1,r6                 ;738
000078  4638              MOV      r0,r7                 ;738
00007a  f7fffffe          BL       OS_IntQPost
00007e  e7ec              B        |L6.90|
                  |L6.128|
000080  e9cd0400          STRD     r0,r4,[sp,#0]         ;750
000084  462b              MOV      r3,r5                 ;750
000086  4642              MOV      r2,r8                 ;750
000088  4649              MOV      r1,r9                 ;750
00008a  4630              MOV      r0,r6                 ;750
00008c  f7fffffe          BL       OS_QPost
000090  e7e3              B        |L6.90|
;;;757    
                          ENDP

000092  0000              DCW      0x0000
                  |L6.148|
                          DCD      0x55455551
                  |L6.152|
                          DCD      OSIntNestingCtr

                          AREA ||i.OS_QClr||, CODE, READONLY, ALIGN=2

                  OS_QClr PROC
;;;774    
;;;775    void  OS_QClr (OS_Q  *p_q)
000000  b570              PUSH     {r4-r6,lr}
;;;776    {
000002  4604              MOV      r4,r0
;;;777        (void)OS_MsgQFreeAll(&p_q->MsgQ);                       /* Return all OS_MSGs to the free list                    */
000004  3020              ADDS     r0,r0,#0x20
000006  4605              MOV      r5,r0
000008  f7fffffe          BL       OS_MsgQFreeAll
;;;778        p_q->Type    =  OS_OBJ_TYPE_NONE;                       /* Mark the data structure as a NONE                      */
00000c  4806              LDR      r0,|L7.40|
;;;779        p_q->NamePtr = (CPU_CHAR *)((void *)"?Q");
00000e  6020              STR      r0,[r4,#0]
000010  4806              LDR      r0,|L7.44|
;;;780        OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the list of OS_MSGs                         */
000012  6060              STR      r0,[r4,#4]
000014  2100              MOVS     r1,#0
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       OS_MsgQInit
;;;781                    0u);
;;;782        OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
00001c  f1040008          ADD      r0,r4,#8
000020  e8bd4070          POP      {r4-r6,lr}
000024  f7ffbffe          B.W      OS_PendListInit
;;;783    }
;;;784    
                          ENDP

                  |L7.40|
                          DCD      0x454e4f4e
                  |L7.44|
                          DCD      ||.constdata||

                          AREA ||i.OS_QDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_QDbgListAdd PROC
;;;802    #if OS_CFG_DBG_EN > 0u
;;;803    void  OS_QDbgListAdd (OS_Q  *p_q)
000000  2200              MOVS     r2,#0
;;;804    {
;;;805        p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
;;;806        p_q->DbgPrevPtr               = (OS_Q     *)0;
;;;807        if (OSQDbgListPtr == (OS_Q *)0) {
000002  4b07              LDR      r3,|L8.32|
000004  a105              ADR      r1,|L8.28|
000006  6142              STR      r2,[r0,#0x14]
000008  61c1              STR      r1,[r0,#0x1c]
00000a  6819              LDR      r1,[r3,#0]            ;804  ; OSQDbgListPtr
00000c  b119              CBZ      r1,|L8.22|
;;;808            p_q->DbgNextPtr           = (OS_Q     *)0;
;;;809        } else {
;;;810            p_q->DbgNextPtr           =  OSQDbgListPtr;
;;;811            OSQDbgListPtr->DbgPrevPtr =  p_q;
00000e  6181              STR      r1,[r0,#0x18]
000010  6148              STR      r0,[r1,#0x14]
                  |L8.18|
;;;812        }
;;;813        OSQDbgListPtr                 =  p_q;
;;;814    }
000012  6018              STR      r0,[r3,#0]  ; OSQDbgListPtr
000014  4770              BX       lr
                  |L8.22|
000016  6182              STR      r2,[r0,#0x18]         ;808
000018  e7fb              B        |L8.18|
;;;815    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
00001c  2000              DCB      " ",0
00001e  00                DCB      0
00001f  00                DCB      0
                  |L8.32|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_QDbgListRemove PROC
;;;817    
;;;818    void  OS_QDbgListRemove (OS_Q  *p_q)
000000  e9d02105          LDRD     r2,r1,[r0,#0x14]
;;;819    {
000004  2300              MOVS     r3,#0
000006  b12a              CBZ      r2,|L9.20|
;;;820        OS_Q  *p_q_next;
;;;821        OS_Q  *p_q_prev;
;;;822    
;;;823    
;;;824        p_q_prev = p_q->DbgPrevPtr;
;;;825        p_q_next = p_q->DbgNextPtr;
;;;826    
;;;827        if (p_q_prev == (OS_Q *)0) {
;;;828            OSQDbgListPtr = p_q_next;
;;;829            if (p_q_next != (OS_Q *)0) {
;;;830                p_q_next->DbgPrevPtr = (OS_Q *)0;
;;;831            }
;;;832            p_q->DbgNextPtr = (OS_Q *)0;
;;;833    
;;;834        } else if (p_q_next == (OS_Q *)0) {
000008  b151              CBZ      r1,|L9.32|
;;;835            p_q_prev->DbgNextPtr = (OS_Q *)0;
;;;836            p_q->DbgPrevPtr      = (OS_Q *)0;
;;;837    
;;;838        } else {
;;;839            p_q_prev->DbgNextPtr =  p_q_next;
;;;840            p_q_next->DbgPrevPtr =  p_q_prev;
00000a  6191              STR      r1,[r2,#0x18]
;;;841            p_q->DbgNextPtr      = (OS_Q *)0;
00000c  614a              STR      r2,[r1,#0x14]
00000e  6183              STR      r3,[r0,#0x18]
                  |L9.16|
;;;842            p_q->DbgPrevPtr      = (OS_Q *)0;
000010  6143              STR      r3,[r0,#0x14]
;;;843        }
;;;844    }
000012  4770              BX       lr
                  |L9.20|
000014  4a03              LDR      r2,|L9.36|
000016  6011              STR      r1,[r2,#0]            ;829  ; OSQDbgListPtr
000018  b101              CBZ      r1,|L9.28|
00001a  614b              STR      r3,[r1,#0x14]         ;830
                  |L9.28|
00001c  6183              STR      r3,[r0,#0x18]         ;832
00001e  4770              BX       lr
                  |L9.32|
000020  6193              STR      r3,[r2,#0x18]         ;836
000022  e7f5              B        |L9.16|
;;;845    #endif
                          ENDP

                  |L9.36|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QInit||, CODE, READONLY, ALIGN=2

                  OS_QInit PROC
;;;864    
;;;865    void  OS_QInit (OS_ERR  *p_err)
000000  4a03              LDR      r2,|L10.16|
;;;866    {
;;;867    #ifdef OS_SAFETY_CRITICAL
;;;868        if (p_err == (OS_ERR *)0) {
;;;869            OS_SAFETY_CRITICAL_EXCEPTION();
;;;870            return;
;;;871        }
;;;872    #endif
;;;873    
;;;874    #if OS_CFG_DBG_EN > 0u
;;;875        OSQDbgListPtr = (OS_Q *)0;
000002  2100              MOVS     r1,#0
;;;876    #endif
;;;877    
;;;878        OSQQty        = (OS_OBJ_QTY)0;
000004  6011              STR      r1,[r2,#0]  ; OSQDbgListPtr
000006  4a03              LDR      r2,|L10.20|
000008  8011              STRH     r1,[r2,#0]
;;;879       *p_err         = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;880    }
00000c  4770              BX       lr
;;;881    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      OSQDbgListPtr
                  |L10.20|
                          DCD      OSQQty

                          AREA ||i.OS_QPost||, CODE, READONLY, ALIGN=2

                  OS_QPost PROC
;;;921    
;;;922    void  OS_QPost (OS_Q         *p_q,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;923                    void         *p_void,
;;;924                    OS_MSG_SIZE   msg_size,
;;;925                    OS_OPT        opt,
;;;926                    CPU_TS        ts,
;;;927                    OS_ERR       *p_err)
;;;928    {
000004  b083              SUB      sp,sp,#0xc
000006  4693              MOV      r11,r2
000008  e9dda910          LDRD     r10,r9,[sp,#0x40]
00000c  461f              MOV      r7,r3
00000e  4606              MOV      r6,r0
;;;929        OS_OBJ_QTY     cnt;
;;;930        OS_OPT         post_type;
;;;931        OS_PEND_LIST  *p_pend_list;
;;;932        OS_PEND_DATA  *p_pend_data;
;;;933        OS_PEND_DATA  *p_pend_data_next;
;;;934        OS_TCB        *p_tcb;
;;;935        CPU_SR_ALLOC();
;;;936    
;;;937    
;;;938    
;;;939        OS_CRITICAL_ENTER();
000010  f7fffffe          BL       CPU_SR_Save
000014  4c29              LDR      r4,|L11.188|
000016  7821              LDRB     r1,[r4,#0]  ; OSSchedLockNestingCtr
000018  1c49              ADDS     r1,r1,#1
00001a  7021              STRB     r1,[r4,#0]
00001c  f7fffffe          BL       CPU_SR_Restore
;;;940        p_pend_list = &p_q->PendList;
;;;941        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
000020  8a35              LDRH     r5,[r6,#0x10]
000022  f1060008          ADD      r0,r6,#8              ;940
000026  b11d              CBZ      r5,|L11.48|
;;;942            if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
;;;943                post_type = OS_OPT_POST_FIFO;
;;;944            } else {
;;;945                post_type = OS_OPT_POST_LIFO;
;;;946            }
;;;947            OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
;;;948                       p_void,
;;;949                       msg_size,
;;;950                       post_type,
;;;951                       ts,
;;;952                       p_err);
;;;953            OS_CRITICAL_EXIT();
;;;954            return;
;;;955        }
;;;956    
;;;957        if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
000028  05b9              LSLS     r1,r7,#22
00002a  d525              BPL      |L11.120|
;;;958            cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
;;;959        } else {
;;;960            cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
;;;961        }
;;;962        p_pend_data = p_pend_list->HeadPtr;
00002c  6800              LDR      r0,[r0,#0]
00002e  e032              B        |L11.150|
                  |L11.48|
000030  06f8              LSLS     r0,r7,#27             ;942
000032  d401              BMI      |L11.56|
000034  2300              MOVS     r3,#0                 ;943
000036  e000              B        |L11.58|
                  |L11.56|
000038  2310              MOVS     r3,#0x10              ;945
                  |L11.58|
00003a  e9cda900          STRD     r10,r9,[sp,#0]        ;947
00003e  465a              MOV      r2,r11                ;947
000040  f1060020          ADD      r0,r6,#0x20           ;947
000044  9904              LDR      r1,[sp,#0x10]         ;947
000046  f7fffffe          BL       OS_MsgQPut
00004a  f7fffffe          BL       CPU_SR_Save
00004e  7821              LDRB     r1,[r4,#0]            ;953  ; OSSchedLockNestingCtr
000050  1e49              SUBS     r1,r1,#1              ;953
000052  f01101ff          ANDS     r1,r1,#0xff           ;953
000056  7021              STRB     r1,[r4,#0]            ;953
000058  d109              BNE      |L11.110|
00005a  4919              LDR      r1,|L11.192|
00005c  8809              LDRH     r1,[r1,#0]            ;953  ; OSIntQNbrEntries
00005e  b131              CBZ      r1,|L11.110|
000060  f7fffffe          BL       CPU_SR_Restore
000064  b007              ADD      sp,sp,#0x1c           ;953
000066  e8bd4ff0          POP      {r4-r11,lr}           ;953
00006a  f7ffbffe          B.W      OS_Sched0
                  |L11.110|
00006e  b007              ADD      sp,sp,#0x1c           ;953
000070  e8bd4ff0          POP      {r4-r11,lr}           ;953
000074  f7ffbffe          B.W      CPU_SR_Restore
                  |L11.120|
000078  6800              LDR      r0,[r0,#0]
00007a  2501              MOVS     r5,#1                 ;960
                  |L11.124|
00007c  1d00              ADDS     r0,r0,#4
;;;963        while (cnt > 0u) {
;;;964            p_tcb            = p_pend_data->TCBPtr;
;;;965            p_pend_data_next = p_pend_data->NextPtr;
;;;966            OS_Post((OS_PEND_OBJ *)((void *)p_q),
00007e  465b              MOV      r3,r11
000080  c803              LDM      r0,{r0,r1}            ;962
000082  4680              MOV      r8,r0                 ;965
000084  f8cda000          STR      r10,[sp,#0]
000088  4630              MOV      r0,r6
00008a  9a04              LDR      r2,[sp,#0x10]
00008c  f7fffffe          BL       OS_Post
;;;967                    p_tcb,
;;;968                    p_void,
;;;969                    msg_size,
;;;970                    ts);
;;;971            p_pend_data = p_pend_data_next;
;;;972            cnt--;
000090  1e6d              SUBS     r5,r5,#1
000092  4640              MOV      r0,r8                 ;971
000094  b2ad              UXTH     r5,r5
                  |L11.150|
000096  2d00              CMP      r5,#0                 ;963
000098  d1f0              BNE      |L11.124|
;;;973        }
;;;974        OS_CRITICAL_EXIT_NO_SCHED();
00009a  f7fffffe          BL       CPU_SR_Save
00009e  7821              LDRB     r1,[r4,#0]  ; OSSchedLockNestingCtr
0000a0  1e49              SUBS     r1,r1,#1
0000a2  7021              STRB     r1,[r4,#0]
0000a4  f7fffffe          BL       CPU_SR_Restore
;;;975        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
0000a8  0438              LSLS     r0,r7,#16
0000aa  d401              BMI      |L11.176|
;;;976            OSSched();                                          /* Run the scheduler                                      */
0000ac  f7fffffe          BL       OSSched
                  |L11.176|
;;;977        }
;;;978       *p_err = OS_ERR_NONE;
0000b0  2100              MOVS     r1,#0
0000b2  f8a91000          STRH     r1,[r9,#0]
;;;979    }
0000b6  b007              ADD      sp,sp,#0x1c
0000b8  e8bd8ff0          POP      {r4-r11,pc}
;;;980    
                          ENDP

                  |L11.188|
                          DCD      OSSchedLockNestingCtr
                  |L11.192|
                          DCD      OSIntQNbrEntries

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  3f5100            DCB      0x3f,0x51,0x00
