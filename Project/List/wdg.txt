; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\wdg.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\wdg.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\wdg.crf ..\BSP\src\wdg.c]
                          THUMB

                          AREA ||i.WWDG_IRQHandler||, CODE, READONLY, ALIGN=2

                  WWDG_IRQHandler PROC
;;;49     
;;;50     void WWDG_IRQHandler(void)
000000  4804              LDR      r0,|L1.20|
;;;51     {
000002  b510              PUSH     {r4,lr}
;;;52     	WWDG_SetCounter(WWDG_CNT);
000004  7840              LDRB     r0,[r0,#1]  ; WWDG_CNT
000006  f7fffffe          BL       WWDG_SetCounter
;;;53     	WWDG_ClearFlag();
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      WWDG_ClearFlag
;;;54     }
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||

                          AREA ||i.WWDG_NVIC_Init||, CODE, READONLY, ALIGN=1

                  WWDG_NVIC_Init PROC
;;;26     
;;;27     void WWDG_NVIC_Init()
000000  b508              PUSH     {r3,lr}
;;;28     {
;;;29     	NVIC_InitTypeDef nvic;
;;;30     	nvic.NVIC_IRQChannel = WWDG_IRQn;
000002  2000              MOVS     r0,#0
000004  f88d0000          STRB     r0,[sp,#0]
;;;31     	nvic.NVIC_IRQChannelPreemptionPriority = 2;
000008  2002              MOVS     r0,#2
00000a  f88d0001          STRB     r0,[sp,#1]
;;;32     	nvic.NVIC_IRQChannelSubPriority = 3;
00000e  2003              MOVS     r0,#3
000010  f88d0002          STRB     r0,[sp,#2]
;;;33     	nvic.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;34     	NVIC_Init(&nvic);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;35     }
000020  bd08              POP      {r3,pc}
;;;36     
                          ENDP


                          AREA ||i.WWDG_Set_Counter||, CODE, READONLY, ALIGN=1

                  WWDG_Set_Counter PROC
;;;21     
;;;22     void WWDG_Set_Counter(u8 cnt)
000000  f7ffbffe          B.W      WWDG_Enable
;;;23     {
;;;24     	WWDG_Enable(cnt);
;;;25     }
;;;26     
                          ENDP


                          AREA ||i.iwdg_feed||, CODE, READONLY, ALIGN=1

                  iwdg_feed PROC
;;;16     
;;;17     void iwdg_feed(void)
000000  f7ffbffe          B.W      IWDG_ReloadCounter
;;;18     {
;;;19     	IWDG_ReloadCounter();
;;;20     }
;;;21     
                          ENDP


                          AREA ||i.iwdg_init||, CODE, READONLY, ALIGN=1

                  iwdg_init PROC
;;;7      
;;;8      void iwdg_init(uint8_t prep, uint16_t rlr)
000000  b570              PUSH     {r4-r6,lr}
;;;9      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;10     	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable); 		//使能写权限
000006  f2455055          MOV      r0,#0x5555
00000a  f7fffffe          BL       IWDG_WriteAccessCmd
;;;11     	IWDG_SetReload(rlr);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       IWDG_SetReload
;;;12     	IWDG_SetPrescaler(prep);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       IWDG_SetPrescaler
;;;13     	IWDG_ReloadCounter();
00001a  f7fffffe          BL       IWDG_ReloadCounter
;;;14     	IWDG_Enable();
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      IWDG_Enable
;;;15     }
;;;16     
                          ENDP


                          AREA ||i.wwdg_init||, CODE, READONLY, ALIGN=2

                  wwdg_init PROC
;;;36     
;;;37     void wwdg_init(u8 tr, u8 wr, u32 fprer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;38     {
000004  460f              MOV      r7,r1
000006  4605              MOV      r5,r0
;;;39     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
000008  2101              MOVS     r1,#1
00000a  4616              MOV      r6,r2                 ;38
00000c  02c8              LSLS     r0,r1,#11
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;40     	WWDG_CNT = tr & WWDG_CNT_MAX;
000012  4c0a              LDR      r4,|L6.60|
000014  7820              LDRB     r0,[r4,#0]  ; WWDG_CNT_MAX
000016  4005              ANDS     r5,r5,r0
000018  7065              STRB     r5,[r4,#1]
;;;41     	WWDG_SetPrescaler(fprer);
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       WWDG_SetPrescaler
;;;42     	WWDG_SetWindowValue(wr);
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       WWDG_SetWindowValue
;;;43     	WWDG_Enable(WWDG_CNT);
000026  7860              LDRB     r0,[r4,#1]  ; WWDG_CNT
000028  f7fffffe          BL       WWDG_Enable
;;;44     	WWDG_ClearFlag();
00002c  f7fffffe          BL       WWDG_ClearFlag
;;;45     	WWDG_NVIC_Init();
000030  f7fffffe          BL       WWDG_NVIC_Init
;;;46     	WWDG_EnableIT();
000034  e8bd41f0          POP      {r4-r8,lr}
000038  f7ffbffe          B.W      WWDG_EnableIT
;;;47     }
;;;48     
                          ENDP

                  |L6.60|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  WWDG_CNT_MAX
000000  7f                DCB      0x7f
                  WWDG_CNT
000001  7f                DCB      0x7f
