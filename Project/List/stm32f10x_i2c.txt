; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\stm32f10x_i2c.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\stm32f10x_i2c.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_i2c.crf ..\STM32F10x_FWLib\src\stm32f10x_i2c.c]
                          THUMB

                          AREA ||i.I2C_ARPCmd||, CODE, READONLY, ALIGN=1

                  I2C_ARPCmd PROC
;;;839      */
;;;840    void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;841    {
;;;842      /* Check the parameters */
;;;843      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;844      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;845      if (NewState != DISABLE)
;;;846      {
;;;847        /* Enable the selected I2C ARP */
;;;848        I2Cx->CR1 |= CR1_ENARP_Set;
;;;849      }
;;;850      else
;;;851      {
;;;852        /* Disable the selected I2C ARP */
;;;853        I2Cx->CR1 &= CR1_ENARP_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L1.12|
000006  f0410110          ORR      r1,r1,#0x10           ;848
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  f0210110          BIC      r1,r1,#0x10
                  |L1.16|
000010  8001              STRH     r1,[r0,#0]            ;848
;;;854      }
;;;855    }
000012  4770              BX       lr
;;;856    
                          ENDP


                          AREA ||i.I2C_AcknowledgeConfig||, CODE, READONLY, ALIGN=1

                  I2C_AcknowledgeConfig PROC
;;;441      */
;;;442    void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;443    {
;;;444      /* Check the parameters */
;;;445      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;446      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;447      if (NewState != DISABLE)
;;;448      {
;;;449        /* Enable the acknowledgement */
;;;450        I2Cx->CR1 |= CR1_ACK_Set;
;;;451      }
;;;452      else
;;;453      {
;;;454        /* Disable the acknowledgement */
;;;455        I2Cx->CR1 &= CR1_ACK_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L2.12|
000006  f4416180          ORR      r1,r1,#0x400          ;450
00000a  e001              B        |L2.16|
                  |L2.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L2.16|
000010  8001              STRH     r1,[r0,#0]            ;450
;;;456      }
;;;457    }
000012  4770              BX       lr
;;;458    
                          ENDP


                          AREA ||i.I2C_CalculatePEC||, CODE, READONLY, ALIGN=1

                  I2C_CalculatePEC PROC
;;;802      */
;;;803    void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;804    {
;;;805      /* Check the parameters */
;;;806      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;807      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;808      if (NewState != DISABLE)
;;;809      {
;;;810        /* Enable the selected I2C PEC calculation */
;;;811        I2Cx->CR1 |= CR1_ENPEC_Set;
;;;812      }
;;;813      else
;;;814      {
;;;815        /* Disable the selected I2C PEC calculation */
;;;816        I2Cx->CR1 &= CR1_ENPEC_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410120          ORR      r1,r1,#0x20           ;811
00000a  e001              B        |L3.16|
                  |L3.12|
00000c  f0210120          BIC      r1,r1,#0x20
                  |L3.16|
000010  8001              STRH     r1,[r0,#0]            ;811
;;;817      }
;;;818    }
000012  4770              BX       lr
;;;819    
                          ENDP


                          AREA ||i.I2C_CheckEvent||, CODE, READONLY, ALIGN=1

                  I2C_CheckEvent PROC
;;;1029     */
;;;1030   ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
000000  4602              MOV      r2,r0
;;;1031   {
;;;1032     uint32_t lastevent = 0;
;;;1033     uint32_t flag1 = 0, flag2 = 0;
;;;1034     ErrorStatus status = ERROR;
000002  2000              MOVS     r0,#0
;;;1035   
;;;1036     /* Check the parameters */
;;;1037     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1038     assert_param(IS_I2C_EVENT(I2C_EVENT));
;;;1039   
;;;1040     /* Read the I2Cx status register */
;;;1041     flag1 = I2Cx->SR1;
000004  8a93              LDRH     r3,[r2,#0x14]
;;;1042     flag2 = I2Cx->SR2;
000006  8b12              LDRH     r2,[r2,#0x18]
;;;1043     flag2 = flag2 << 16;
;;;1044   
;;;1045     /* Get the last event value from I2C status register */
;;;1046     lastevent = (flag1 | flag2) & FLAG_Mask;
000008  ea434302          ORR      r3,r3,r2,LSL #16
00000c  f023427f          BIC      r2,r3,#0xff000000
;;;1047   
;;;1048     /* Check whether the last event contains the I2C_EVENT */
;;;1049     if ((lastevent & I2C_EVENT) == I2C_EVENT)
000010  4391              BICS     r1,r1,r2
000012  d100              BNE      |L4.22|
;;;1050     {
;;;1051       /* SUCCESS: last event is equal to I2C_EVENT */
;;;1052       status = SUCCESS;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;1053     }
;;;1054     else
;;;1055     {
;;;1056       /* ERROR: last event is different from I2C_EVENT */
;;;1057       status = ERROR;
;;;1058     }
;;;1059     /* Return status */
;;;1060     return status;
;;;1061   }
000016  4770              BX       lr
;;;1062   
                          ENDP


                          AREA ||i.I2C_ClearFlag||, CODE, READONLY, ALIGN=1

                  I2C_ClearFlag PROC
;;;1211     */
;;;1212   void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
000000  43c9              MVNS     r1,r1
;;;1213   {
;;;1214     uint32_t flagpos = 0;
;;;1215     /* Check the parameters */
;;;1216     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1217     assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
;;;1218     /* Get the I2C flag position */
;;;1219     flagpos = I2C_FLAG & FLAG_Mask;
;;;1220     /* Clear the selected I2C flag */
;;;1221     I2Cx->SR1 = (uint16_t)~flagpos;
000002  8281              STRH     r1,[r0,#0x14]
;;;1222   }
000004  4770              BX       lr
;;;1223   
                          ENDP


                          AREA ||i.I2C_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  I2C_ClearITPendingBit PROC
;;;1306     */
;;;1307   void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
000000  43c9              MVNS     r1,r1
;;;1308   {
;;;1309     uint32_t flagpos = 0;
;;;1310     /* Check the parameters */
;;;1311     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1312     assert_param(IS_I2C_CLEAR_IT(I2C_IT));
;;;1313     /* Get the I2C flag position */
;;;1314     flagpos = I2C_IT & FLAG_Mask;
;;;1315     /* Clear the selected I2C flag */
;;;1316     I2Cx->SR1 = (uint16_t)~flagpos;
000002  8281              STRH     r1,[r0,#0x14]
;;;1317   }
000004  4770              BX       lr
;;;1318   
                          ENDP


                          AREA ||i.I2C_Cmd||, CODE, READONLY, ALIGN=1

                  I2C_Cmd PROC
;;;321      */
;;;322    void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;323    {
;;;324      /* Check the parameters */
;;;325      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;326      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;327      if (NewState != DISABLE)
;;;328      {
;;;329        /* Enable the selected I2C peripheral */
;;;330        I2Cx->CR1 |= CR1_PE_Set;
;;;331      }
;;;332      else
;;;333      {
;;;334        /* Disable the selected I2C peripheral */
;;;335        I2Cx->CR1 &= CR1_PE_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L7.12|
000006  f0410101          ORR      r1,r1,#1              ;330
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L7.16|
000010  8001              STRH     r1,[r0,#0]            ;330
;;;336      }
;;;337    }
000012  4770              BX       lr
;;;338    
                          ENDP


                          AREA ||i.I2C_DMACmd||, CODE, READONLY, ALIGN=1

                  I2C_DMACmd PROC
;;;345      */
;;;346    void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;347    {
;;;348      /* Check the parameters */
;;;349      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;350      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;351      if (NewState != DISABLE)
;;;352      {
;;;353        /* Enable the selected I2C DMA requests */
;;;354        I2Cx->CR2 |= CR2_DMAEN_Set;
;;;355      }
;;;356      else
;;;357      {
;;;358        /* Disable the selected I2C DMA requests */
;;;359        I2Cx->CR2 &= CR2_DMAEN_Reset;
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L8.12|
000006  f4416100          ORR      r1,r1,#0x800          ;354
00000a  e001              B        |L8.16|
                  |L8.12|
00000c  f4216100          BIC      r1,r1,#0x800
                  |L8.16|
000010  8081              STRH     r1,[r0,#4]            ;354
;;;360      }
;;;361    }
000012  4770              BX       lr
;;;362    
                          ENDP


                          AREA ||i.I2C_DMALastTransferCmd||, CODE, READONLY, ALIGN=1

                  I2C_DMALastTransferCmd PROC
;;;369      */
;;;370    void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;371    {
;;;372      /* Check the parameters */
;;;373      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;374      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;375      if (NewState != DISABLE)
;;;376      {
;;;377        /* Next DMA transfer is the last transfer */
;;;378        I2Cx->CR2 |= CR2_LAST_Set;
;;;379      }
;;;380      else
;;;381      {
;;;382        /* Next DMA transfer is not the last transfer */
;;;383        I2Cx->CR2 &= CR2_LAST_Reset;
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L9.12|
000006  f4415180          ORR      r1,r1,#0x1000         ;378
00000a  e001              B        |L9.16|
                  |L9.12|
00000c  f4215180          BIC      r1,r1,#0x1000
                  |L9.16|
000010  8081              STRH     r1,[r0,#4]            ;378
;;;384      }
;;;385    }
000012  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.I2C_DeInit||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;161      */
;;;162    void I2C_DeInit(I2C_TypeDef* I2Cx)
000000  4909              LDR      r1,|L10.40|
;;;163    {
000002  b510              PUSH     {r4,lr}
;;;164      /* Check the parameters */
;;;165      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;166    
;;;167      if (I2Cx == I2C1)
000004  4288              CMP      r0,r1
;;;168      {
;;;169        /* Enable I2C1 reset state */
;;;170        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
;;;171        /* Release I2C1 from reset state */
;;;172        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
;;;173      }
;;;174      else
;;;175      {
;;;176        /* Enable I2C2 reset state */
;;;177        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
000006  f04f0101          MOV      r1,#1
00000a  d101              BNE      |L10.16|
00000c  054c              LSLS     r4,r1,#21             ;170
00000e  e001              B        |L10.20|
                  |L10.16|
000010  f44f0480          MOV      r4,#0x400000
                  |L10.20|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;178        /* Release I2C2 from reset state */
;;;179        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
00001a  4620              MOV      r0,r4
00001c  e8bd4010          POP      {r4,lr}
000020  2100              MOVS     r1,#0
000022  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;180      }
;;;181    }
;;;182    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      0x40005400

                          AREA ||i.I2C_DualAddressCmd||, CODE, READONLY, ALIGN=1

                  I2C_DualAddressCmd PROC
;;;491      */
;;;492    void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;493    {
;;;494      /* Check the parameters */
;;;495      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;496      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;497      if (NewState != DISABLE)
;;;498      {
;;;499        /* Enable dual addressing mode */
;;;500        I2Cx->OAR2 |= OAR2_ENDUAL_Set;
;;;501      }
;;;502      else
;;;503      {
;;;504        /* Disable dual addressing mode */
;;;505        I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
000002  8981              LDRH     r1,[r0,#0xc]
000004  d002              BEQ      |L11.12|
000006  f0410101          ORR      r1,r1,#1              ;500
00000a  e001              B        |L11.16|
                  |L11.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L11.16|
000010  8181              STRH     r1,[r0,#0xc]          ;500
;;;506      }
;;;507    }
000012  4770              BX       lr
;;;508    
                          ENDP


                          AREA ||i.I2C_FastModeDutyCycleConfig||, CODE, READONLY, ALIGN=1

                  I2C_FastModeDutyCycleConfig PROC
;;;889      */
;;;890    void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
000000  f5b14f80          CMP      r1,#0x4000
;;;891    {
;;;892      /* Check the parameters */
;;;893      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;894      assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
;;;895      if (I2C_DutyCycle != I2C_DutyCycle_16_9)
;;;896      {
;;;897        /* I2C fast mode Tlow/Thigh=2 */
;;;898        I2Cx->CCR &= I2C_DutyCycle_2;
;;;899      }
;;;900      else
;;;901      {
;;;902        /* I2C fast mode Tlow/Thigh=16/9 */
;;;903        I2Cx->CCR |= I2C_DutyCycle_16_9;
000004  8b81              LDRH     r1,[r0,#0x1c]
000006  d002              BEQ      |L12.14|
000008  f4214180          BIC      r1,r1,#0x4000         ;898
00000c  e001              B        |L12.18|
                  |L12.14|
00000e  f4414180          ORR      r1,r1,#0x4000
                  |L12.18|
000012  8381              STRH     r1,[r0,#0x1c]         ;898
;;;904      }
;;;905    }
000014  4770              BX       lr
;;;906    
                          ENDP


                          AREA ||i.I2C_GeneralCallCmd||, CODE, READONLY, ALIGN=1

                  I2C_GeneralCallCmd PROC
;;;515      */
;;;516    void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;517    {
;;;518      /* Check the parameters */
;;;519      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;520      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;521      if (NewState != DISABLE)
;;;522      {
;;;523        /* Enable generall call */
;;;524        I2Cx->CR1 |= CR1_ENGC_Set;
;;;525      }
;;;526      else
;;;527      {
;;;528        /* Disable generall call */
;;;529        I2Cx->CR1 &= CR1_ENGC_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L13.12|
000006  f0410140          ORR      r1,r1,#0x40           ;524
00000a  e001              B        |L13.16|
                  |L13.12|
00000c  f0210140          BIC      r1,r1,#0x40
                  |L13.16|
000010  8001              STRH     r1,[r0,#0]            ;524
;;;530      }
;;;531    }
000012  4770              BX       lr
;;;532    
                          ENDP


                          AREA ||i.I2C_GenerateSTART||, CODE, READONLY, ALIGN=1

                  I2C_GenerateSTART PROC
;;;393      */
;;;394    void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;398      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;399      if (NewState != DISABLE)
;;;400      {
;;;401        /* Generate a START condition */
;;;402        I2Cx->CR1 |= CR1_START_Set;
;;;403      }
;;;404      else
;;;405      {
;;;406        /* Disable the START condition generation */
;;;407        I2Cx->CR1 &= CR1_START_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L14.12|
000006  f4417180          ORR      r1,r1,#0x100          ;402
00000a  e001              B        |L14.16|
                  |L14.12|
00000c  f4217180          BIC      r1,r1,#0x100
                  |L14.16|
000010  8001              STRH     r1,[r0,#0]            ;402
;;;408      }
;;;409    }
000012  4770              BX       lr
;;;410    
                          ENDP


                          AREA ||i.I2C_GenerateSTOP||, CODE, READONLY, ALIGN=1

                  I2C_GenerateSTOP PROC
;;;417      */
;;;418    void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;419    {
;;;420      /* Check the parameters */
;;;421      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;422      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;423      if (NewState != DISABLE)
;;;424      {
;;;425        /* Generate a STOP condition */
;;;426        I2Cx->CR1 |= CR1_STOP_Set;
;;;427      }
;;;428      else
;;;429      {
;;;430        /* Disable the STOP condition generation */
;;;431        I2Cx->CR1 &= CR1_STOP_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L15.12|
000006  f4417100          ORR      r1,r1,#0x200          ;426
00000a  e001              B        |L15.16|
                  |L15.12|
00000c  f4217100          BIC      r1,r1,#0x200
                  |L15.16|
000010  8001              STRH     r1,[r0,#0]            ;426
;;;432      }
;;;433    }
000012  4770              BX       lr
;;;434    
                          ENDP


                          AREA ||i.I2C_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  I2C_GetFlagStatus PROC
;;;1132     */
;;;1133   FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
000000  2200              MOVS     r2,#0
;;;1134   {
;;;1135     FlagStatus bitstatus = RESET;
;;;1136     __IO uint32_t i2creg = 0, i2cxbase = 0;
;;;1137   
;;;1138     /* Check the parameters */
;;;1139     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1140     assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
;;;1141   
;;;1142     /* Get the I2Cx peripheral base address */
;;;1143     i2cxbase = (uint32_t)I2Cx;
;;;1144     
;;;1145     /* Read flag register index */
;;;1146     i2creg = I2C_FLAG >> 28;
000002  0f0b              LSRS     r3,r1,#28
;;;1147     
;;;1148     /* Get bit[23:0] of the flag */
;;;1149     I2C_FLAG &= FLAG_Mask;
000004  f021417f          BIC      r1,r1,#0xff000000
000008  d001              BEQ      |L16.14|
;;;1150     
;;;1151     if(i2creg != 0)
;;;1152     {
;;;1153       /* Get the I2Cx SR1 register address */
;;;1154       i2cxbase += 0x14;
00000a  3014              ADDS     r0,r0,#0x14
00000c  e001              B        |L16.18|
                  |L16.14|
;;;1155     }
;;;1156     else
;;;1157     {
;;;1158       /* Flag in I2Cx SR2 Register */
;;;1159       I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
00000e  0c09              LSRS     r1,r1,#16
;;;1160       /* Get the I2Cx SR2 register address */
;;;1161       i2cxbase += 0x18;
000010  3018              ADDS     r0,r0,#0x18
                  |L16.18|
;;;1162     }
;;;1163     
;;;1164     if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
000012  6800              LDR      r0,[r0,#0]
000014  4208              TST      r0,r1
000016  d000              BEQ      |L16.26|
;;;1165     {
;;;1166       /* I2C_FLAG is set */
;;;1167       bitstatus = SET;
000018  2201              MOVS     r2,#1
                  |L16.26|
;;;1168     }
;;;1169     else
;;;1170     {
;;;1171       /* I2C_FLAG is reset */
;;;1172       bitstatus = RESET;
;;;1173     }
;;;1174     
;;;1175     /* Return the I2C_FLAG status */
;;;1176     return  bitstatus;
00001a  4610              MOV      r0,r2
;;;1177   }
00001c  4770              BX       lr
;;;1178   
                          ENDP


                          AREA ||i.I2C_GetITStatus||, CODE, READONLY, ALIGN=1

                  I2C_GetITStatus PROC
;;;1245     */
;;;1246   ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
000000  b510              PUSH     {r4,lr}
;;;1247   {
000002  4602              MOV      r2,r0
;;;1248     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1249     uint32_t enablestatus = 0;
;;;1250   
;;;1251     /* Check the parameters */
;;;1252     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1253     assert_param(IS_I2C_GET_IT(I2C_IT));
;;;1254   
;;;1255     /* Check if the interrupt source is enabled or not */
;;;1256     enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
000006  8893              LDRH     r3,[r2,#4]
000008  f00164e0          AND      r4,r1,#0x7000000
;;;1257     
;;;1258     /* Get bit[23:0] of the flag */
;;;1259     I2C_IT &= FLAG_Mask;
;;;1260   
;;;1261     /* Check the status of the specified I2C flag */
;;;1262     if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
00000c  8a92              LDRH     r2,[r2,#0x14]
00000e  ea034314          AND      r3,r3,r4,LSR #16      ;1256
000012  f021417f          BIC      r1,r1,#0xff000000     ;1259
000016  420a              TST      r2,r1
000018  d002              BEQ      |L17.32|
00001a  2b00              CMP      r3,#0
00001c  d000              BEQ      |L17.32|
;;;1263     {
;;;1264       /* I2C_IT is set */
;;;1265       bitstatus = SET;
00001e  2001              MOVS     r0,#1
                  |L17.32|
;;;1266     }
;;;1267     else
;;;1268     {
;;;1269       /* I2C_IT is reset */
;;;1270       bitstatus = RESET;
;;;1271     }
;;;1272     /* Return the I2C_IT status */
;;;1273     return  bitstatus;
;;;1274   }
000020  bd10              POP      {r4,pc}
;;;1275   
                          ENDP


                          AREA ||i.I2C_GetLastEvent||, CODE, READONLY, ALIGN=1

                  I2C_GetLastEvent PROC
;;;1077     */
;;;1078   uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
000000  8a81              LDRH     r1,[r0,#0x14]
;;;1079   {
;;;1080     uint32_t lastevent = 0;
;;;1081     uint32_t flag1 = 0, flag2 = 0;
;;;1082   
;;;1083     /* Check the parameters */
;;;1084     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1085   
;;;1086     /* Read the I2Cx status register */
;;;1087     flag1 = I2Cx->SR1;
;;;1088     flag2 = I2Cx->SR2;
000002  8b00              LDRH     r0,[r0,#0x18]
;;;1089     flag2 = flag2 << 16;
;;;1090   
;;;1091     /* Get the last event value from I2C status register */
;;;1092     lastevent = (flag1 | flag2) & FLAG_Mask;
000004  ea414100          ORR      r1,r1,r0,LSL #16
000008  f021407f          BIC      r0,r1,#0xff000000
;;;1093   
;;;1094     /* Return status */
;;;1095     return lastevent;
;;;1096   }
00000c  4770              BX       lr
;;;1097   
                          ENDP


                          AREA ||i.I2C_GetPEC||, CODE, READONLY, ALIGN=1

                  I2C_GetPEC PROC
;;;824      */
;;;825    uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
000000  8b00              LDRH     r0,[r0,#0x18]
;;;826    {
;;;827      /* Check the parameters */
;;;828      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;829      /* Return the selected I2C PEC value */
;;;830      return ((I2Cx->SR2) >> 8);
000002  0a00              LSRS     r0,r0,#8
;;;831    }
000004  4770              BX       lr
;;;832    
                          ENDP


                          AREA ||i.I2C_ITConfig||, CODE, READONLY, ALIGN=1

                  I2C_ITConfig PROC
;;;544      */
;;;545    void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;546    {
;;;547      /* Check the parameters */
;;;548      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;549      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;550      assert_param(IS_I2C_CONFIG_IT(I2C_IT));
;;;551      
;;;552      if (NewState != DISABLE)
;;;553      {
;;;554        /* Enable the selected I2C interrupts */
;;;555        I2Cx->CR2 |= I2C_IT;
;;;556      }
;;;557      else
;;;558      {
;;;559        /* Disable the selected I2C interrupts */
;;;560        I2Cx->CR2 &= (uint16_t)~I2C_IT;
000002  8882              LDRH     r2,[r0,#4]
000004  d001              BEQ      |L20.10|
000006  430a              ORRS     r2,r2,r1              ;555
000008  e000              B        |L20.12|
                  |L20.10|
00000a  438a              BICS     r2,r2,r1
                  |L20.12|
00000c  8082              STRH     r2,[r0,#4]            ;555
;;;561      }
;;;562    }
00000e  4770              BX       lr
;;;563    
                          ENDP


                          AREA ||i.I2C_Init||, CODE, READONLY, ALIGN=2

                  I2C_Init PROC
;;;190      */
;;;191    void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;192    {
000002  4604              MOV      r4,r0
;;;193      uint16_t tmpreg = 0, freqrange = 0;
;;;194      uint16_t result = 0x04;
;;;195      uint32_t pclk1 = 8000000;
;;;196      RCC_ClocksTypeDef  rcc_clocks;
;;;197      /* Check the parameters */
;;;198      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;199      assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
;;;200      assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
;;;201      assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
;;;202      assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
;;;203      assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
;;;204      assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
;;;205    
;;;206    /*---------------------------- I2Cx CR2 Configuration ------------------------*/
;;;207      /* Get the I2Cx CR2 value */
;;;208      tmpreg = I2Cx->CR2;
000004  8880              LDRH     r0,[r0,#4]
000006  b086              SUB      sp,sp,#0x18           ;192
000008  460d              MOV      r5,r1                 ;192
;;;209      /* Clear frequency FREQ[5:0] bits */
;;;210      tmpreg &= CR2_FREQ_Reset;
00000a  f020063f          BIC      r6,r0,#0x3f
;;;211      /* Get pclk1 frequency value */
;;;212      RCC_GetClocksFreq(&rcc_clocks);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       RCC_GetClocksFreq
;;;213      pclk1 = rcc_clocks.PCLK1_Frequency;
;;;214      /* Set frequency bits depending on pclk1 value */
;;;215      freqrange = (uint16_t)(pclk1 / 1000000);
000014  4926              LDR      r1,|L21.176|
000016  9802              LDR      r0,[sp,#8]
000018  fbb0f1f1          UDIV     r1,r0,r1
00001c  b289              UXTH     r1,r1
;;;216      tmpreg |= freqrange;
00001e  430e              ORRS     r6,r6,r1
;;;217      /* Write to I2Cx CR2 */
;;;218      I2Cx->CR2 = tmpreg;
000020  80a6              STRH     r6,[r4,#4]
;;;219    
;;;220    /*---------------------------- I2Cx CCR Configuration ------------------------*/
;;;221      /* Disable the selected I2C peripheral to configure TRISE */
;;;222      I2Cx->CR1 &= CR1_PE_Reset;
000022  8822              LDRH     r2,[r4,#0]
000024  f0220201          BIC      r2,r2,#1
000028  8022              STRH     r2,[r4,#0]
;;;223      /* Reset tmpreg value */
;;;224      /* Clear F/S, DUTY and CCR[11:0] bits */
;;;225      tmpreg = 0;
;;;226    
;;;227      /* Configure speed in standard mode */
;;;228      if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
00002a  4b22              LDR      r3,|L21.180|
00002c  682a              LDR      r2,[r5,#0]
00002e  429a              CMP      r2,r3
000030  d81c              BHI      |L21.108|
;;;229      {
;;;230        /* Standard mode speed calculate */
;;;231        result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
000032  0052              LSLS     r2,r2,#1
000034  fbb0f0f2          UDIV     r0,r0,r2
000038  b280              UXTH     r0,r0
;;;232        /* Test if CCR value is under 0x4*/
;;;233        if (result < 0x04)
00003a  2804              CMP      r0,#4
00003c  d200              BCS      |L21.64|
;;;234        {
;;;235          /* Set minimum allowed value */
;;;236          result = 0x04;  
00003e  2004              MOVS     r0,#4
                  |L21.64|
;;;237        }
;;;238        /* Set speed value for standard mode */
;;;239        tmpreg |= result;	  
;;;240        /* Set Maximum Rise Time for standard mode */
;;;241        I2Cx->TRISE = freqrange + 1; 
000040  1c49              ADDS     r1,r1,#1
000042  8421              STRH     r1,[r4,#0x20]
;;;242      }
;;;243      /* Configure speed in fast mode */
;;;244      else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
;;;245      {
;;;246        if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
;;;247        {
;;;248          /* Fast mode speed calculate: Tlow/Thigh = 2 */
;;;249          result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
;;;250        }
;;;251        else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
;;;252        {
;;;253          /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
;;;254          result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
;;;255          /* Set DUTY bit */
;;;256          result |= I2C_DutyCycle_16_9;
;;;257        }
;;;258    
;;;259        /* Test if CCR value is under 0x1*/
;;;260        if ((result & CCR_CCR_Set) == 0)
;;;261        {
;;;262          /* Set minimum allowed value */
;;;263          result |= (uint16_t)0x0001;  
;;;264        }
;;;265        /* Set speed value and set F/S bit for fast mode */
;;;266        tmpreg |= (uint16_t)(result | CCR_FS_Set);
;;;267        /* Set Maximum Rise Time for fast mode */
;;;268        I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
;;;269      }
;;;270    
;;;271      /* Write to I2Cx CCR */
;;;272      I2Cx->CCR = tmpreg;
000044  83a0              STRH     r0,[r4,#0x1c]
;;;273      /* Enable the selected I2C peripheral */
;;;274      I2Cx->CR1 |= CR1_PE_Set;
000046  8820              LDRH     r0,[r4,#0]
000048  f0400001          ORR      r0,r0,#1
00004c  8020              STRH     r0,[r4,#0]
;;;275    
;;;276    /*---------------------------- I2Cx CR1 Configuration ------------------------*/
;;;277      /* Get the I2Cx CR1 value */
;;;278      tmpreg = I2Cx->CR1;
00004e  8821              LDRH     r1,[r4,#0]
;;;279      /* Clear ACK, SMBTYPE and  SMBUS bits */
;;;280      tmpreg &= CR1_CLEAR_Mask;
000050  f64f30f5          MOV      r0,#0xfbf5
000054  4001              ANDS     r1,r1,r0
;;;281      /* Configure I2Cx: mode and acknowledgement */
;;;282      /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
;;;283      /* Set ACK bit according to I2C_Ack value */
;;;284      tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
000056  88a8              LDRH     r0,[r5,#4]
000058  896a              LDRH     r2,[r5,#0xa]
00005a  4310              ORRS     r0,r0,r2
00005c  4308              ORRS     r0,r0,r1
;;;285      /* Write to I2Cx CR1 */
;;;286      I2Cx->CR1 = tmpreg;
00005e  8020              STRH     r0,[r4,#0]
;;;287    
;;;288    /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
;;;289      /* Set I2Cx Own Address1 and acknowledged address */
;;;290      I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
000060  89a8              LDRH     r0,[r5,#0xc]
000062  8929              LDRH     r1,[r5,#8]
000064  4308              ORRS     r0,r0,r1
000066  8120              STRH     r0,[r4,#8]
;;;291    }
000068  b006              ADD      sp,sp,#0x18
00006a  bd70              POP      {r4-r6,pc}
                  |L21.108|
00006c  88eb              LDRH     r3,[r5,#6]            ;246
00006e  f5a3463f          SUB      r6,r3,#0xbf00         ;246
000072  3eff              SUBS     r6,r6,#0xff           ;246
000074  d105              BNE      |L21.130|
000076  eb020242          ADD      r2,r2,r2,LSL #1       ;249
00007a  fbb0f0f2          UDIV     r0,r0,r2              ;249
00007e  b280              UXTH     r0,r0                 ;249
000080  e008              B        |L21.148|
                  |L21.130|
000082  eb0203c2          ADD      r3,r2,r2,LSL #3       ;254
000086  eb031202          ADD      r2,r3,r2,LSL #4       ;254
00008a  fbb0f0f2          UDIV     r0,r0,r2              ;254
00008e  b280              UXTH     r0,r0                 ;254
000090  f4404080          ORR      r0,r0,#0x4000         ;256
                  |L21.148|
000094  0502              LSLS     r2,r0,#20             ;260
000096  d101              BNE      |L21.156|
000098  f0400001          ORR      r0,r0,#1              ;263
                  |L21.156|
00009c  f44f7296          MOV      r2,#0x12c             ;268
0000a0  4351              MULS     r1,r2,r1              ;268
0000a2  f44f727a          MOV      r2,#0x3e8             ;268
0000a6  fbb1f1f2          UDIV     r1,r1,r2              ;268
0000aa  f4404000          ORR      r0,r0,#0x8000         ;266
0000ae  e7c7              B        |L21.64|
;;;292    
                          ENDP

                  |L21.176|
                          DCD      0x000f4240
                  |L21.180|
                          DCD      0x000186a0

                          AREA ||i.I2C_NACKPositionConfig||, CODE, READONLY, ALIGN=1

                  I2C_NACKPositionConfig PROC
;;;695      */
;;;696    void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
000000  f5b16f00          CMP      r1,#0x800
;;;697    {
;;;698      /* Check the parameters */
;;;699      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;700      assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
;;;701      
;;;702      /* Check the input parameter */
;;;703      if (I2C_NACKPosition == I2C_NACKPosition_Next)
;;;704      {
;;;705        /* Next byte in shift register is the last received byte */
;;;706        I2Cx->CR1 |= I2C_NACKPosition_Next;
;;;707      }
;;;708      else
;;;709      {
;;;710        /* Current byte in shift register is the last received byte */
;;;711        I2Cx->CR1 &= I2C_NACKPosition_Current;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L22.16|
000008  f4216100          BIC      r1,r1,#0x800
                  |L22.12|
00000c  8001              STRH     r1,[r0,#0]            ;706
;;;712      }
;;;713    }
00000e  4770              BX       lr
                  |L22.16|
000010  f4416100          ORR      r1,r1,#0x800          ;706
000014  e7fa              B        |L22.12|
;;;714    
                          ENDP


                          AREA ||i.I2C_OwnAddress2Config||, CODE, READONLY, ALIGN=1

                  I2C_OwnAddress2Config PROC
;;;464      */
;;;465    void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
000000  8982              LDRH     r2,[r0,#0xc]
;;;466    {
;;;467      uint16_t tmpreg = 0;
;;;468    
;;;469      /* Check the parameters */
;;;470      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;471    
;;;472      /* Get the old register value */
;;;473      tmpreg = I2Cx->OAR2;
;;;474    
;;;475      /* Reset I2Cx Own address2 bit [7:1] */
;;;476      tmpreg &= OAR2_ADD2_Reset;
;;;477    
;;;478      /* Set I2Cx Own address2 */
;;;479      tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
000002  f00101fe          AND      r1,r1,#0xfe
000006  f02202fe          BIC      r2,r2,#0xfe           ;476
00000a  4311              ORRS     r1,r1,r2
;;;480    
;;;481      /* Store the new register value */
;;;482      I2Cx->OAR2 = tmpreg;
00000c  8181              STRH     r1,[r0,#0xc]
;;;483    }
00000e  4770              BX       lr
;;;484    
                          ENDP


                          AREA ||i.I2C_PECPositionConfig||, CODE, READONLY, ALIGN=1

                  I2C_PECPositionConfig PROC
;;;778      */
;;;779    void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
000000  f5b16f00          CMP      r1,#0x800
;;;780    {
;;;781      /* Check the parameters */
;;;782      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;783      assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
;;;784      if (I2C_PECPosition == I2C_PECPosition_Next)
;;;785      {
;;;786        /* Next byte in shift register is PEC */
;;;787        I2Cx->CR1 |= I2C_PECPosition_Next;
;;;788      }
;;;789      else
;;;790      {
;;;791        /* Current byte in shift register is PEC */
;;;792        I2Cx->CR1 &= I2C_PECPosition_Current;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L24.16|
000008  f4216100          BIC      r1,r1,#0x800
                  |L24.12|
00000c  8001              STRH     r1,[r0,#0]            ;787
;;;793      }
;;;794    }
00000e  4770              BX       lr
                  |L24.16|
000010  f4416100          ORR      r1,r1,#0x800          ;787
000014  e7fa              B        |L24.12|
;;;795    
                          ENDP


                          AREA ||i.I2C_ReadRegister||, CODE, READONLY, ALIGN=1

                  I2C_ReadRegister PROC
;;;635      */
;;;636    uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
000000  5a40              LDRH     r0,[r0,r1]
;;;637    {
;;;638      __IO uint32_t tmp = 0;
;;;639    
;;;640      /* Check the parameters */
;;;641      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;642      assert_param(IS_I2C_REGISTER(I2C_Register));
;;;643    
;;;644      tmp = (uint32_t) I2Cx;
;;;645      tmp += I2C_Register;
;;;646    
;;;647      /* Return the selected register value */
;;;648      return (*(__IO uint16_t *) tmp);
;;;649    }
000002  4770              BX       lr
;;;650    
                          ENDP


                          AREA ||i.I2C_ReceiveData||, CODE, READONLY, ALIGN=1

                  I2C_ReceiveData PROC
;;;582      */
;;;583    uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;584    {
;;;585      /* Check the parameters */
;;;586      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;587      /* Return the data in the DR register */
;;;588      return (uint8_t)I2Cx->DR;
000002  b2c0              UXTB     r0,r0
;;;589    }
000004  4770              BX       lr
;;;590    
                          ENDP


                          AREA ||i.I2C_SMBusAlertConfig||, CODE, READONLY, ALIGN=1

                  I2C_SMBusAlertConfig PROC
;;;723      */
;;;724    void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
000000  f5b15f00          CMP      r1,#0x2000
;;;725    {
;;;726      /* Check the parameters */
;;;727      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;728      assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
;;;729      if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
;;;730      {
;;;731        /* Drive the SMBusAlert pin Low */
;;;732        I2Cx->CR1 |= I2C_SMBusAlert_Low;
;;;733      }
;;;734      else
;;;735      {
;;;736        /* Drive the SMBusAlert pin High  */
;;;737        I2Cx->CR1 &= I2C_SMBusAlert_High;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L27.16|
000008  f4215100          BIC      r1,r1,#0x2000
                  |L27.12|
00000c  8001              STRH     r1,[r0,#0]            ;732
;;;738      }
;;;739    }
00000e  4770              BX       lr
                  |L27.16|
000010  f4415100          ORR      r1,r1,#0x2000         ;732
000014  e7fa              B        |L27.12|
;;;740    
                          ENDP


                          AREA ||i.I2C_Send7bitAddress||, CODE, READONLY, ALIGN=1

                  I2C_Send7bitAddress PROC
;;;600      */
;;;601    void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
000000  b112              CBZ      r2,|L28.8|
;;;602    {
;;;603      /* Check the parameters */
;;;604      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;605      assert_param(IS_I2C_DIRECTION(I2C_Direction));
;;;606      /* Test on the direction to set/reset the read/write bit */
;;;607      if (I2C_Direction != I2C_Direction_Transmitter)
;;;608      {
;;;609        /* Set the address bit0 for read */
;;;610        Address |= OAR1_ADD0_Set;
000002  f0410101          ORR      r1,r1,#1
000006  e001              B        |L28.12|
                  |L28.8|
;;;611      }
;;;612      else
;;;613      {
;;;614        /* Reset the address bit0 for write */
;;;615        Address &= OAR1_ADD0_Reset;
000008  f00101fe          AND      r1,r1,#0xfe
                  |L28.12|
;;;616      }
;;;617      /* Send the address */
;;;618      I2Cx->DR = Address;
00000c  8201              STRH     r1,[r0,#0x10]
;;;619    }
00000e  4770              BX       lr
;;;620    
                          ENDP


                          AREA ||i.I2C_SendData||, CODE, READONLY, ALIGN=1

                  I2C_SendData PROC
;;;569      */
;;;570    void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
000000  8201              STRH     r1,[r0,#0x10]
;;;571    {
;;;572      /* Check the parameters */
;;;573      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;574      /* Write in the DR register the data to be sent */
;;;575      I2Cx->DR = Data;
;;;576    }
000002  4770              BX       lr
;;;577    
                          ENDP


                          AREA ||i.I2C_SoftwareResetCmd||, CODE, READONLY, ALIGN=1

                  I2C_SoftwareResetCmd PROC
;;;657      */
;;;658    void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;659    {
;;;660      /* Check the parameters */
;;;661      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;662      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;663      if (NewState != DISABLE)
;;;664      {
;;;665        /* Peripheral under reset */
;;;666        I2Cx->CR1 |= CR1_SWRST_Set;
;;;667      }
;;;668      else
;;;669      {
;;;670        /* Peripheral not under reset */
;;;671        I2Cx->CR1 &= CR1_SWRST_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L30.12|
000006  f4414100          ORR      r1,r1,#0x8000         ;666
00000a  e001              B        |L30.16|
                  |L30.12|
00000c  f3c1010e          UBFX     r1,r1,#0,#15
                  |L30.16|
000010  8001              STRH     r1,[r0,#0]            ;666
;;;672      }
;;;673    }
000012  4770              BX       lr
;;;674    
                          ENDP


                          AREA ||i.I2C_StretchClockCmd||, CODE, READONLY, ALIGN=1

                  I2C_StretchClockCmd PROC
;;;863      */
;;;864    void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;865    {
;;;866      /* Check the parameters */
;;;867      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;868      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;869      if (NewState == DISABLE)
;;;870      {
;;;871        /* Enable the selected I2C Clock stretching */
;;;872        I2Cx->CR1 |= CR1_NOSTRETCH_Set;
;;;873      }
;;;874      else
;;;875      {
;;;876        /* Disable the selected I2C Clock stretching */
;;;877        I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d003              BEQ      |L31.14|
000006  f0210180          BIC      r1,r1,#0x80
                  |L31.10|
00000a  8001              STRH     r1,[r0,#0]            ;872
;;;878      }
;;;879    }
00000c  4770              BX       lr
                  |L31.14|
00000e  f0410180          ORR      r1,r1,#0x80           ;872
000012  e7fa              B        |L31.10|
;;;880    
                          ENDP


                          AREA ||i.I2C_StructInit||, CODE, READONLY, ALIGN=1

                  I2C_StructInit PROC
;;;297      */
;;;298    void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
000000  f2413188          MOV      r1,#0x1388
;;;299    {
;;;300    /*---------------- Reset I2C init structure parameters values ----------------*/
;;;301      /* initialize the I2C_ClockSpeed member */
;;;302      I2C_InitStruct->I2C_ClockSpeed = 5000;
;;;303      /* Initialize the I2C_Mode member */
;;;304      I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  8081              STRH     r1,[r0,#4]
;;;305      /* Initialize the I2C_DutyCycle member */
;;;306      I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
00000a  f64b72ff          MOV      r2,#0xbfff
00000e  80c2              STRH     r2,[r0,#6]
;;;307      /* Initialize the I2C_OwnAddress1 member */
;;;308      I2C_InitStruct->I2C_OwnAddress1 = 0;
000010  8101              STRH     r1,[r0,#8]
;;;309      /* Initialize the I2C_Ack member */
;;;310      I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
000012  8141              STRH     r1,[r0,#0xa]
;;;311      /* Initialize the I2C_AcknowledgedAddress member */
;;;312      I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
000014  f44f4180          MOV      r1,#0x4000
000018  8181              STRH     r1,[r0,#0xc]
;;;313    }
00001a  4770              BX       lr
;;;314    
                          ENDP


                          AREA ||i.I2C_TransmitPEC||, CODE, READONLY, ALIGN=1

                  I2C_TransmitPEC PROC
;;;747      */
;;;748    void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;749    {
;;;750      /* Check the parameters */
;;;751      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;752      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;753      if (NewState != DISABLE)
;;;754      {
;;;755        /* Enable the selected I2C PEC transmission */
;;;756        I2Cx->CR1 |= CR1_PEC_Set;
;;;757      }
;;;758      else
;;;759      {
;;;760        /* Disable the selected I2C PEC transmission */
;;;761        I2Cx->CR1 &= CR1_PEC_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L33.12|
000006  f4415180          ORR      r1,r1,#0x1000         ;756
00000a  e001              B        |L33.16|
                  |L33.12|
00000c  f4215180          BIC      r1,r1,#0x1000
                  |L33.16|
000010  8001              STRH     r1,[r0,#0]            ;756
;;;762      }
;;;763    }
000012  4770              BX       lr
;;;764    
                          ENDP

