; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\os_tick.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\os_tick.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\os_tick.crf ..\UCOSIII\uCOS-III\Source\os_tick.c]
                          THUMB

                          AREA ||i.OS_TickListInit||, CODE, READONLY, ALIGN=2

                  OS_TickListInit PROC
;;;165    
;;;166    void  OS_TickListInit (void)
000000  b510              PUSH     {r4,lr}
;;;167    {
;;;168        OS_TICK_SPOKE_IX   i;
;;;169        OS_TICK_SPOKE     *p_spoke;
;;;170    
;;;171    
;;;172    
;;;173        for (i = 0u; i < OSCfg_TickWheelSize; i++) {
000002  2000              MOVS     r0,#0
000004  4601              MOV      r1,r0
;;;174            p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
000006  4c07              LDR      r4,|L1.36|
000008  4b07              LDR      r3,|L1.40|
00000a  e006              B        |L1.26|
                  |L1.12|
00000c  eb0402c0          ADD      r2,r4,r0,LSL #3
000010  1c40              ADDS     r0,r0,#1              ;173
;;;175            p_spoke->FirstPtr      = (OS_TCB        *)0;
;;;176            p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
000012  6011              STR      r1,[r2,#0]
000014  8091              STRH     r1,[r2,#4]
;;;177            p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
000016  80d1              STRH     r1,[r2,#6]
000018  b280              UXTH     r0,r0                 ;173
                  |L1.26|
00001a  881a              LDRH     r2,[r3,#0]            ;173  ; OSCfg_TickWheelSize
00001c  4290              CMP      r0,r2                 ;173
00001e  d3f5              BCC      |L1.12|
;;;178        }
;;;179    }
000020  bd10              POP      {r4,pc}
;;;180    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      OSCfg_TickWheel
                  |L1.40|
                          DCD      OSCfg_TickWheelSize

                          AREA ||i.OS_TickListInsert||, CODE, READONLY, ALIGN=2

                  OS_TickListInsert PROC
;;;219    
;;;220    void  OS_TickListInsert (OS_TCB   *p_tcb,
000000  b5f0              PUSH     {r4-r7,lr}
;;;221                             OS_TICK   time,
;;;222                             OS_OPT    opt,
;;;223                             OS_ERR   *p_err)
;;;224    {
;;;225        OS_TICK            tick_delta;
;;;226        OS_TICK            tick_next;
;;;227        OS_TICK_SPOKE     *p_spoke;
;;;228        OS_TCB            *p_tcb0;
;;;229        OS_TCB            *p_tcb1;
;;;230        OS_TICK_SPOKE_IX   spoke;
;;;231    
;;;232    
;;;233    
;;;234        if (opt == OS_OPT_TIME_MATCH) {                              /* Task time is absolute.                            */
;;;235            tick_delta = time - OSTickCtr - 1u;
000002  4c32              LDR      r4,|L2.204|
;;;236            if (tick_delta > OS_TICK_TH_RDY) {                       /* If delay already occurred, ...                    */
;;;237                p_tcb->TickCtrMatch = (OS_TICK        )0u;
;;;238                p_tcb->TickRemain   = (OS_TICK        )0u;
;;;239                p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
;;;240               *p_err               =  OS_ERR_TIME_ZERO_DLY;         /* ... do NOT delay.                                 */
000004  f247267e          MOV      r6,#0x727e
000008  6825              LDR      r5,[r4,#0]            ;235
00000a  2400              MOVS     r4,#0                 ;235
00000c  2a04              CMP      r2,#4                 ;234
00000e  d008              BEQ      |L2.34|
;;;241                return;
;;;242            }
;;;243            p_tcb->TickCtrMatch = time;
;;;244            p_tcb->TickRemain   = tick_delta + 1u;
;;;245    
;;;246        } else if (time > (OS_TICK)0u) {
000010  b3b1              CBZ      r1,|L2.128|
000012  4e2e              LDR      r6,|L2.204|
;;;247            if (opt == OS_OPT_TIME_PERIODIC) {                       /* Task time is periodic.                            */
000014  2a08              CMP      r2,#8
000016  6836              LDR      r6,[r6,#0]            ;235
;;;248                tick_next  = p_tcb->TickCtrPrev + time;
;;;249                tick_delta = tick_next - OSTickCtr - 1u;
;;;250                if (tick_delta < time) {                             /* If next periodic delay did NOT already occur, ... */
;;;251                    p_tcb->TickCtrMatch = tick_next;                 /* ... set  next  periodic delay;                ... */
;;;252                } else {
;;;253                    p_tcb->TickCtrMatch = OSTickCtr + time;          /* ... else reset periodic delay.                    */
000018  440e              ADD      r6,r6,r1
00001a  d00b              BEQ      |L2.52|
00001c  e9c06113          STRD     r6,r1,[r0,#0x4c]      ;247
;;;254                }
;;;255                p_tcb->TickRemain   = p_tcb->TickCtrMatch - OSTickCtr;
;;;256                p_tcb->TickCtrPrev  = p_tcb->TickCtrMatch;
;;;257    
;;;258            } else {                                                 /* Task time is relative to current.                 */
;;;259                p_tcb->TickCtrMatch = OSTickCtr + time;
;;;260                p_tcb->TickRemain   = time;
000020  e015              B        |L2.78|
                  |L2.34|
000022  1b4a              SUBS     r2,r1,r5              ;235
000024  1e52              SUBS     r2,r2,#1              ;235
000026  f5123f80          CMN      r2,#0x10000           ;236
00002a  d82a              BHI      |L2.130|
00002c  1c52              ADDS     r2,r2,#1              ;244
00002e  e9c01213          STRD     r1,r2,[r0,#0x4c]      ;244
000032  e00c              B        |L2.78|
                  |L2.52|
000034  6c82              LDR      r2,[r0,#0x48]         ;248
000036  440a              ADD      r2,r2,r1              ;248
000038  1b57              SUBS     r7,r2,r5              ;249
00003a  1e7f              SUBS     r7,r7,#1              ;249
00003c  428f              CMP      r7,r1                 ;250
00003e  d201              BCS      |L2.68|
000040  64c2              STR      r2,[r0,#0x4c]         ;251
000042  e000              B        |L2.70|
                  |L2.68|
000044  64c6              STR      r6,[r0,#0x4c]         ;253
                  |L2.70|
000046  6cc1              LDR      r1,[r0,#0x4c]         ;255
000048  1b4a              SUBS     r2,r1,r5              ;255
00004a  6502              STR      r2,[r0,#0x50]         ;256
00004c  6481              STR      r1,[r0,#0x48]         ;256
                  |L2.78|
;;;261            }
;;;262    
;;;263        } else {                                                     /* Zero time delay; ...                              */
;;;264            p_tcb->TickCtrMatch = (OS_TICK        )0u;
;;;265            p_tcb->TickRemain   = (OS_TICK        )0u;
;;;266            p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
;;;267           *p_err               =  OS_ERR_TIME_ZERO_DLY;             /* ... do NOT delay.                                 */
;;;268            return;
;;;269        }
;;;270    
;;;271    
;;;272        spoke   = (OS_TICK_SPOKE_IX)(p_tcb->TickCtrMatch % OSCfg_TickWheelSize);
00004e  4a20              LDR      r2,|L2.208|
000050  6cc1              LDR      r1,[r0,#0x4c]
000052  8812              LDRH     r2,[r2,#0]  ; OSCfg_TickWheelSize
000054  fbb1f6f2          UDIV     r6,r1,r2
000058  fb021116          MLS      r1,r2,r6,r1
;;;273        p_spoke = &OSCfg_TickWheel[spoke];
00005c  4a1d              LDR      r2,|L2.212|
00005e  b289              UXTH     r1,r1                 ;272
000060  eb0202c1          ADD      r2,r2,r1,LSL #3
;;;274    
;;;275        if (p_spoke->NbrEntries == (OS_OBJ_QTY)0u) {                 /* First entry in the spoke                          */
000064  8891              LDRH     r1,[r2,#4]
000066  b189              CBZ      r1,|L2.140|
;;;276            p_tcb->TickNextPtr   = (OS_TCB   *)0;
;;;277            p_tcb->TickPrevPtr   = (OS_TCB   *)0;
;;;278            p_spoke->FirstPtr    =  p_tcb;
;;;279            p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
;;;280        } else {
;;;281            p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
;;;282            while (p_tcb1 != (OS_TCB *)0) {
000068  6811              LDR      r1,[r2,#0]
00006a  b1f1              CBZ      r1,|L2.170|
                  |L2.108|
;;;283                p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
00006c  6cce              LDR      r6,[r1,#0x4c]
00006e  1b76              SUBS     r6,r6,r5
;;;284                                   - OSTickCtr;
;;;285                if (p_tcb->TickRemain > p_tcb1->TickRemain) {        /* Do we need to insert AFTER current TCB in list?   */
000070  650e              STR      r6,[r1,#0x50]
000072  6d07              LDR      r7,[r0,#0x50]
000074  42b7              CMP      r7,r6
000076  d912              BLS      |L2.158|
;;;286                    if (p_tcb1->TickNextPtr != (OS_TCB *)0) {        /* Yes, are we pointing at the last TCB in the list? */
000078  694e              LDR      r6,[r1,#0x14]
00007a  b166              CBZ      r6,|L2.150|
00007c  4631              MOV      r1,r6
;;;287                        p_tcb1               =  p_tcb1->TickNextPtr; /* No,  Point to next TCB in the list                */
00007e  e7f5              B        |L2.108|
                  |L2.128|
000080  e7ff              B        |L2.130|
                  |L2.130|
000082  64c4              STR      r4,[r0,#0x4c]         ;265
000084  6504              STR      r4,[r0,#0x50]         ;266
000086  61c4              STR      r4,[r0,#0x1c]         ;267
000088  801e              STRH     r6,[r3,#0]            ;267
;;;288                    } else {
;;;289                        p_tcb->TickNextPtr   = (OS_TCB *)0;
;;;290                        p_tcb->TickPrevPtr   =  p_tcb1;
;;;291                        p_tcb1->TickNextPtr  =  p_tcb;               /* Yes, TCB to add is now new last entry in the list */
;;;292                        p_tcb1               = (OS_TCB *)0;          /* Break loop                                        */
;;;293                    }
;;;294                } else {                                             /* Insert before the current TCB                     */
;;;295                    if (p_tcb1->TickPrevPtr == (OS_TCB *)0) {        /* Are we inserting before the first TCB?            */
;;;296                        p_tcb->TickPrevPtr   = (OS_TCB *)0;
;;;297                        p_tcb->TickNextPtr   =  p_tcb1;
;;;298                        p_tcb1->TickPrevPtr  =  p_tcb;
;;;299                        p_spoke->FirstPtr    =  p_tcb;
;;;300                    } else {                                         /* Insert in between 2 TCBs already in the list      */
;;;301                        p_tcb0               =  p_tcb1->TickPrevPtr;
;;;302                        p_tcb->TickPrevPtr   =  p_tcb0;
;;;303                        p_tcb->TickNextPtr   =  p_tcb1;
;;;304                        p_tcb0->TickNextPtr  =  p_tcb;
;;;305                        p_tcb1->TickPrevPtr  =  p_tcb;
;;;306                    }
;;;307                    p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
;;;308                }
;;;309            }
;;;310            p_spoke->NbrEntries++;
;;;311        }
;;;312        if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {          /* Keep track of maximum # of entries in each spoke  */
;;;313            p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
;;;314        }
;;;315        p_tcb->TickSpokePtr = p_spoke;                               /* Link back to tick spoke                           */
;;;316       *p_err               = OS_ERR_NONE;
;;;317    }
00008a  bdf0              POP      {r4-r7,pc}
                  |L2.140|
00008c  6144              STR      r4,[r0,#0x14]         ;277
00008e  6184              STR      r4,[r0,#0x18]         ;278
000090  2101              MOVS     r1,#1                 ;279
000092  6010              STR      r0,[r2,#0]            ;279
000094  e00b              B        |L2.174|
                  |L2.150|
000096  e9c04105          STRD     r4,r1,[r0,#0x14]      ;279
00009a  6148              STR      r0,[r1,#0x14]         ;292
00009c  e005              B        |L2.170|
                  |L2.158|
00009e  698d              LDR      r5,[r1,#0x18]         ;295
0000a0  b175              CBZ      r5,|L2.192|
0000a2  e9c01505          STRD     r1,r5,[r0,#0x14]      ;295
0000a6  6168              STR      r0,[r5,#0x14]         ;305
0000a8  6188              STR      r0,[r1,#0x18]         ;305
                  |L2.170|
0000aa  8891              LDRH     r1,[r2,#4]            ;310
0000ac  1c49              ADDS     r1,r1,#1              ;310
                  |L2.174|
0000ae  8091              STRH     r1,[r2,#4]            ;310
0000b0  88d5              LDRH     r5,[r2,#6]            ;312
0000b2  b289              UXTH     r1,r1                 ;312
0000b4  428d              CMP      r5,r1                 ;312
0000b6  d200              BCS      |L2.186|
0000b8  80d1              STRH     r1,[r2,#6]            ;313
                  |L2.186|
0000ba  61c2              STR      r2,[r0,#0x1c]         ;316
0000bc  801c              STRH     r4,[r3,#0]            ;316
0000be  bdf0              POP      {r4-r7,pc}
                  |L2.192|
0000c0  e9c01405          STRD     r1,r4,[r0,#0x14]
0000c4  6188              STR      r0,[r1,#0x18]         ;299
0000c6  6010              STR      r0,[r2,#0]            ;299
0000c8  e7ef              B        |L2.170|
;;;318    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L2.204|
                          DCD      OSTickCtr
                  |L2.208|
                          DCD      OSCfg_TickWheelSize
                  |L2.212|
                          DCD      OSCfg_TickWheel

                          AREA ||i.OS_TickListRemove||, CODE, READONLY, ALIGN=1

                  OS_TickListRemove PROC
;;;336    
;;;337    void  OS_TickListRemove (OS_TCB  *p_tcb)
000000  b510              PUSH     {r4,lr}
;;;338    {
000002  69c2              LDR      r2,[r0,#0x1c]
000004  2a00              CMP      r2,#0
000006  d015              BEQ      |L3.52|
;;;339        OS_TICK_SPOKE  *p_spoke;
;;;340        OS_TCB         *p_tcb1;
;;;341        OS_TCB         *p_tcb2;
;;;342    
;;;343    
;;;344    
;;;345        p_spoke = p_tcb->TickSpokePtr;
;;;346        if (p_spoke != (OS_TICK_SPOKE *)0) {                              /* Confirm that task is in tick list            */
;;;347            p_tcb->TickRemain = (OS_TICK)0u;
000008  2100              MOVS     r1,#0
;;;348            if (p_spoke->FirstPtr == p_tcb) {                             /* Is timer to remove at the beginning of list? */
00000a  6501              STR      r1,[r0,#0x50]
00000c  6813              LDR      r3,[r2,#0]
00000e  4283              CMP      r3,r0
000010  d104              BNE      |L3.28|
;;;349                p_tcb1            = (OS_TCB *)p_tcb->TickNextPtr;         /* Yes                                          */
;;;350                p_spoke->FirstPtr = p_tcb1;
000012  6943              LDR      r3,[r0,#0x14]
;;;351                if (p_tcb1 != (OS_TCB *)0) {
000014  6013              STR      r3,[r2,#0]
000016  b133              CBZ      r3,|L3.38|
;;;352                    p_tcb1->TickPrevPtr = (OS_TCB *)0;
000018  6199              STR      r1,[r3,#0x18]
00001a  e004              B        |L3.38|
                  |L3.28|
00001c  e9d03405          LDRD     r3,r4,[r0,#0x14]
;;;353                }
;;;354            } else {
;;;355                p_tcb1              = p_tcb->TickPrevPtr;                 /* No, remove timer from somewhere in the list  */
;;;356                p_tcb2              = p_tcb->TickNextPtr;
;;;357                p_tcb1->TickNextPtr = p_tcb2;
;;;358                if (p_tcb2 != (OS_TCB *)0) {
000020  6163              STR      r3,[r4,#0x14]
000022  b103              CBZ      r3,|L3.38|
;;;359                    p_tcb2->TickPrevPtr = p_tcb1;
000024  619c              STR      r4,[r3,#0x18]
                  |L3.38|
;;;360                }
;;;361            }
;;;362            p_tcb->TickNextPtr  = (OS_TCB        *)0;
;;;363            p_tcb->TickPrevPtr  = (OS_TCB        *)0;
000026  6141              STR      r1,[r0,#0x14]
;;;364            p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
000028  6181              STR      r1,[r0,#0x18]
;;;365            p_tcb->TickCtrMatch = (OS_TICK        )0u;
00002a  61c1              STR      r1,[r0,#0x1c]
;;;366            p_spoke->NbrEntries--;
00002c  64c1              STR      r1,[r0,#0x4c]
00002e  8890              LDRH     r0,[r2,#4]
000030  1e40              SUBS     r0,r0,#1
000032  8090              STRH     r0,[r2,#4]
                  |L3.52|
;;;367        }
;;;368    }
000034  bd10              POP      {r4,pc}
;;;369    
                          ENDP


                          AREA ||i.OS_TickListResetPeak||, CODE, READONLY, ALIGN=2

                  OS_TickListResetPeak PROC
;;;385    
;;;386    void  OS_TickListResetPeak (void)
000000  b510              PUSH     {r4,lr}
;;;387    {
;;;388        OS_TICK_SPOKE_IX   i;
;;;389        OS_TICK_SPOKE     *p_spoke;
;;;390    
;;;391    
;;;392    
;;;393        for (i = 0u; i < OSCfg_TickWheelSize; i++) {
000002  2000              MOVS     r0,#0
000004  4604              MOV      r4,r0
;;;394            p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
000006  4b06              LDR      r3,|L4.32|
000008  4a06              LDR      r2,|L4.36|
00000a  e004              B        |L4.22|
                  |L4.12|
00000c  eb0301c0          ADD      r1,r3,r0,LSL #3
000010  1c40              ADDS     r0,r0,#1              ;393
;;;395            p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
000012  80cc              STRH     r4,[r1,#6]
000014  b280              UXTH     r0,r0                 ;393
                  |L4.22|
000016  8811              LDRH     r1,[r2,#0]            ;393  ; OSCfg_TickWheelSize
000018  4288              CMP      r0,r1                 ;393
00001a  d3f7              BCC      |L4.12|
;;;396        }
;;;397    }
00001c  bd10              POP      {r4,pc}
;;;398    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      OSCfg_TickWheel
                  |L4.36|
                          DCD      OSCfg_TickWheelSize

                          AREA ||i.OS_TickListUpdate||, CODE, READONLY, ALIGN=2

                  OS_TickListUpdate PROC
;;;414    
;;;415    void  OS_TickListUpdate (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;416    {
;;;417        CPU_BOOLEAN        done;
;;;418        OS_TICK_SPOKE     *p_spoke;
;;;419        OS_TCB            *p_tcb;
;;;420        OS_TCB            *p_tcb_next;
;;;421        OS_TICK_SPOKE_IX   spoke;
;;;422        CPU_TS             ts_start;
;;;423        CPU_TS             ts_end;
;;;424        CPU_SR_ALLOC();
;;;425    
;;;426    
;;;427        OS_CRITICAL_ENTER();
000004  f7fffffe          BL       CPU_SR_Save
000008  4f4d              LDR      r7,|L5.320|
00000a  7839              LDRB     r1,[r7,#0]  ; OSSchedLockNestingCtr
00000c  1c49              ADDS     r1,r1,#1
00000e  7039              STRB     r1,[r7,#0]
000010  f7fffffe          BL       CPU_SR_Restore
;;;428        ts_start = OS_TS_GET();
000014  f7fffffe          BL       CPU_TS_TmrRd
;;;429        OSTickCtr++;                                                       /* Keep track of the number of ticks           */
000018  f8df8128          LDR      r8,|L5.324|
00001c  4606              MOV      r6,r0                 ;428
;;;430        spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
00001e  494a              LDR      r1,|L5.328|
000020  f8d80000          LDR      r0,[r8,#0]            ;429  ; OSTickCtr
;;;431        p_spoke  = &OSCfg_TickWheel[spoke];
;;;432        p_tcb    = p_spoke->FirstPtr;
;;;433        done     = DEF_FALSE;
000024  f04f0900          MOV      r9,#0
000028  1c40              ADDS     r0,r0,#1              ;429
00002a  f8c80000          STR      r0,[r8,#0]            ;430  ; OSTickCtr
00002e  8809              LDRH     r1,[r1,#0]            ;430  ; OSCfg_TickWheelSize
000030  46ca              MOV      r10,r9
000032  fbb0f2f1          UDIV     r2,r0,r1              ;430
000036  fb010012          MLS      r0,r1,r2,r0           ;430
00003a  4944              LDR      r1,|L5.332|
00003c  b280              UXTH     r0,r0                 ;430
;;;434        while (done == DEF_FALSE) {
;;;435            if (p_tcb != (OS_TCB *)0) {
;;;436                p_tcb_next = p_tcb->TickNextPtr;                           /* Point to next TCB to update                 */
;;;437                switch (p_tcb->TaskState) {
00003e  f04f0b03          MOV      r11,#3
000042  f8514030          LDR      r4,[r1,r0,LSL #3]     ;432
                  |L5.70|
000046  b374              CBZ      r4,|L5.166|
000048  f8940036          LDRB     r0,[r4,#0x36]
00004c  6965              LDR      r5,[r4,#0x14]
00004e  2808              CMP      r0,#8
000050  d255              BCS      |L5.254|
000052  e8dff000          TBB      [pc,r0]
000056  5404              DCB      0x54,0x04
000058  54115429          DCB      0x54,0x11,0x54,0x29
00005c  5437              DCB      0x54,0x37
;;;438                    case OS_TASK_STATE_RDY:
;;;439                    case OS_TASK_STATE_PEND:
;;;440                    case OS_TASK_STATE_SUSPENDED:
;;;441                    case OS_TASK_STATE_PEND_SUSPENDED:
;;;442                         break;
;;;443    
;;;444                    case OS_TASK_STATE_DLY:
;;;445                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
00005e  6ce0              LDR      r0,[r4,#0x4c]
000060  f8d81000          LDR      r1,[r8,#0]  ; OSTickCtr
000064  1a42              SUBS     r2,r0,r1
;;;446                                           - OSTickCtr;
;;;447                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
000066  6522              STR      r2,[r4,#0x50]
000068  4288              CMP      r0,r1
00006a  d14c              BNE      |L5.262|
;;;448                             p_tcb->TaskState = OS_TASK_STATE_RDY;
00006c  f884a036          STRB     r10,[r4,#0x36]
;;;449                             OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       OS_TaskRdy
000076  e040              B        |L5.250|
;;;450                         } else {
;;;451                             done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
;;;452                         }
;;;453                         break;
;;;454    
;;;455                    case OS_TASK_STATE_PEND_TIMEOUT:
;;;456                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
000078  6ce0              LDR      r0,[r4,#0x4c]
00007a  f8d81000          LDR      r1,[r8,#0]  ; OSTickCtr
00007e  1a42              SUBS     r2,r0,r1
;;;457                                           - OSTickCtr;
;;;458                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
000080  6522              STR      r2,[r4,#0x50]
000082  4288              CMP      r0,r1
000084  d13f              BNE      |L5.262|
;;;459    #if (OS_MSG_EN > 0u)
;;;460                             p_tcb->MsgPtr     = (void      *)0;
;;;461                             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
000086  f8c4a05c          STR      r10,[r4,#0x5c]
00008a  f8a4a060          STRH     r10,[r4,#0x60]
;;;462    #endif
;;;463                             p_tcb->TS         = OS_TS_GET();
00008e  f7fffffe          BL       CPU_TS_TmrRd
;;;464                             OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
000092  6420              STR      r0,[r4,#0x40]
000094  4620              MOV      r0,r4
000096  f7fffffe          BL       OS_PendListRemove
;;;465                             OS_TaskRdy(p_tcb);
00009a  4620              MOV      r0,r4
00009c  f7fffffe          BL       OS_TaskRdy
;;;466                             p_tcb->TaskState  = OS_TASK_STATE_RDY;
0000a0  f884a036          STRB     r10,[r4,#0x36]
;;;467                             p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
;;;468                             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
0000a4  e025              B        |L5.242|
                  |L5.166|
0000a6  e02e              B        |L5.262|
;;;469                         } else {
;;;470                             done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
;;;471                         }
;;;472                         break;
;;;473    
;;;474                    case OS_TASK_STATE_DLY_SUSPENDED:
;;;475                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
0000a8  6ce1              LDR      r1,[r4,#0x4c]
0000aa  f8d80000          LDR      r0,[r8,#0]  ; OSTickCtr
0000ae  1a0a              SUBS     r2,r1,r0
;;;476                                           - OSTickCtr;
;;;477                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
0000b0  6522              STR      r2,[r4,#0x50]
0000b2  4281              CMP      r1,r0
0000b4  d127              BNE      |L5.262|
;;;478                             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
0000b6  2004              MOVS     r0,#4
0000b8  f8840036          STRB     r0,[r4,#0x36]
;;;479                             OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       OS_TickListRemove
0000c2  e01a              B        |L5.250|
;;;480                         } else {
;;;481                             done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
;;;482                         }
;;;483                         break;
;;;484    
;;;485                    case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
;;;486                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
0000c4  6ce1              LDR      r1,[r4,#0x4c]
0000c6  f8d80000          LDR      r0,[r8,#0]  ; OSTickCtr
0000ca  1a0a              SUBS     r2,r1,r0
;;;487                                           - OSTickCtr;
;;;488                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
0000cc  6522              STR      r2,[r4,#0x50]
0000ce  4281              CMP      r1,r0
0000d0  d119              BNE      |L5.262|
;;;489    #if (OS_MSG_EN > 0u)
;;;490                             p_tcb->MsgPtr     = (void      *)0;
;;;491                             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
0000d2  f8c4a05c          STR      r10,[r4,#0x5c]
0000d6  f8a4a060          STRH     r10,[r4,#0x60]
;;;492    #endif
;;;493                             p_tcb->TS         = OS_TS_GET();
0000da  f7fffffe          BL       CPU_TS_TmrRd
;;;494                             OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
0000de  6420              STR      r0,[r4,#0x40]
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       OS_PendListRemove
;;;495                             OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
0000e6  4620              MOV      r0,r4
0000e8  f7fffffe          BL       OS_TickListRemove
;;;496                             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
0000ec  2004              MOVS     r0,#4
0000ee  f8840036          STRB     r0,[r4,#0x36]
                  |L5.242|
0000f2  f884b035          STRB     r11,[r4,#0x35]        ;467
0000f6  f884a034          STRB     r10,[r4,#0x34]        ;468
                  |L5.250|
;;;497                             p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
;;;498                             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
;;;499                         } else {
;;;500                             done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
;;;501                         }
;;;502                         break;
;;;503    
;;;504                    default:
;;;505                         break;
;;;506                }
;;;507                p_tcb = p_tcb_next;
0000fa  462c              MOV      r4,r5
0000fc  e7a3              B        |L5.70|
                  |L5.254|
0000fe  462c              MOV      r4,r5
000100  f1b90f00          CMP      r9,#0                 ;434
000104  d09f              BEQ      |L5.70|
                  |L5.262|
;;;508            } else {
;;;509                done  = DEF_TRUE;
;;;510            }
;;;511        }
;;;512        ts_end = OS_TS_GET() - ts_start;                                   /* Measure execution time of tick task         */
000106  f7fffffe          BL       CPU_TS_TmrRd
;;;513        if (OSTickTaskTimeMax < ts_end) {
00010a  4911              LDR      r1,|L5.336|
00010c  1b80              SUBS     r0,r0,r6              ;512
00010e  680a              LDR      r2,[r1,#0]  ; OSTickTaskTimeMax
000110  4282              CMP      r2,r0
000112  d200              BCS      |L5.278|
;;;514            OSTickTaskTimeMax = ts_end;
000114  6008              STR      r0,[r1,#0]  ; OSTickTaskTimeMax
                  |L5.278|
;;;515        }
;;;516        OS_CRITICAL_EXIT();
000116  f7fffffe          BL       CPU_SR_Save
00011a  7839              LDRB     r1,[r7,#0]  ; OSSchedLockNestingCtr
00011c  1e49              SUBS     r1,r1,#1
00011e  f01101ff          ANDS     r1,r1,#0xff
000122  7039              STRB     r1,[r7,#0]
000124  d108              BNE      |L5.312|
000126  490b              LDR      r1,|L5.340|
000128  8809              LDRH     r1,[r1,#0]  ; OSIntQNbrEntries
00012a  b129              CBZ      r1,|L5.312|
00012c  f7fffffe          BL       CPU_SR_Restore
000130  e8bd5ff0          POP      {r4-r12,lr}
000134  f7ffbffe          B.W      OS_Sched0
                  |L5.312|
000138  e8bd5ff0          POP      {r4-r12,lr}
00013c  f7ffbffe          B.W      CPU_SR_Restore
;;;517    }
                          ENDP

                  |L5.320|
                          DCD      OSSchedLockNestingCtr
                  |L5.324|
                          DCD      OSTickCtr
                  |L5.328|
                          DCD      OSCfg_TickWheelSize
                  |L5.332|
                          DCD      OSCfg_TickWheel
                  |L5.336|
                          DCD      OSTickTaskTimeMax
                  |L5.340|
                          DCD      OSIntQNbrEntries

                          AREA ||i.OS_TickTask||, CODE, READONLY, ALIGN=2

                  OS_TickTask PROC
;;;60     
;;;61     void  OS_TickTask (void  *p_arg)
000000  b51c              PUSH     {r2-r4,lr}
;;;62     {
;;;63         OS_ERR  err;
;;;64         CPU_TS  ts;
;;;65     
;;;66     
;;;67         p_arg = p_arg;                                          /* Prevent compiler warning                               */
;;;68     
;;;69         while (DEF_ON) {
;;;70             (void)OSTaskSemPend((OS_TICK  )0,
;;;71                                 (OS_OPT   )OS_OPT_PEND_BLOCKING,
;;;72                                 (CPU_TS  *)&ts,
;;;73                                 (OS_ERR  *)&err);               /* Wait for signal from tick interrupt                    */
;;;74             if (err == OS_ERR_NONE) {
;;;75                 if (OSRunning == OS_STATE_OS_RUNNING) {
000002  4c08              LDR      r4,|L6.36|
                  |L6.4|
000004  2100              MOVS     r1,#0                 ;70
000006  466b              MOV      r3,sp                 ;70
000008  aa01              ADD      r2,sp,#4              ;70
00000a  4608              MOV      r0,r1                 ;70
00000c  f7fffffe          BL       OSTaskSemPend
000010  f8bd0000          LDRH     r0,[sp,#0]            ;74
000014  2800              CMP      r0,#0                 ;74
000016  d1f5              BNE      |L6.4|
000018  7820              LDRB     r0,[r4,#0]  ; OSRunning
00001a  2801              CMP      r0,#1
00001c  d1f2              BNE      |L6.4|
;;;76                     OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
00001e  f7fffffe          BL       OS_TickListUpdate
000022  e7ef              B        |L6.4|
;;;77                 }
;;;78             }
;;;79         }
;;;80     }
;;;81     
                          ENDP

                  |L6.36|
                          DCD      OSRunning

                          AREA ||i.OS_TickTaskInit||, CODE, READONLY, ALIGN=2

                  OS_TickTaskInit PROC
;;;103    
;;;104    void  OS_TickTaskInit (OS_ERR  *p_err)
000000  b530              PUSH     {r4,r5,lr}
;;;105    {
000002  4604              MOV      r4,r0
;;;106    #ifdef OS_SAFETY_CRITICAL
;;;107        if (p_err == (OS_ERR *)0) {
;;;108            OS_SAFETY_CRITICAL_EXCEPTION();
;;;109            return;
;;;110        }
;;;111    #endif
;;;112    
;;;113        OSTickCtr         = (OS_TICK)0u;                        /* Clear the tick counter                                 */
000004  481a              LDR      r0,|L7.112|
000006  b089              SUB      sp,sp,#0x24           ;105
000008  2500              MOVS     r5,#0
;;;114    
;;;115        OSTickTaskTimeMax = (CPU_TS)0u;
00000a  6005              STR      r5,[r0,#0]  ; OSTickCtr
00000c  4819              LDR      r0,|L7.116|
;;;116    
;;;117    
;;;118        OS_TickListInit();                                      /* Initialize the tick list data structures               */
00000e  6005              STR      r5,[r0,#0]  ; OSTickTaskTimeMax
000010  f7fffffe          BL       OS_TickListInit
;;;119    
;;;120                                                                /* ---------------- CREATE THE TICK TASK ---------------- */
;;;121        if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
000014  4818              LDR      r0,|L7.120|
000016  6801              LDR      r1,[r0,#0]  ; OSCfg_TickTaskStkBasePtr
000018  b141              CBZ      r1,|L7.44|
;;;122           *p_err = OS_ERR_TICK_STK_INVALID;
;;;123            return;
;;;124        }
;;;125    
;;;126        if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
00001a  4918              LDR      r1,|L7.124|
00001c  4b18              LDR      r3,|L7.128|
00001e  680a              LDR      r2,[r1,#0]  ; OSCfg_TickTaskStkSize
000020  681b              LDR      r3,[r3,#0]  ; OSCfg_StkSizeMin
000022  429a              CMP      r2,r3
000024  d205              BCS      |L7.50|
;;;127           *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
000026  f2472013          MOV      r0,#0x7213
;;;128            return;
00002a  e008              B        |L7.62|
                  |L7.44|
00002c  f2472012          MOV      r0,#0x7212            ;122
000030  e005              B        |L7.62|
                  |L7.50|
;;;129        }
;;;130    
;;;131        if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {     /* Only one task at the 'Idle Task' priority              */
000032  4a14              LDR      r2,|L7.132|
000034  7813              LDRB     r3,[r2,#0]  ; OSCfg_TickTaskPrio
000036  2b3f              CMP      r3,#0x3f
000038  d304              BCC      |L7.68|
;;;132           *p_err = OS_ERR_TICK_PRIO_INVALID;
00003a  f2472011          MOV      r0,#0x7211
                  |L7.62|
00003e  8020              STRH     r0,[r4,#0]
                  |L7.64|
;;;133            return;
;;;134        }
;;;135    
;;;136        OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
;;;137                     (CPU_CHAR   *)((void *)"uC/OS-III Tick Task"),
;;;138                     (OS_TASK_PTR )OS_TickTask,
;;;139                     (void       *)0,
;;;140                     (OS_PRIO     )OSCfg_TickTaskPrio,
;;;141                     (CPU_STK    *)OSCfg_TickTaskStkBasePtr,
;;;142                     (CPU_STK_SIZE)OSCfg_TickTaskStkLimit,
;;;143                     (CPU_STK_SIZE)OSCfg_TickTaskStkSize,
;;;144                     (OS_MSG_QTY  )0u,
;;;145                     (OS_TICK     )0u,
;;;146                     (void       *)0,
;;;147                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
;;;148                     (OS_ERR     *)p_err);
;;;149    }
000040  b009              ADD      sp,sp,#0x24
000042  bd30              POP      {r4,r5,pc}
                  |L7.68|
000044  230b              MOVS     r3,#0xb               ;136
000046  9505              STR      r5,[sp,#0x14]         ;136
000048  9506              STR      r5,[sp,#0x18]         ;136
00004a  e9cd3407          STRD     r3,r4,[sp,#0x1c]      ;136
00004e  4b0e              LDR      r3,|L7.136|
000050  6809              LDR      r1,[r1,#0]            ;136  ; OSCfg_TickTaskStkSize
000052  6800              LDR      r0,[r0,#0]            ;136  ; OSCfg_TickTaskStkBasePtr
000054  681b              LDR      r3,[r3,#0]            ;136  ; OSCfg_TickTaskStkLimit
000056  e9cd0301          STRD     r0,r3,[sp,#4]         ;136
00005a  e9cd1503          STRD     r1,r5,[sp,#0xc]       ;136
00005e  7810              LDRB     r0,[r2,#0]            ;136  ; OSCfg_TickTaskPrio
000060  9000              STR      r0,[sp,#0]            ;136
000062  2300              MOVS     r3,#0                 ;136
000064  4a09              LDR      r2,|L7.140|
000066  a10a              ADR      r1,|L7.144|
000068  480e              LDR      r0,|L7.164|
00006a  f7fffffe          BL       OSTaskCreate
00006e  e7e7              B        |L7.64|
;;;150    
                          ENDP

                  |L7.112|
                          DCD      OSTickCtr
                  |L7.116|
                          DCD      OSTickTaskTimeMax
                  |L7.120|
                          DCD      OSCfg_TickTaskStkBasePtr
                  |L7.124|
                          DCD      OSCfg_TickTaskStkSize
                  |L7.128|
                          DCD      OSCfg_StkSizeMin
                  |L7.132|
                          DCD      OSCfg_TickTaskPrio
                  |L7.136|
                          DCD      OSCfg_TickTaskStkLimit
                  |L7.140|
                          DCD      OS_TickTask
                  |L7.144|
000090  75432f4f          DCB      "uC/OS-III Tick Task",0
000094  532d4949
000098  49205469
00009c  636b2054
0000a0  61736b00
                  |L7.164|
                          DCD      OSTickTaskTCB
