; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\stm32f10x_exti.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\stm32f10x_exti.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_exti.crf ..\STM32F10x_FWLib\src\stm32f10x_exti.c]
                          THUMB

                          AREA ||i.EXTI_ClearFlag||, CODE, READONLY, ALIGN=2

                  EXTI_ClearFlag PROC
;;;208      */
;;;209    void EXTI_ClearFlag(uint32_t EXTI_Line)
000000  4901              LDR      r1,|L1.8|
;;;210    {
;;;211      /* Check the parameters */
;;;212      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;213      
;;;214      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;215    }
000004  4770              BX       lr
;;;216    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40010414

                          AREA ||i.EXTI_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  EXTI_ClearITPendingBit PROC
;;;248      */
;;;249    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
000000  4901              LDR      r1,|L2.8|
;;;250    {
;;;251      /* Check the parameters */
;;;252      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;253      
;;;254      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;255    }
000004  4770              BX       lr
;;;256    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40010414

                          AREA ||i.EXTI_DeInit||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;84       */
;;;85     void EXTI_DeInit(void)
000000  4906              LDR      r1,|L3.28|
;;;86     {
;;;87       EXTI->IMR = 0x00000000;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;88       EXTI->EMR = 0x00000000;
000006  1d09              ADDS     r1,r1,#4
000008  6008              STR      r0,[r1,#0]
;;;89       EXTI->RTSR = 0x00000000; 
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;90       EXTI->FTSR = 0x00000000; 
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;91       EXTI->PR = 0x000FFFFF;
000012  4902              LDR      r1,|L3.28|
000014  4802              LDR      r0,|L3.32|
000016  3114              ADDS     r1,r1,#0x14
000018  6008              STR      r0,[r1,#0]
;;;92     }
00001a  4770              BX       lr
;;;93     
                          ENDP

                  |L3.28|
                          DCD      0x40010400
                  |L3.32|
                          DCD      0x000fffff

                          AREA ||i.EXTI_GenerateSWInterrupt||, CODE, READONLY, ALIGN=2

                  EXTI_GenerateSWInterrupt PROC
;;;170      */
;;;171    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
000000  4902              LDR      r1,|L4.12|
;;;172    {
;;;173      /* Check the parameters */
;;;174      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;175      
;;;176      EXTI->SWIER |= EXTI_Line;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;177    }
000008  4770              BX       lr
;;;178    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x40010410

                          AREA ||i.EXTI_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetFlagStatus PROC
;;;185      */
;;;186    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
000000  4a03              LDR      r2,|L5.16|
;;;187    {
000002  4601              MOV      r1,r0
;;;188      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;189      /* Check the parameters */
;;;190      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;191      
;;;192      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L5.14|
;;;193      {
;;;194        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L5.14|
;;;195      }
;;;196      else
;;;197      {
;;;198        bitstatus = RESET;
;;;199      }
;;;200      return bitstatus;
;;;201    }
00000e  4770              BX       lr
;;;202    
                          ENDP

                  |L5.16|
                          DCD      0x40010414

                          AREA ||i.EXTI_GetITStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetITStatus PROC
;;;223      */
;;;224    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
000000  4a06              LDR      r2,|L6.28|
;;;225    {
000002  4601              MOV      r1,r0
;;;226      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;227      uint32_t enablestatus = 0;
;;;228      /* Check the parameters */
;;;229      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;230      
;;;231      enablestatus =  EXTI->IMR & EXTI_Line;
000006  6812              LDR      r2,[r2,#0]
;;;232      if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
000008  4b04              LDR      r3,|L6.28|
00000a  400a              ANDS     r2,r2,r1              ;231
00000c  3314              ADDS     r3,r3,#0x14
00000e  681b              LDR      r3,[r3,#0]
000010  420b              TST      r3,r1
000012  d002              BEQ      |L6.26|
000014  2a00              CMP      r2,#0
000016  d000              BEQ      |L6.26|
;;;233      {
;;;234        bitstatus = SET;
000018  2001              MOVS     r0,#1
                  |L6.26|
;;;235      }
;;;236      else
;;;237      {
;;;238        bitstatus = RESET;
;;;239      }
;;;240      return bitstatus;
;;;241    }
00001a  4770              BX       lr
;;;242    
                          ENDP

                  |L6.28|
                          DCD      0x40010400

                          AREA ||i.EXTI_Init||, CODE, READONLY, ALIGN=2

                  EXTI_Init PROC
;;;100      */
;;;101    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;102    {
;;;103      uint32_t tmp = 0;
;;;104    
;;;105      /* Check the parameters */
;;;106      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;107      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;108      assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;109      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;110    
;;;111      tmp = (uint32_t)EXTI_BASE;
000002  491a              LDR      r1,|L7.108|
;;;112         
;;;113      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
000004  7983              LDRB     r3,[r0,#6]
000006  6802              LDR      r2,[r0,#0]            ;102
000008  b353              CBZ      r3,|L7.96|
;;;114      {
;;;115        /* Clear EXTI line configuration */
;;;116        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
00000a  680b              LDR      r3,[r1,#0]
00000c  4393              BICS     r3,r3,r2
00000e  600b              STR      r3,[r1,#0]
;;;117        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
000010  1d0a              ADDS     r2,r1,#4
000012  6813              LDR      r3,[r2,#0]
000014  6804              LDR      r4,[r0,#0]
000016  43a3              BICS     r3,r3,r4
000018  6013              STR      r3,[r2,#0]
;;;118        
;;;119        tmp += EXTI_InitStruct->EXTI_Mode;
00001a  7902              LDRB     r2,[r0,#4]
00001c  440a              ADD      r2,r2,r1
;;;120    
;;;121        *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
00001e  6813              LDR      r3,[r2,#0]
000020  6804              LDR      r4,[r0,#0]
000022  4323              ORRS     r3,r3,r4
000024  6013              STR      r3,[r2,#0]
;;;122    
;;;123        /* Clear Rising Falling edge configuration */
;;;124        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
000026  4a11              LDR      r2,|L7.108|
000028  3208              ADDS     r2,r2,#8
00002a  6813              LDR      r3,[r2,#0]
00002c  6804              LDR      r4,[r0,#0]
00002e  43a3              BICS     r3,r3,r4
000030  6013              STR      r3,[r2,#0]
;;;125        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
000032  1d13              ADDS     r3,r2,#4
000034  681c              LDR      r4,[r3,#0]
000036  6805              LDR      r5,[r0,#0]
000038  43ac              BICS     r4,r4,r5
00003a  601c              STR      r4,[r3,#0]
;;;126        
;;;127        /* Select the trigger for the selected external interrupts */
;;;128        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
00003c  7944              LDRB     r4,[r0,#5]
00003e  2c10              CMP      r4,#0x10
000040  d005              BEQ      |L7.78|
;;;129        {
;;;130          /* Rising Falling edge */
;;;131          EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
;;;132          EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
;;;133        }
;;;134        else
;;;135        {
;;;136          tmp = (uint32_t)EXTI_BASE;
;;;137          tmp += EXTI_InitStruct->EXTI_Trigger;
000042  4421              ADD      r1,r1,r4
;;;138    
;;;139          *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
000044  680a              LDR      r2,[r1,#0]
000046  6800              LDR      r0,[r0,#0]
000048  4302              ORRS     r2,r2,r0
00004a  600a              STR      r2,[r1,#0]
;;;140        }
;;;141      }
;;;142      else
;;;143      {
;;;144        tmp += EXTI_InitStruct->EXTI_Mode;
;;;145    
;;;146        /* Disable the selected external lines */
;;;147        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
;;;148      }
;;;149    }
00004c  bd30              POP      {r4,r5,pc}
                  |L7.78|
00004e  6811              LDR      r1,[r2,#0]            ;131
000050  6804              LDR      r4,[r0,#0]            ;131
000052  4321              ORRS     r1,r1,r4              ;131
000054  6011              STR      r1,[r2,#0]            ;131
000056  6819              LDR      r1,[r3,#0]            ;132
000058  6800              LDR      r0,[r0,#0]            ;132
00005a  4301              ORRS     r1,r1,r0              ;132
00005c  6019              STR      r1,[r3,#0]            ;132
00005e  bd30              POP      {r4,r5,pc}
                  |L7.96|
000060  7900              LDRB     r0,[r0,#4]            ;144
000062  4408              ADD      r0,r0,r1              ;144
000064  6801              LDR      r1,[r0,#0]            ;147
000066  4391              BICS     r1,r1,r2              ;147
000068  6001              STR      r1,[r0,#0]            ;147
00006a  bd30              POP      {r4,r5,pc}
;;;150    
                          ENDP

                  |L7.108|
                          DCD      0x40010400

                          AREA ||i.EXTI_StructInit||, CODE, READONLY, ALIGN=1

                  EXTI_StructInit PROC
;;;156      */
;;;157    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
000000  2100              MOVS     r1,#0
;;;158    {
;;;159      EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
;;;160      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
000002  6001              STR      r1,[r0,#0]
000004  7101              STRB     r1,[r0,#4]
;;;161      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
000006  220c              MOVS     r2,#0xc
000008  7142              STRB     r2,[r0,#5]
;;;162      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
00000a  7181              STRB     r1,[r0,#6]
;;;163    }
00000c  4770              BX       lr
;;;164    
                          ENDP

