; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\l206.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\l206.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\l206.crf ..\BSP\src\l206.c]
                          THUMB

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;221    
;;;222    void L206_USART_IRQHandler(void)
000000  4806              LDR      r0,|L1.28|
;;;223    {
000002  b510              PUSH     {r4,lr}
;;;224        if(0 == OSRunning)
000004  7800              LDRB     r0,[r0,#0]  ; OSRunning
000006  2800              CMP      r0,#0                 ;223
000008  d007              BEQ      |L1.26|
;;;225            return;
;;;226        OSIntEnter();
00000a  f7fffffe          BL       OSIntEnter
;;;227        BSP_IntHandlerUSART3();
00000e  f7fffffe          BL       BSP_IntHandlerUSART3
;;;228        OSIntExit();
000012  e8bd4010          POP      {r4,lr}
000016  f7ffbffe          B.W      OSIntExit
                  |L1.26|
;;;229    }
00001a  bd10              POP      {r4,pc}
;;;230    
                          ENDP

                  |L1.28|
                          DCD      OSRunning

                          AREA ||i.l206_connect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_str
                  l206_connect PROC
;;;337    
;;;338    bool l206_connect(const char *host, uint32_t port)
000000  b570              PUSH     {r4-r6,lr}
;;;339    {
000002  b0b4              SUB      sp,sp,#0xd0
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;340        bool ret;
;;;341        uint8_t buf[128];
;;;342        uint8_t recv;
;;;343        uint8_t rx_buf[64];
;;;344        uint8_t index = 0;
000008  2400              MOVS     r4,#0
;;;345    
;;;346        memset(buf, 0x00, 128);
00000a  2180              MOVS     r1,#0x80
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memclr4
;;;347        memset(rx_buf, 0x00, 64);
000012  2140              MOVS     r1,#0x40
000014  a821              ADD      r0,sp,#0x84
000016  f7fffffe          BL       __aeabi_memclr4
;;;348        snprintf((char *)buf, 128, "AT+ZIPOPEN=2,0,%s,%d\r\n",
00001a  4633              MOV      r3,r6
00001c  a225              ADR      r2,|L2.180|
00001e  2180              MOVS     r1,#0x80
000020  a801              ADD      r0,sp,#4
000022  9500              STR      r5,[sp,#0]
000024  f7fffffe          BL       __2snprintf
;;;349                host, port);
;;;350        logi("%s: %s", __func__, buf);
000028  a832              ADD      r0,sp,#0xc8
00002a  f7fffffe          BL       OSTimeGet
00002e  4927              LDR      r1,|L2.204|
000030  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
000032  0789              LSLS     r1,r1,#30
000034  d50e              BPL      |L2.84|
000036  f2413288          MOV      r2,#0x1388
00003a  fbb0f1f2          UDIV     r1,r0,r2
00003e  fb020011          MLS      r0,r2,r1,r0
000042  2205              MOVS     r2,#5
000044  fbb0f2f2          UDIV     r2,r0,r2
000048  a801              ADD      r0,sp,#4
00004a  9000              STR      r0,[sp,#0]
00004c  4b20              LDR      r3,|L2.208|
00004e  a021              ADR      r0,|L2.212|
000050  f7fffffe          BL       __2printf
                  |L2.84|
;;;351        l206_lock();
000054  f7fffffe          BL       l206_lock
;;;352        rb_clear(&mRb);
000058  4824              LDR      r0,|L2.236|
00005a  f7fffffe          BL       rb_clear
;;;353        ret = l206_send_cmd((const char *)buf, "\r\nOK");
00005e  a124              ADR      r1,|L2.240|
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       l206_send_cmd
;;;354        if(ret) {
000066  b120              CBZ      r0,|L2.114|
;;;355            //l206_unlock();
;;;356            //return TRUE;
;;;357    #if 1
;;;358            ret = l206_down(10);
000068  200a              MOVS     r0,#0xa
00006a  f7fffffe          BL       l206_down
;;;359            if(ret == TRUE) {
00006e  2801              CMP      r0,#1
000070  d00f              BEQ      |L2.146|
                  |L2.114|
;;;360                while(!rb_is_empty(&mRb)) {
;;;361                    rb_get(&mRb, &recv, 1);
;;;362                    //logi("RECV %02x %c", recv, recv);
;;;363                    rx_buf[index ++] = recv;
;;;364                }
;;;365                l206_unlock();
;;;366                //logi("rx_buf = %s", rx_buf);
;;;367                if(strstr((const char *)rx_buf, "CONNECT OK") != NULL) {
;;;368                    return TRUE;
;;;369                } else {
;;;370                    return FALSE;
;;;371                }
;;;372            } else {
;;;373                l206_unlock();
;;;374                return FALSE;
;;;375            }
;;;376    #endif
;;;377        } else {
;;;378            l206_unlock();
000072  f7fffffe          BL       l206_unlock
;;;379            return FALSE;
000076  2000              MOVS     r0,#0
                  |L2.120|
;;;380        }
;;;381    }
000078  b034              ADD      sp,sp,#0xd0
00007a  bd70              POP      {r4-r6,pc}
                  |L2.124|
00007c  2201              MOVS     r2,#1                 ;361
00007e  a931              ADD      r1,sp,#0xc4           ;361
000080  481a              LDR      r0,|L2.236|
000082  f7fffffe          BL       rb_get
000086  f89d00c4          LDRB     r0,[sp,#0xc4]         ;363
00008a  5528              STRB     r0,[r5,r4]            ;363
00008c  1c64              ADDS     r4,r4,#1              ;363
00008e  b2e4              UXTB     r4,r4                 ;363
000090  e000              B        |L2.148|
                  |L2.146|
000092  ad21              ADD      r5,sp,#0x84           ;343
                  |L2.148|
000094  4815              LDR      r0,|L2.236|
000096  f7fffffe          BL       rb_is_empty
00009a  2800              CMP      r0,#0                 ;360
00009c  d0ee              BEQ      |L2.124|
00009e  f7fffffe          BL       l206_unlock
0000a2  a115              ADR      r1,|L2.248|
0000a4  a821              ADD      r0,sp,#0x84           ;367
0000a6  f7fffffe          BL       strstr
0000aa  2800              CMP      r0,#0                 ;367
0000ac  d0e4              BEQ      |L2.120|
0000ae  2001              MOVS     r0,#1                 ;368
0000b0  e7e2              B        |L2.120|
;;;382    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L2.180|
0000b4  41542b5a          DCB      "AT+ZIPOPEN=2,0,%s,%d\r\n",0
0000b8  49504f50
0000bc  454e3d32
0000c0  2c302c25
0000c4  732c2564
0000c8  0d0a00  
0000cb  00                DCB      0
                  |L2.204|
                          DCD      DEBUG_MODE
                  |L2.208|
                          DCD      ||.constdata||+0x23
                  |L2.212|
0000d4  5b253035          DCB      "[%05d.%03d/I]: %s: %s\r\n",0
0000d8  642e2530
0000dc  33642f49
0000e0  5d3a2025
0000e4  733a2025
0000e8  730d0a00
                  |L2.236|
                          DCD      ||.bss||+0x100
                  |L2.240|
0000f0  0d0a4f4b          DCB      "\r\nOK",0
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L2.248|
0000f8  434f4e4e          DCB      "CONNECT OK",0
0000fc  45435420
000100  4f4b00  
000103  00                DCB      0

                          AREA ||i.l206_connect_location_server||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  l206_connect_location_server PROC
;;;382    
;;;383    void l206_connect_location_server(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;384    {
;;;385        logi("%s: start", __func__);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       OSTimeGet
000008  4d17              LDR      r5,|L3.104|
00000a  f2413488          MOV      r4,#0x1388
00000e  f04f0605          MOV      r6,#5
000012  7829              LDRB     r1,[r5,#0]  ; DEBUG_MODE
000014  0789              LSLS     r1,r1,#30
000016  d509              BPL      |L3.44|
000018  fbb0f1f4          UDIV     r1,r0,r4
00001c  fb040011          MLS      r0,r4,r1,r0
000020  fbb0f2f6          UDIV     r2,r0,r6
000024  4b11              LDR      r3,|L3.108|
000026  a012              ADR      r0,|L3.112|
000028  f7fffffe          BL       __2printf
                  |L3.44|
;;;386        //l206_lock();
;;;387        mState = STATE_CMD_BUSY;    
00002c  4f17              LDR      r7,|L3.140|
00002e  2009              MOVS     r0,#9
;;;388        l206_write("AT+GTPOS=1\r\n", 12);
000030  210c              MOVS     r1,#0xc
000032  70b8              STRB     r0,[r7,#2]            ;387
000034  a016              ADR      r0,|L3.144|
000036  f7fffffe          BL       l206_write
;;;389        l206_delay(1);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       l206_delay
;;;390        mState = STATE_IDLE;
000040  2006              MOVS     r0,#6
000042  70b8              STRB     r0,[r7,#2]
;;;391        //l206_unlock();
;;;392        logi("%s: done", __func__);
000044  4668              MOV      r0,sp
000046  f7fffffe          BL       OSTimeGet
00004a  7829              LDRB     r1,[r5,#0]  ; DEBUG_MODE
00004c  0789              LSLS     r1,r1,#30
00004e  d509              BPL      |L3.100|
000050  fbb0f1f4          UDIV     r1,r0,r4
000054  fb040011          MLS      r0,r4,r1,r0
000058  fbb0f2f6          UDIV     r2,r0,r6
00005c  4b03              LDR      r3,|L3.108|
00005e  a010              ADR      r0,|L3.160|
000060  f7fffffe          BL       __2printf
                  |L3.100|
;;;393    }
000064  bdf8              POP      {r3-r7,pc}
;;;394    
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      DEBUG_MODE
                  |L3.108|
                          DCD      ||.constdata||+0x30
                  |L3.112|
000070  5b253035          DCB      "[%05d.%03d/I]: %s: start\r\n",0
000074  642e2530
000078  33642f49
00007c  5d3a2025
000080  733a2073
000084  74617274
000088  0d0a00  
00008b  00                DCB      0
                  |L3.140|
                          DCD      ||.data||
                  |L3.144|
000090  41542b47          DCB      "AT+GTPOS=1\r\n",0
000094  54504f53
000098  3d310d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L3.160|
0000a0  5b253035          DCB      "[%05d.%03d/I]: %s: done\r\n",0
0000a4  642e2530
0000a8  33642f49
0000ac  5d3a2025
0000b0  733a2064
0000b4  6f6e650d
0000b8  0a00    
0000ba  00                DCB      0
0000bb  00                DCB      0

                          AREA ||i.l206_delay||, CODE, READONLY, ALIGN=1

                  l206_delay PROC
;;;57     
;;;58     void l206_delay(uint8_t s)
000000  b50e              PUSH     {r1-r3,lr}
;;;59     {
;;;60         OS_ERR err;
;;;61         OSTimeDlyHMSM(0, 0, s, 0, OS_OPT_TIME_HMSM_STRICT, &err);
000002  2100              MOVS     r1,#0
000004  aa02              ADD      r2,sp,#8
000006  e9cd1200          STRD     r1,r2,[sp,#0]
00000a  4602              MOV      r2,r0
00000c  460b              MOV      r3,r1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       OSTimeDlyHMSM
;;;62     }
000014  bd0e              POP      {r1-r3,pc}
;;;63     
                          ENDP


                          AREA ||i.l206_delay_ms||, CODE, READONLY, ALIGN=1

                  l206_delay_ms PROC
;;;63     
;;;64     void l206_delay_ms(uint16_t s)
000000  b50e              PUSH     {r1-r3,lr}
;;;65     {
;;;66         OS_ERR err;
;;;67         OSTimeDlyHMSM(0, 0, 0, s, OS_OPT_TIME_HMSM_STRICT, &err);
000002  2100              MOVS     r1,#0
000004  aa02              ADD      r2,sp,#8
000006  e9cd1200          STRD     r1,r2,[sp,#0]
00000a  4603              MOV      r3,r0
00000c  460a              MOV      r2,r1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       OSTimeDlyHMSM
;;;68     }
000014  bd0e              POP      {r1-r3,pc}
;;;69     
                          ENDP


                          AREA ||i.l206_down||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  l206_down PROC
;;;627    
;;;628    bool l206_down(uint16_t sec)
000000  b51c              PUSH     {r2-r4,lr}
;;;629    {
000002  4604              MOV      r4,r0
;;;630        OS_ERR err;
;;;631    
;;;632        //logi("%s", __func__);
;;;633        OSSemSet(&mWait, 0, &err);
000004  aa01              ADD      r2,sp,#4
000006  2100              MOVS     r1,#0
000008  4815              LDR      r0,|L6.96|
00000a  f7fffffe          BL       OSSemSet
;;;634        OSSemPend(&mWait, sec * OS_CFG_TICK_RATE_HZ, OS_OPT_PEND_BLOCKING, 0, &err);
00000e  a801              ADD      r0,sp,#4
000010  9000              STR      r0,[sp,#0]
000012  f2413088          MOV      r0,#0x1388
000016  fb04f100          MUL      r1,r4,r0
00001a  2300              MOVS     r3,#0
00001c  461a              MOV      r2,r3
00001e  4810              LDR      r0,|L6.96|
000020  f7fffffe          BL       OSSemPend
;;;635        if(err == OS_ERR_TIMEOUT) {
000024  f8bd0004          LDRH     r0,[sp,#4]
000028  f5a041e4          SUB      r1,r0,#0x7200
00002c  39d9              SUBS     r1,r1,#0xd9
00002e  d115              BNE      |L6.92|
;;;636            logi("%s: timeout", __func__);
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       OSTimeGet
000036  490b              LDR      r1,|L6.100|
000038  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00003a  0789              LSLS     r1,r1,#30
00003c  d50c              BPL      |L6.88|
00003e  f2413288          MOV      r2,#0x1388
000042  fbb0f1f2          UDIV     r1,r0,r2
000046  fb020011          MLS      r0,r2,r1,r0
00004a  2205              MOVS     r2,#5
00004c  fbb0f2f2          UDIV     r2,r0,r2
000050  4b05              LDR      r3,|L6.104|
000052  a006              ADR      r0,|L6.108|
000054  f7fffffe          BL       __2printf
                  |L6.88|
;;;637            return FALSE;
000058  2000              MOVS     r0,#0
;;;638        } else {
;;;639            return TRUE;
;;;640        }
;;;641    }
00005a  bd1c              POP      {r2-r4,pc}
                  |L6.92|
00005c  2001              MOVS     r0,#1                 ;639
00005e  bd1c              POP      {r2-r4,pc}
;;;642    
                          ENDP

                  |L6.96|
                          DCD      ||.bss||+0x10c
                  |L6.100|
                          DCD      DEBUG_MODE
                  |L6.104|
                          DCD      ||.constdata||+0x57
                  |L6.108|
00006c  5b253035          DCB      "[%05d.%03d/I]: %s: timeout\r\n",0
000070  642e2530
000074  33642f49
000078  5d3a2025
00007c  733a2074
000080  696d656f
000084  75740d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.l206_get_location||, CODE, READONLY, ALIGN=2

                  l206_get_location PROC
;;;470    
;;;471    void l206_get_location(uint32_t *lng, uint32_t *lat)
000000  b570              PUSH     {r4-r6,lr}
;;;472    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;473        l206_get_pos();
000006  f7fffffe          BL       l206_get_pos
;;;474        *lng = l206_lng;
00000a  4803              LDR      r0,|L7.24|
00000c  6841              LDR      r1,[r0,#4]  ; l206_lng
;;;475        *lat = l206_lat;
00000e  6029              STR      r1,[r5,#0]
000010  6880              LDR      r0,[r0,#8]  ; l206_lat
000012  6020              STR      r0,[r4,#0]
;;;476    }
000014  bd70              POP      {r4-r6,pc}
;;;477    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      ||.data||

                          AREA ||i.l206_get_pos||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  l206_get_pos PROC
;;;394    
;;;395    void l206_get_pos(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;396    {
000004  b0a3              SUB      sp,sp,#0x8c
;;;397        uint8_t index = 0, i;
000006  2400              MOVS     r4,#0
;;;398        uint8_t recv;
;;;399        uint8_t rx_buf[40];
;;;400        bool ret;
;;;401        uint8_t *s, *p;
;;;402        uint8_t buf[40];
;;;403        double lng, lat;
;;;404        char lng_buf[20];
;;;405        char lat_buf[20];
;;;406    
;;;407        l206_lock();
000008  f7fffffe          BL       l206_lock
;;;408        memset(rx_buf, 0x00, 40);
00000c  2128              MOVS     r1,#0x28
00000e  a80b              ADD      r0,sp,#0x2c
000010  f7fffffe          BL       __aeabi_memclr4
;;;409        memset(buf, 0x00, 40);
000014  2128              MOVS     r1,#0x28
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memclr4
;;;410        mState = STATE_SIGNAL;
00001c  4d65              LDR      r5,|L8.436|
00001e  2003              MOVS     r0,#3
000020  70a8              STRB     r0,[r5,#2]
;;;411        rb_clear(&mRb);
000022  4865              LDR      r0,|L8.440|
000024  f7fffffe          BL       rb_clear
;;;412        l206_write("AT+GTPOS=2\r\n", 12);
000028  210c              MOVS     r1,#0xc
00002a  a064              ADR      r0,|L8.444|
00002c  f7fffffe          BL       l206_write
;;;413    
;;;414        ret = l206_down(2);
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       l206_down
000036  ae0b              ADD      r6,sp,#0x2c           ;399
;;;415    #if 0
;;;416        if(ret == TRUE) {
;;;417        } else {
;;;418            loge("down failed");
;;;419        }
;;;420    #endif
;;;421        while(!rb_is_empty(&mRb)) {
000038  e009              B        |L8.78|
                  |L8.58|
;;;422            rb_get(&mRb, &recv, 1);
00003a  2201              MOVS     r2,#1
00003c  a922              ADD      r1,sp,#0x88
00003e  485e              LDR      r0,|L8.440|
000040  f7fffffe          BL       rb_get
;;;423            rx_buf[index ++] = recv;
000044  f89d0088          LDRB     r0,[sp,#0x88]
000048  5530              STRB     r0,[r6,r4]
00004a  1c64              ADDS     r4,r4,#1
00004c  b2e4              UXTB     r4,r4
                  |L8.78|
00004e  485a              LDR      r0,|L8.440|
000050  f7fffffe          BL       rb_is_empty
000054  2800              CMP      r0,#0                 ;421
000056  d0f0              BEQ      |L8.58|
;;;424        }
;;;425        if(NULL != (s = strstr((const char *)rx_buf, "+GTPOS:"))) {
000058  a15c              ADR      r1,|L8.460|
00005a  a80b              ADD      r0,sp,#0x2c
00005c  f7fffffe          BL       strstr
;;;426            s = strstr((char *)(s), " ");
;;;427            s =s + 1;
;;;428            p = strstr((char *)(s), "\r\n");
;;;429            if(NULL != s) {
;;;430                i = 0;
;;;431                while(s < p) {
;;;432                    buf[i++] = *(s++);
;;;433                }
;;;434                buf[i] = '\0';
;;;435            }
;;;436            logi("buf: %s", buf);
000060  f8df9170          LDR      r9,|L8.468|
;;;437        } else {
;;;438            loge("cannot get position info, [%s]", rx_buf);
;;;439            mState = STATE_IDLE;
000064  f04f0b06          MOV      r11,#6
000068  f2413788          MOV      r7,#0x1388            ;436
00006c  f04f0805          MOV      r8,#5                 ;436
000070  2600              MOVS     r6,#0                 ;436
000072  b3b0              CBZ      r0,|L8.226|
000074  a158              ADR      r1,|L8.472|
000076  f7fffffe          BL       strstr
00007a  1c44              ADDS     r4,r0,#1              ;427
00007c  a157              ADR      r1,|L8.476|
00007e  4620              MOV      r0,r4                 ;428
000080  f7fffffe          BL       strstr
000084  4602              MOV      r2,r0                 ;428
000086  f10d0a04          ADD      r10,sp,#4             ;402
00008a  b164              CBZ      r4,|L8.166|
00008c  2000              MOVS     r0,#0                 ;430
00008e  4651              MOV      r1,r10                ;402
000090  e005              B        |L8.158|
000092  bf00              NOP                            ;432
                  |L8.148|
000094  f8143b01          LDRB     r3,[r4],#1            ;432
000098  540b              STRB     r3,[r1,r0]            ;432
00009a  1c40              ADDS     r0,r0,#1              ;432
00009c  b2c0              UXTB     r0,r0                 ;432
                  |L8.158|
00009e  4294              CMP      r4,r2                 ;431
0000a0  d3f8              BCC      |L8.148|
0000a2  f80a6000          STRB     r6,[r10,r0]           ;434
                  |L8.166|
0000a6  a81f              ADD      r0,sp,#0x7c           ;436
0000a8  f7fffffe          BL       OSTimeGet
0000ac  f8991000          LDRB     r1,[r9,#0]            ;436  ; DEBUG_MODE
0000b0  0789              LSLS     r1,r1,#30             ;436
0000b2  d509              BPL      |L8.200|
0000b4  fbb0f1f7          UDIV     r1,r0,r7              ;436
0000b8  fb070211          MLS      r2,r7,r1,r0           ;436
0000bc  fbb2f2f8          UDIV     r2,r2,r8              ;436
0000c0  ab01              ADD      r3,sp,#4              ;436
0000c2  a047              ADR      r0,|L8.480|
0000c4  f7fffffe          BL       __2printf
                  |L8.200|
;;;440            l206_unlock();
;;;441            l206_lng = 0;
;;;442            l206_lat = 0;
;;;443            //need to reconnect position server
;;;444            l206_connect_location_server();
;;;445            return;
;;;446        }
;;;447        memset(lng_buf, 0x00, 20);
0000c8  2114              MOVS     r1,#0x14
0000ca  a81a              ADD      r0,sp,#0x68
0000cc  f7fffffe          BL       __aeabi_memclr4
;;;448        memset(lat_buf, 0x00, 20);
0000d0  2114              MOVS     r1,#0x14
0000d2  a815              ADD      r0,sp,#0x54
0000d4  f7fffffe          BL       __aeabi_memclr4
;;;449        index = 0;
0000d8  2200              MOVS     r2,#0
;;;450        i = 0;
0000da  4610              MOV      r0,r2
0000dc  ab1a              ADD      r3,sp,#0x68           ;404
0000de  4651              MOV      r1,r10                ;402
0000e0  e021              B        |L8.294|
                  |L8.226|
0000e2  e7ff              B        |L8.228|
                  |L8.228|
0000e4  a81f              ADD      r0,sp,#0x7c           ;438
0000e6  f7fffffe          BL       OSTimeGet
0000ea  f8991000          LDRB     r1,[r9,#0]            ;438  ; DEBUG_MODE
0000ee  07c9              LSLS     r1,r1,#31             ;438
0000f0  d009              BEQ      |L8.262|
0000f2  fbb0f1f7          UDIV     r1,r0,r7              ;438
0000f6  fb070211          MLS      r2,r7,r1,r0           ;438
0000fa  fbb2f2f8          UDIV     r2,r2,r8              ;438
0000fe  ab0b              ADD      r3,sp,#0x2c           ;438
000100  a03e              ADR      r0,|L8.508|
000102  f7fffffe          BL       __2printf
                  |L8.262|
000106  f885b002          STRB     r11,[r5,#2]           ;439
00010a  f7fffffe          BL       l206_unlock
00010e  606e              STR      r6,[r5,#4]            ;442  ; l206_lng
000110  60ae              STR      r6,[r5,#8]            ;444  ; l206_lat
000112  f7fffffe          BL       l206_connect_location_server
                  |L8.278|
;;;451        while(buf[i] != ',') {
;;;452            lng_buf[index ++] = buf[i++];
;;;453        }
;;;454        lng_buf[index] = '\0';
;;;455        i++;
;;;456        index = 0;
;;;457        while(buf[i] != '\0') {
;;;458            lat_buf[index ++] = buf[i++];
;;;459        }
;;;460        lat_buf[index] = '\0';
;;;461        logi("lng = %s, lat = %s", lng_buf, lat_buf);
;;;462        mState = STATE_IDLE;
;;;463        l206_unlock();
;;;464        lng = atof(lng_buf);
;;;465        lat = atof(lat_buf);
;;;466        //upload_location(lng * 1000000, lat * 1000000);
;;;467        l206_lng = lng * 100000;
;;;468        l206_lat = lat * 100000;
;;;469    }
000116  b023              ADD      sp,sp,#0x8c
000118  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.284|
00011c  1c40              ADDS     r0,r0,#1              ;452
00011e  549c              STRB     r4,[r3,r2]            ;452
000120  1c52              ADDS     r2,r2,#1              ;452
000122  b2c0              UXTB     r0,r0                 ;452
000124  b2d2              UXTB     r2,r2                 ;452
                  |L8.294|
000126  5c0c              LDRB     r4,[r1,r0]            ;451
000128  2c2c              CMP      r4,#0x2c              ;451
00012a  d1f7              BNE      |L8.284|
00012c  549e              STRB     r6,[r3,r2]            ;454
00012e  1c40              ADDS     r0,r0,#1              ;455
000130  b2c2              UXTB     r2,r0                 ;455
000132  2000              MOVS     r0,#0                 ;456
000134  ac15              ADD      r4,sp,#0x54           ;405
000136  e004              B        |L8.322|
                  |L8.312|
000138  1c52              ADDS     r2,r2,#1              ;458
00013a  5423              STRB     r3,[r4,r0]            ;458
00013c  1c40              ADDS     r0,r0,#1              ;458
00013e  b2d2              UXTB     r2,r2                 ;458
000140  b2c0              UXTB     r0,r0                 ;458
                  |L8.322|
000142  5c8b              LDRB     r3,[r1,r2]            ;457
000144  2b00              CMP      r3,#0                 ;457
000146  d1f7              BNE      |L8.312|
000148  5426              STRB     r6,[r4,r0]            ;460
00014a  a820              ADD      r0,sp,#0x80           ;461
00014c  f7fffffe          BL       OSTimeGet
000150  f8991000          LDRB     r1,[r9,#0]            ;461  ; DEBUG_MODE
000154  0789              LSLS     r1,r1,#30             ;461
000156  d50a              BPL      |L8.366|
000158  fbb0f1f7          UDIV     r1,r0,r7              ;461
00015c  fb070211          MLS      r2,r7,r1,r0           ;461
000160  fbb2f2f8          UDIV     r2,r2,r8              ;461
000164  ab1a              ADD      r3,sp,#0x68           ;461
000166  a031              ADR      r0,|L8.556|
000168  9400              STR      r4,[sp,#0]            ;461
00016a  f7fffffe          BL       __2printf
                  |L8.366|
00016e  f885b002          STRB     r11,[r5,#2]           ;462
000172  f7fffffe          BL       l206_unlock
000176  a81a              ADD      r0,sp,#0x68           ;464
000178  f7fffffe          BL       atof
00017c  4607              MOV      r7,r0                 ;464
00017e  4688              MOV      r8,r1                 ;464
000180  a815              ADD      r0,sp,#0x54           ;465
000182  f7fffffe          BL       atof
000186  f8df90c8          LDR      r9,|L8.592|
00018a  4604              MOV      r4,r0                 ;465
00018c  460e              MOV      r6,r1                 ;465
00018e  2200              MOVS     r2,#0                 ;467
000190  464b              MOV      r3,r9                 ;467
000192  4638              MOV      r0,r7                 ;467
000194  4641              MOV      r1,r8                 ;467
000196  f7fffffe          BL       __aeabi_dmul
00019a  f7fffffe          BL       __aeabi_d2uiz
00019e  6068              STR      r0,[r5,#4]            ;468  ; l206_lng
0001a0  2200              MOVS     r2,#0                 ;468
0001a2  464b              MOV      r3,r9                 ;468
0001a4  4620              MOV      r0,r4                 ;468
0001a6  4631              MOV      r1,r6                 ;468
0001a8  f7fffffe          BL       __aeabi_dmul
0001ac  f7fffffe          BL       __aeabi_d2uiz
0001b0  60a8              STR      r0,[r5,#8]            ;468  ; l206_lat
0001b2  e7b0              B        |L8.278|
;;;470    
                          ENDP

                  |L8.436|
                          DCD      ||.data||
                  |L8.440|
                          DCD      ||.bss||+0x100
                  |L8.444|
0001bc  41542b47          DCB      "AT+GTPOS=2\r\n",0
0001c0  54504f53
0001c4  3d320d0a
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L8.460|
0001cc  2b475450          DCB      "+GTPOS:",0
0001d0  4f533a00
                  |L8.468|
                          DCD      DEBUG_MODE
                  |L8.472|
0001d8  2000              DCB      " ",0
0001da  00                DCB      0
0001db  00                DCB      0
                  |L8.476|
0001dc  0d0a00            DCB      "\r\n",0
0001df  00                DCB      0
                  |L8.480|
0001e0  5b253035          DCB      "[%05d.%03d/I]: buf: %s\r\n",0
0001e4  642e2530
0001e8  33642f49
0001ec  5d3a2062
0001f0  75663a20
0001f4  25730d0a
0001f8  00      
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L8.508|
0001fc  5b253035          DCB      "[%05d.%03d/E]: cannot get position info, [%s]\r\n",0
000200  642e2530
000204  33642f45
000208  5d3a2063
00020c  616e6e6f
000210  74206765
000214  7420706f
000218  73697469
00021c  6f6e2069
000220  6e666f2c
000224  205b2573
000228  5d0d0a00
                  |L8.556|
00022c  5b253035          DCB      "[%05d.%03d/I]: lng = %s, lat = %s\r\n",0
000230  642e2530
000234  33642f49
000238  5d3a206c
00023c  6e67203d
000240  2025732c
000244  206c6174
000248  203d2025
00024c  730d0a00
                  |L8.592|
                          DCD      0x40f86a00

                          AREA ||i.l206_get_signal||, CODE, READONLY, ALIGN=2

                  l206_get_signal PROC
;;;477    
;;;478    uint8_t l206_get_signal(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;479    {
000002  b087              SUB      sp,sp,#0x1c
;;;480        uint8_t signal;
;;;481        uint8_t index = 0, i;
000004  2400              MOVS     r4,#0
;;;482        uint8_t recv;
;;;483        uint8_t rx_buf[20];
;;;484        bool ret;
;;;485        uint8_t *s, *p;
;;;486        uint8_t buf[4];
;;;487    
;;;488        l206_lock();
000006  f7fffffe          BL       l206_lock
;;;489        memset(rx_buf, 0x00, 20);
00000a  2114              MOVS     r1,#0x14
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memclr4
;;;490        mState = STATE_SIGNAL;
000012  4d26              LDR      r5,|L9.172|
000014  2003              MOVS     r0,#3
000016  70a8              STRB     r0,[r5,#2]
;;;491        rb_clear(&mRb);
000018  4825              LDR      r0,|L9.176|
00001a  f7fffffe          BL       rb_clear
;;;492        l206_write("AT+CSQ\r\n", 8);
00001e  2108              MOVS     r1,#8
000020  a024              ADR      r0,|L9.180|
000022  f7fffffe          BL       l206_write
;;;493    #if 1
;;;494        ret = l206_down(4);
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       l206_down
;;;495        if(ret == TRUE) {
00002c  2801              CMP      r0,#1
00002e  d016              BEQ      |L9.94|
;;;496            while(!rb_is_empty(&mRb)) {
;;;497                rb_get(&mRb, &recv, 1);
;;;498                rx_buf[index ++] = recv;
;;;499                l206_delay_ms(1);
;;;500                //logi("recv = %02x %c", recv, recv);
;;;501            }
;;;502            if(NULL != (s = strstr((const char *)rx_buf, "+CSQ:"))) {
;;;503                s = strstr((char *)(s), " ");
;;;504                s =s + 1;
;;;505                p = strstr((char *)(s), ",");
;;;506                if(NULL != s) {
;;;507                    i = 0;
;;;508                    while(s < p) {
;;;509                        buf[i++] = *(s++);
;;;510                    }
;;;511                    buf[i] = '\0';
;;;512                }
;;;513                signal = atoi(buf);
;;;514            }
;;;515        } else {
;;;516            signal = 0;
000030  f05f0600          MOVS.W   r6,#0
                  |L9.52|
;;;517        }
;;;518    #endif
;;;519        l206_unlock();
000034  f7fffffe          BL       l206_unlock
;;;520        mState = STATE_IDLE;
000038  2006              MOVS     r0,#6
00003a  70a8              STRB     r0,[r5,#2]
;;;521        return signal;
;;;522    }
00003c  b007              ADD      sp,sp,#0x1c
00003e  4630              MOV      r0,r6                 ;521
000040  bdf0              POP      {r4-r7,pc}
                  |L9.66|
000042  2201              MOVS     r2,#1                 ;497
000044  a905              ADD      r1,sp,#0x14           ;497
000046  481a              LDR      r0,|L9.176|
000048  f7fffffe          BL       rb_get
00004c  f89d0014          LDRB     r0,[sp,#0x14]         ;498
000050  5538              STRB     r0,[r7,r4]            ;498
000052  1c64              ADDS     r4,r4,#1              ;498
000054  b2e4              UXTB     r4,r4                 ;498
000056  2001              MOVS     r0,#1                 ;499
000058  f7fffffe          BL       l206_delay_ms
00005c  e000              B        |L9.96|
                  |L9.94|
00005e  466f              MOV      r7,sp                 ;483
                  |L9.96|
000060  4813              LDR      r0,|L9.176|
000062  f7fffffe          BL       rb_is_empty
000066  2800              CMP      r0,#0                 ;496
000068  d0eb              BEQ      |L9.66|
00006a  a115              ADR      r1,|L9.192|
00006c  4668              MOV      r0,sp                 ;502
00006e  f7fffffe          BL       strstr
000072  2800              CMP      r0,#0                 ;502
000074  d0de              BEQ      |L9.52|
000076  a114              ADR      r1,|L9.200|
000078  f7fffffe          BL       strstr
00007c  1c44              ADDS     r4,r0,#1              ;504
00007e  a113              ADR      r1,|L9.204|
000080  4620              MOV      r0,r4                 ;505
000082  f7fffffe          BL       strstr
000086  4601              MOV      r1,r0                 ;505
000088  b15c              CBZ      r4,|L9.162|
00008a  2000              MOVS     r0,#0                 ;507
00008c  aa06              ADD      r2,sp,#0x18           ;486
00008e  e004              B        |L9.154|
                  |L9.144|
000090  f8143b01          LDRB     r3,[r4],#1            ;509
000094  5413              STRB     r3,[r2,r0]            ;509
000096  1c40              ADDS     r0,r0,#1              ;509
000098  b2c0              UXTB     r0,r0                 ;509
                  |L9.154|
00009a  428c              CMP      r4,r1                 ;508
00009c  d3f8              BCC      |L9.144|
00009e  2100              MOVS     r1,#0                 ;511
0000a0  5411              STRB     r1,[r2,r0]            ;511
                  |L9.162|
0000a2  a806              ADD      r0,sp,#0x18           ;513
0000a4  f7fffffe          BL       atoi
0000a8  b2c6              UXTB     r6,r0                 ;513
0000aa  e7c3              B        |L9.52|
;;;523    
                          ENDP

                  |L9.172|
                          DCD      ||.data||
                  |L9.176|
                          DCD      ||.bss||+0x100
                  |L9.180|
0000b4  41542b43          DCB      "AT+CSQ\r\n",0
0000b8  53510d0a
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L9.192|
0000c0  2b435351          DCB      "+CSQ:",0
0000c4  3a00    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L9.200|
0000c8  2000              DCB      " ",0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L9.204|
0000cc  2c00              DCB      ",",0
0000ce  00                DCB      0
0000cf  00                DCB      0

                          AREA ||i.l206_init||, CODE, READONLY, ALIGN=2

                  l206_init PROC
;;;551    
;;;552    void l206_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;553    {
000002  b085              SUB      sp,sp,#0x14
;;;554        u8 data;
;;;555        GPIO_InitTypeDef GPIO_InitStructure;
;;;556        USART_InitTypeDef USART_InitStructure;
;;;557        if (L206_USARTAPB == APB1)
;;;558        {
;;;559            RCC_APB2PeriphClockCmd(RCC_APBxPeriph_L206_USART_IO | RCC_APB2Periph_AFIO,ENABLE);
000004  2101              MOVS     r1,#1
000006  2009              MOVS     r0,#9
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;560            RCC_APB1PeriphClockCmd(RCC_APBxPeriph_L206_USART,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0488              LSLS     r0,r1,#18
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;561        }
;;;562        else
;;;563        {
;;;564            RCC_APB2PeriphClockCmd(RCC_APBxPeriph_L206_USART_IO | RCC_APBxPeriph_L206_USART | RCC_APB2Periph_AFIO,ENABLE);
;;;565        }
;;;566        if (L206_PinRemap == ENABLE)
;;;567        {
;;;568            GPIO_PinRemapConfig(GPIO_Remap_USART2,ENABLE);
;;;569        }
;;;570        GPIO_InitStructure.GPIO_Pin = L206_USART_TXD;
000014  f44f6080          MOV      r0,#0x400
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;571        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;572        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;573        GPIO_Init(L206_USART_IO,&GPIO_InitStructure);
000022  4d25              LDR      r5,|L10.184|
000024  2403              MOVS     r4,#3                 ;572
000026  f88d4012          STRB     r4,[sp,#0x12]         ;572
00002a  a904              ADD      r1,sp,#0x10
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       GPIO_Init
;;;574    
;;;575        GPIO_InitStructure.GPIO_Pin = L206_USART_RXD;
000032  14e8              ASRS     r0,r5,#19
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;576        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;577        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  f88d4012          STRB     r4,[sp,#0x12]
;;;578        GPIO_Init(L206_USART_IO,&GPIO_InitStructure);
000042  a904              ADD      r1,sp,#0x10
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       GPIO_Init
;;;579    
;;;580        USART_InitStructure.USART_BaudRate = 115200;
;;;581        USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004a  2400              MOVS     r4,#0
00004c  f44f30e1          MOV      r0,#0x1c200           ;580
000050  9000              STR      r0,[sp,#0]
;;;582        USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;583        USART_InitStructure.USART_Parity = USART_Parity_No;
000052  f8ad4008          STRH     r4,[sp,#8]
;;;584        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None ;
;;;585        USART_InitStructure.USART_Mode = USART_Mode_Rx|USART_Mode_Tx;
000056  200c              MOVS     r0,#0xc
;;;586        USART_Init(L206_USART,&USART_InitStructure);
000058  4d18              LDR      r5,|L10.188|
00005a  f8ad4004          STRH     r4,[sp,#4]            ;581
00005e  f8ad000a          STRH     r0,[sp,#0xa]          ;585
000062  f8ad4006          STRH     r4,[sp,#6]            ;582
000066  f8ad400c          STRH     r4,[sp,#0xc]          ;584
00006a  4669              MOV      r1,sp
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       USART_Init
;;;587        data = data;
;;;588        data = L206_USART->DR;
000072  1d28              ADDS     r0,r5,#4
000074  8800              LDRH     r0,[r0,#0]
;;;589        data = L206_USART->SR;
000076  8828              LDRH     r0,[r5,#0]
;;;590        USART_ITConfig(L206_USART,USART_IT_RXNE,ENABLE);
000078  2201              MOVS     r2,#1
00007a  f2405125          MOV      r1,#0x525
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       USART_ITConfig
;;;591        USART_Cmd(L206_USART,ENABLE);
000084  2101              MOVS     r1,#1
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       USART_Cmd
;;;592        //init var
;;;593        rb_init(&mRb, &mRingBuffer[0], L206_RB_MAX_SIZE);
00008c  490c              LDR      r1,|L10.192|
00008e  15aa              ASRS     r2,r5,#22
000090  f5017080          ADD      r0,r1,#0x100
000094  f7fffffe          BL       rb_init
;;;594        mState = STATE_UNINITED;
000098  480a              LDR      r0,|L10.196|
;;;595    
;;;596        BSP_IntVectSet(BSP_INT_ID_USART3, (CPU_FNCT_VOID)l206_recv);
00009a  490b              LDR      r1,|L10.200|
00009c  7084              STRB     r4,[r0,#2]            ;594
00009e  2027              MOVS     r0,#0x27
0000a0  f7fffffe          BL       BSP_IntVectSet
;;;597        BSP_IntPrioSet(BSP_INT_ID_USART3, 1);
0000a4  2101              MOVS     r1,#1
0000a6  2027              MOVS     r0,#0x27
0000a8  f7fffffe          BL       BSP_IntPrioSet
;;;598        BSP_IntEn(BSP_INT_ID_USART3);
0000ac  2027              MOVS     r0,#0x27
0000ae  f7fffffe          BL       BSP_IntEn
;;;599    }
0000b2  b005              ADD      sp,sp,#0x14
0000b4  bd30              POP      {r4,r5,pc}
;;;600    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L10.184|
                          DCD      0x40010c00
                  |L10.188|
                          DCD      0x40004800
                  |L10.192|
                          DCD      ||.bss||
                  |L10.196|
                          DCD      ||.data||
                  |L10.200|
                          DCD      l206_recv

                          AREA ||i.l206_is_connected||, CODE, READONLY, ALIGN=2

                  l206_is_connected PROC
;;;47     
;;;48     bool l206_is_connected(void)
000000  4801              LDR      r0,|L11.8|
;;;49     {
;;;50         return mIsConnected;
000002  7800              LDRB     r0,[r0,#0]  ; mIsConnected
;;;51     }
000004  4770              BX       lr
;;;52     
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||

                          AREA ||i.l206_lock||, CODE, READONLY, ALIGN=2

                  l206_lock PROC
;;;611    
;;;612    void l206_lock(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;613    {
;;;614        OS_ERR err;
;;;615    
;;;616        //logi("+++%s+++", __func__);
;;;617        OSMutexPend(&mMutex, 0, OS_OPT_PEND_BLOCKING, 0, &err);
000002  a801              ADD      r0,sp,#4
000004  2300              MOVS     r3,#0
000006  9000              STR      r0,[sp,#0]
000008  461a              MOV      r2,r3
00000a  4619              MOV      r1,r3
00000c  4801              LDR      r0,|L12.20|
00000e  f7fffffe          BL       OSMutexPend
;;;618    }
000012  bd1c              POP      {r2-r4,pc}
;;;619    
                          ENDP

                  |L12.20|
                          DCD      ||.bss||+0x134

                          AREA ||i.l206_powerdown||, CODE, READONLY, ALIGN=1

                  l206_powerdown PROC
;;;118    
;;;119    void l206_powerdown(void)
000000  f7ffbffe          B.W      l206_powerup
;;;120    {
;;;121        l206_powerup();
;;;122    }
;;;123    
                          ENDP


                          AREA ||i.l206_powerup||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  l206_powerup PROC
;;;99     
;;;100    void l206_powerup(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;101    {
;;;102        GPIO_InitTypeDef GPIO_InitStructure;
;;;103    
;;;104        logi("%s", __func__);
000002  a801              ADD      r0,sp,#4
000004  f7fffffe          BL       OSTimeGet
000008  491a              LDR      r1,|L14.116|
00000a  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00000c  0789              LSLS     r1,r1,#30
00000e  d50c              BPL      |L14.42|
000010  f2413288          MOV      r2,#0x1388
000014  fbb0f1f2          UDIV     r1,r0,r2
000018  fb020011          MLS      r0,r2,r1,r0
00001c  2205              MOVS     r2,#5
00001e  fbb0f2f2          UDIV     r2,r0,r2
000022  4b15              LDR      r3,|L14.120|
000024  a015              ADR      r0,|L14.124|
000026  f7fffffe          BL       __2printf
                  |L14.42|
;;;105        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  2008              MOVS     r0,#8
00002e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;106    
;;;107        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000032  2001              MOVS     r0,#1
000034  f8ad0000          STRH     r0,[sp,#0]
;;;108        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000038  2010              MOVS     r0,#0x10
00003a  f88d0003          STRB     r0,[sp,#3]
;;;109        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2003              MOVS     r0,#3
;;;110        GPIO_Init(GPIOB, &GPIO_InitStructure);
000040  4c13              LDR      r4,|L14.144|
000042  f88d0002          STRB     r0,[sp,#2]            ;109
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       GPIO_Init
;;;111    
;;;112        GPIO_ResetBits(GPIOB, GPIO_Pin_0);
00004e  2101              MOVS     r1,#1
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       GPIO_ResetBits
;;;113        l206_delay(4);
000056  2004              MOVS     r0,#4
000058  f7fffffe          BL       l206_delay
;;;114        GPIO_SetBits(GPIOB, GPIO_Pin_0);
00005c  2101              MOVS     r1,#1
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       GPIO_SetBits
;;;115        l206_delay(4);
000064  2004              MOVS     r0,#4
000066  f7fffffe          BL       l206_delay
;;;116        GPIO_ResetBits(GPIOB, GPIO_Pin_0);
00006a  2101              MOVS     r1,#1
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       GPIO_ResetBits
;;;117    }
000072  bd1c              POP      {r2-r4,pc}
;;;118    
                          ENDP

                  |L14.116|
                          DCD      DEBUG_MODE
                  |L14.120|
                          DCD      ||.constdata||+0xb
                  |L14.124|
00007c  5b253035          DCB      "[%05d.%03d/I]: %s\r\n",0
000080  642e2530
000084  33642f49
000088  5d3a2025
00008c  730d0a00
                  |L14.144|
                          DCD      0x40010c00

                          AREA ||i.l206_recv||, CODE, READONLY, ALIGN=2

                  l206_recv PROC
;;;230    
;;;231    void l206_recv(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;232    {
;;;233        static bool json_start = FALSE;
;;;234        uint8_t data;
;;;235        static uint8_t buf[4];
;;;236        OS_ERR err;
;;;237    
;;;238        if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
000002  4c34              LDR      r4,|L15.212|
000004  f2405125          MOV      r1,#0x525
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d022              BEQ      |L15.88|
;;;239            data =USART_ReceiveData(USART3);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       USART_ReceiveData
;;;240            //printf("%c", data);
;;;241            buf[0] = buf[1];
000018  4c2f              LDR      r4,|L15.216|
00001a  f88d0000          STRB     r0,[sp,#0]            ;239
;;;242            buf[1] = buf[2];
;;;243            buf[2] = buf[3];
;;;244            buf[3] = data;
;;;245    
;;;246            switch(mState) {
00001e  f1a4050c          SUB      r5,r4,#0xc
000022  7861              LDRB     r1,[r4,#1]            ;241  ; buf
000024  7021              STRB     r1,[r4,#0]            ;241
000026  78a1              LDRB     r1,[r4,#2]            ;242  ; buf
000028  7061              STRB     r1,[r4,#1]            ;242
00002a  78e1              LDRB     r1,[r4,#3]            ;243  ; buf
00002c  70a1              STRB     r1,[r4,#2]            ;243
00002e  70e0              STRB     r0,[r4,#3]            ;244
000030  78a8              LDRB     r0,[r5,#2]  ; mState
000032  2809              CMP      r0,#9
000034  d210              BCS      |L15.88|
000036  e8dff000          TBB      [pc,r0]
00003a  0f10              DCB      0x0f,0x10
00003c  0f05100f          DCB      0x0f,0x05,0x10,0x0f
000040  260f1000          DCB      0x26,0x0f,0x10,0x00
;;;247                case STATE_UNINITED:
;;;248                    break;
;;;249                case STATE_INITED:
;;;250                    //printf("%c", data);
;;;251                    break;
;;;252                case STATE_CMD_BUSY:
;;;253                    break;
;;;254                case STATE_SIGNAL:
;;;255                    l206_lock();
000044  f7fffffe          BL       l206_lock
;;;256    //                printf("%c", data);
;;;257                    rb_put(&mRb, &data, 1);
000048  2201              MOVS     r2,#1
00004a  4669              MOV      r1,sp
00004c  4823              LDR      r0,|L15.220|
00004e  f7fffffe          BL       rb_put
;;;258                    if(buf[2] == '\r' &&
000052  e00f              B        |L15.116|
                  |L15.84|
;;;259                            buf[3] == '\n') {
;;;260                        l206_up();
;;;261                    }
;;;262    
;;;263                    l206_unlock();
000054  f7fffffe          BL       l206_unlock
                  |L15.88|
;;;264                    break;
;;;265                case STATE_POWERUP:
;;;266                case STATE_CONNECTING:
;;;267                case STATE_SENDING:
;;;268                    l206_lock();
;;;269                    rb_put(&mRb, &data, 1);
;;;270                    if(buf[0] == 'O' &&
;;;271                            buf[1] == 'K' &&
;;;272                            buf[2] == '\r' &&
;;;273                            buf[3] == '\n') {
;;;274                        l206_up();
;;;275                    }
;;;276                    l206_unlock();
;;;277                    break;
;;;278                case STATE_IDLE:
;;;279                    l206_lock();
;;;280                    if(data == '{' && json_start == FALSE) {
;;;281                        json_start = TRUE;
;;;282                        rb_clear(&mRb);
;;;283                        rb_put(&mRb, &data, 1);
;;;284                    } else if(data == '}') {
;;;285                        rb_put(&mRb, &data, 1);
;;;286                        json_start = FALSE;
;;;287                        //TO FIX
;;;288                        OSTaskSemPost(&TransmitCallbackTaskTCB,
;;;289                                OS_OPT_POST_NONE, &err);
;;;290                        //                    logi("#####post task sem");
;;;291                    } else {
;;;292                        if(json_start) {
;;;293                            rb_put(&mRb, &data, 1);
;;;294                        }
;;;295                    }
;;;296                    l206_unlock();
;;;297                    break;
;;;298                default:
;;;299                    break;
;;;300            }
;;;301        }
;;;302    }
000058  bd7c              POP      {r2-r6,pc}
00005a  f7fffffe          BL       l206_lock
00005e  2201              MOVS     r2,#1                 ;269
000060  4669              MOV      r1,sp                 ;269
000062  481e              LDR      r0,|L15.220|
000064  f7fffffe          BL       rb_put
000068  7820              LDRB     r0,[r4,#0]            ;270  ; buf
00006a  284f              CMP      r0,#0x4f              ;270
00006c  d1f2              BNE      |L15.84|
00006e  7860              LDRB     r0,[r4,#1]            ;271  ; buf
000070  284b              CMP      r0,#0x4b              ;271
000072  d1ef              BNE      |L15.84|
                  |L15.116|
000074  78a0              LDRB     r0,[r4,#2]            ;272  ; buf
000076  280d              CMP      r0,#0xd               ;272
000078  d1ec              BNE      |L15.84|
00007a  78e0              LDRB     r0,[r4,#3]            ;273  ; buf
00007c  280a              CMP      r0,#0xa               ;273
00007e  d1e9              BNE      |L15.84|
000080  f7fffffe          BL       l206_up
000084  e7e6              B        |L15.84|
000086  f7fffffe          BL       l206_lock
00008a  f89d0000          LDRB     r0,[sp,#0]            ;280
00008e  287b              CMP      r0,#0x7b              ;280
000090  d00a              BEQ      |L15.168|
000092  287d              CMP      r0,#0x7d              ;284
000094  d011              BEQ      |L15.186|
000096  7868              LDRB     r0,[r5,#1]            ;292  ; json_start
000098  2800              CMP      r0,#0                 ;292
00009a  d0db              BEQ      |L15.84|
                  |L15.156|
00009c  2201              MOVS     r2,#1                 ;293
00009e  4669              MOV      r1,sp                 ;293
0000a0  480e              LDR      r0,|L15.220|
0000a2  f7fffffe          BL       rb_put
0000a6  e7d5              B        |L15.84|
                  |L15.168|
0000a8  7868              LDRB     r0,[r5,#1]            ;280  ; json_start
0000aa  2800              CMP      r0,#0                 ;280
0000ac  d1f6              BNE      |L15.156|
0000ae  2001              MOVS     r0,#1                 ;281
0000b0  7068              STRB     r0,[r5,#1]            ;281
0000b2  480a              LDR      r0,|L15.220|
0000b4  f7fffffe          BL       rb_clear
0000b8  e7f0              B        |L15.156|
                  |L15.186|
0000ba  2201              MOVS     r2,#1                 ;285
0000bc  4669              MOV      r1,sp                 ;285
0000be  4807              LDR      r0,|L15.220|
0000c0  f7fffffe          BL       rb_put
0000c4  2000              MOVS     r0,#0                 ;286
0000c6  7068              STRB     r0,[r5,#1]            ;286
0000c8  4601              MOV      r1,r0                 ;288
0000ca  aa01              ADD      r2,sp,#4              ;288
0000cc  4804              LDR      r0,|L15.224|
0000ce  f7fffffe          BL       OSTaskSemPost
0000d2  e7bf              B        |L15.84|
;;;303    
                          ENDP

                  |L15.212|
                          DCD      0x40004800
                  |L15.216|
                          DCD      ||.data||+0xc
                  |L15.220|
                          DCD      ||.bss||+0x100
                  |L15.224|
                          DCD      TransmitCallbackTaskTCB

                          AREA ||i.l206_reset||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  l206_reset PROC
;;;69     
;;;70     void l206_reset(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;71     {
;;;72         GPIO_InitTypeDef GPIO_InitStructure;
;;;73     
;;;74         logi("%s", __func__);
000002  a801              ADD      r0,sp,#4
000004  f7fffffe          BL       OSTimeGet
000008  491c              LDR      r1,|L16.124|
00000a  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00000c  0789              LSLS     r1,r1,#30
00000e  d50c              BPL      |L16.42|
000010  f2413288          MOV      r2,#0x1388
000014  fbb0f1f2          UDIV     r1,r0,r2
000018  fb020011          MLS      r0,r2,r1,r0
00001c  2205              MOVS     r2,#5
00001e  fbb0f2f2          UDIV     r2,r0,r2
000022  4b17              LDR      r3,|L16.128|
000024  a017              ADR      r0,|L16.132|
000026  f7fffffe          BL       __2printf
                  |L16.42|
;;;75         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  2010              MOVS     r0,#0x10
00002e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;76     
;;;77         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
000032  f44f4400          MOV      r4,#0x8000
000036  f8ad4000          STRH     r4,[sp,#0]
;;;78         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00003a  2010              MOVS     r0,#0x10
00003c  f88d0003          STRB     r0,[sp,#3]
;;;79         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000040  2003              MOVS     r0,#3
;;;80         GPIO_Init(GPIOC, &GPIO_InitStructure);
000042  4d15              LDR      r5,|L16.152|
000044  f88d0002          STRB     r0,[sp,#2]            ;79
000048  4669              MOV      r1,sp
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       GPIO_Init
;;;81     
;;;82     #if 1
;;;83         GPIO_SetBits(GPIOC, GPIO_Pin_15);
000050  4621              MOV      r1,r4
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       GPIO_SetBits
;;;84         l206_delay(2);
000058  2002              MOVS     r0,#2
00005a  f7fffffe          BL       l206_delay
;;;85         GPIO_ResetBits(GPIOC, GPIO_Pin_15);
00005e  4621              MOV      r1,r4
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       GPIO_ResetBits
;;;86         l206_delay(1);
000066  2001              MOVS     r0,#1
000068  f7fffffe          BL       l206_delay
;;;87         GPIO_SetBits(GPIOC, GPIO_Pin_15);
00006c  4621              MOV      r1,r4
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       GPIO_SetBits
;;;88         l206_delay(2);
000074  2002              MOVS     r0,#2
000076  f7fffffe          BL       l206_delay
;;;89     #endif
;;;90     #if 0
;;;91         GPIO_ResetBits(GPIOC, GPIO_Pin_15);
;;;92         l206_delay(2);
;;;93         GPIO_SetBits(GPIOC, GPIO_Pin_15);
;;;94         l206_delay_ms(500);
;;;95         GPIO_ResetBits(GPIOC, GPIO_Pin_15);
;;;96         l206_delay(2);
;;;97     #endif
;;;98     }
00007a  bd7c              POP      {r2-r6,pc}
;;;99     
                          ENDP

                  |L16.124|
                          DCD      DEBUG_MODE
                  |L16.128|
                          DCD      ||.constdata||
                  |L16.132|
000084  5b253035          DCB      "[%05d.%03d/I]: %s\r\n",0
000088  642e2530
00008c  33642f49
000090  5d3a2025
000094  730d0a00
                  |L16.152|
                          DCD      0x40011000

                          AREA ||i.l206_send||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_return_value
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  l206_send PROC
;;;523    
;;;524    void l206_send(uint8_t *buf, uint32_t len)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;525    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
;;;526        OS_ERR err;
;;;527        uint16_t index = 0, i;
;;;528        uint8_t *send_buf;
;;;529    
;;;530        logi("%s: %s", __func__, buf);
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       OSTimeGet
00000e  f8dfa0d4          LDR      r10,|L17.228|
000012  f2413988          MOV      r9,#0x1388
000016  f04f0b05          MOV      r11,#5
00001a  f89a1000          LDRB     r1,[r10,#0]  ; DEBUG_MODE
00001e  0789              LSLS     r1,r1,#30
000020  d50b              BPL      |L17.58|
000022  fbb0f1f9          UDIV     r1,r0,r9
000026  fb090211          MLS      r2,r9,r1,r0
00002a  fbb2f2fb          UDIV     r2,r2,r11
00002e  4b2e              LDR      r3,|L17.232|
000030  a02e              ADR      r0,|L17.236|
000032  f8cd8000          STR      r8,[sp,#0]
000036  f7fffffe          BL       __2printf
                  |L17.58|
;;;531        OSMutexPend(&mSendMutex, 0, OS_OPT_PEND_BLOCKING, 0, &err);
00003a  a801              ADD      r0,sp,#4
00003c  2300              MOVS     r3,#0
00003e  9000              STR      r0,[sp,#0]
000040  461a              MOV      r2,r3
000042  4619              MOV      r1,r3
000044  482f              LDR      r0,|L17.260|
000046  f7fffffe          BL       OSMutexPend
;;;532        l206_lock();
00004a  f7fffffe          BL       l206_lock
;;;533        mState = STATE_SENDING;
00004e  482e              LDR      r0,|L17.264|
000050  2108              MOVS     r1,#8
000052  7081              STRB     r1,[r0,#2]
;;;534        send_buf = (uint8_t *)malloc(13 + 2 * len);
000054  200d              MOVS     r0,#0xd
000056  eb000746          ADD      r7,r0,r6,LSL #1
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       malloc
;;;535        index = snprintf(send_buf, 1024, "AT+ZIPSEND=2,");
000060  a22a              ADR      r2,|L17.268|
000062  f44f6180          MOV      r1,#0x400
000066  9000              STR      r0,[sp,#0]
000068  f7fffffe          BL       __2snprintf
00006c  b285              UXTH     r5,r0
;;;536        for(i = 0; i < len; i++) {
00006e  2400              MOVS     r4,#0
000070  e00d              B        |L17.142|
;;;537            index += snprintf(send_buf + index, 1024, "%02x", buf[i]);
000072  bf00              NOP      
                  |L17.116|
000074  9800              LDR      r0,[sp,#0]
000076  f8183004          LDRB     r3,[r8,r4]
00007a  4428              ADD      r0,r0,r5
00007c  a227              ADR      r2,|L17.284|
00007e  f44f6180          MOV      r1,#0x400
000082  f7fffffe          BL       __2snprintf
000086  4428              ADD      r0,r0,r5
000088  1c64              ADDS     r4,r4,#1              ;536
00008a  b285              UXTH     r5,r0
00008c  b2a4              UXTH     r4,r4                 ;536
                  |L17.142|
00008e  42b4              CMP      r4,r6                 ;536
000090  d3f0              BCC      |L17.116|
;;;538        }
;;;539        l206_write(send_buf, 13+2*len);
000092  b2b9              UXTH     r1,r7
000094  9800              LDR      r0,[sp,#0]
000096  f7fffffe          BL       l206_write
;;;540        if(l206_send_cmd("\r\n", "\r\nSEND OK") == TRUE) {
00009a  a122              ADR      r1,|L17.292|
00009c  a024              ADR      r0,|L17.304|
00009e  f7fffffe          BL       l206_send_cmd
0000a2  2801              CMP      r0,#1
0000a4  d00f              BEQ      |L17.198|
;;;541            //logi("send ok");
;;;542        } else {
;;;543            logi("send failed");
0000a6  a802              ADD      r0,sp,#8
0000a8  f7fffffe          BL       OSTimeGet
0000ac  f89a1000          LDRB     r1,[r10,#0]  ; DEBUG_MODE
0000b0  0789              LSLS     r1,r1,#30
0000b2  d508              BPL      |L17.198|
0000b4  fbb0f1f9          UDIV     r1,r0,r9
0000b8  fb090211          MLS      r2,r9,r1,r0
0000bc  fbb2f2fb          UDIV     r2,r2,r11
0000c0  a01c              ADR      r0,|L17.308|
0000c2  f7fffffe          BL       __2printf
                  |L17.198|
;;;544        }
;;;545        mState = STATE_IDLE;
0000c6  4810              LDR      r0,|L17.264|
0000c8  2106              MOVS     r1,#6
0000ca  7081              STRB     r1,[r0,#2]
;;;546        free(send_buf);
0000cc  9800              LDR      r0,[sp,#0]
0000ce  f7fffffe          BL       free
;;;547        l206_unlock();
0000d2  f7fffffe          BL       l206_unlock
;;;548        OSMutexPost(&mSendMutex, OS_OPT_POST_NONE, &err);
0000d6  aa01              ADD      r2,sp,#4
0000d8  2100              MOVS     r1,#0
0000da  480a              LDR      r0,|L17.260|
0000dc  f7fffffe          BL       OSMutexPost
;;;549    }
0000e0  e8bd8ffe          POP      {r1-r11,pc}
;;;550    
                          ENDP

                  |L17.228|
                          DCD      DEBUG_MODE
                  |L17.232|
                          DCD      ||.constdata||+0x4d
                  |L17.236|
0000ec  5b253035          DCB      "[%05d.%03d/I]: %s: %s\r\n",0
0000f0  642e2530
0000f4  33642f49
0000f8  5d3a2025
0000fc  733a2025
000100  730d0a00
                  |L17.260|
                          DCD      ||.bss||+0x160
                  |L17.264|
                          DCD      ||.data||
                  |L17.268|
00010c  41542b5a          DCB      "AT+ZIPSEND=2,",0
000110  49505345
000114  4e443d32
000118  2c00    
00011a  00                DCB      0
00011b  00                DCB      0
                  |L17.284|
00011c  25303278          DCB      "%02x",0
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
                  |L17.292|
000124  0d0a5345          DCB      "\r\nSEND OK",0
000128  4e44204f
00012c  4b00    
00012e  00                DCB      0
00012f  00                DCB      0
                  |L17.304|
000130  0d0a00            DCB      "\r\n",0
000133  00                DCB      0
                  |L17.308|
000134  5b253035          DCB      "[%05d.%03d/I]: send failed\r\n",0
000138  642e2530
00013c  33642f49
000140  5d3a2073
000144  656e6420
000148  6661696c
00014c  65640d0a
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0

                          AREA ||i.l206_send_cmd||, CODE, READONLY, ALIGN=2

                  l206_send_cmd PROC
;;;303    
;;;304    bool l206_send_cmd(const char *cmd, const char *rsp)
000000  b5f0              PUSH     {r4-r7,lr}
;;;305    {
000002  4604              MOV      r4,r0
000004  b087              SUB      sp,sp,#0x1c
000006  460d              MOV      r5,r1
;;;306        uint16_t rspLen;
;;;307        uint8_t i, index = 0;
000008  2700              MOVS     r7,#0
;;;308        uint8_t recv;
;;;309        uint8_t rx_buf[20];
;;;310        bool ret;
;;;311    
;;;312        rspLen = strlen(rsp);
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       strlen
000010  b286              UXTH     r6,r0
;;;313        l206_lock();
000012  f7fffffe          BL       l206_lock
;;;314        rb_clear(&mRb);
000016  4819              LDR      r0,|L18.124|
000018  f7fffffe          BL       rb_clear
;;;315        l206_write((uint8_t *)cmd, strlen(cmd));
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       strlen
000022  b281              UXTH     r1,r0
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       l206_write
;;;316        ret = l206_down(4);
00002a  2004              MOVS     r0,#4
00002c  f7fffffe          BL       l206_down
000030  466c              MOV      r4,sp                 ;309
;;;317        if(ret == TRUE) {
000032  2801              CMP      r0,#1
000034  d00a              BEQ      |L18.76|
000036  e01d              B        |L18.116|
                  |L18.56|
;;;318            while(!rb_is_empty(&mRb)) {
;;;319                rb_get(&mRb, &recv, 1);
000038  2201              MOVS     r2,#1
00003a  a905              ADD      r1,sp,#0x14
00003c  480f              LDR      r0,|L18.124|
00003e  f7fffffe          BL       rb_get
;;;320                rx_buf[index ++] = recv;
000042  f89d0014          LDRB     r0,[sp,#0x14]
000046  55e0              STRB     r0,[r4,r7]
000048  1c7f              ADDS     r7,r7,#1
00004a  b2ff              UXTB     r7,r7
                  |L18.76|
00004c  480b              LDR      r0,|L18.124|
00004e  f7fffffe          BL       rb_is_empty
000052  2800              CMP      r0,#0                 ;318
000054  d0f0              BEQ      |L18.56|
;;;321                //printf("RECV = %02x, %c\r\n", recv, recv);
;;;322            }
;;;323            //logi("rx_buf = %s", rx_buf);
;;;324            for(i = 0; i < rspLen; i++) {
000056  2200              MOVS     r2,#0
000058  e005              B        |L18.102|
                  |L18.90|
;;;325                if(rsp[i] != rx_buf[i]) {
00005a  5ca8              LDRB     r0,[r5,r2]
00005c  5ca1              LDRB     r1,[r4,r2]
00005e  4288              CMP      r0,r1
000060  d108              BNE      |L18.116|
000062  1c52              ADDS     r2,r2,#1              ;324
000064  b2d2              UXTB     r2,r2                 ;324
                  |L18.102|
000066  42b2              CMP      r2,r6                 ;324
000068  d3f7              BCC      |L18.90|
;;;326                    l206_unlock();
;;;327                    return FALSE;
;;;328                }
;;;329            }
;;;330            l206_unlock();
00006a  f7fffffe          BL       l206_unlock
;;;331            return TRUE;
00006e  2001              MOVS     r0,#1
                  |L18.112|
;;;332        } else {
;;;333            l206_unlock();
;;;334            return FALSE;
;;;335        }
;;;336    }
000070  b007              ADD      sp,sp,#0x1c
000072  bdf0              POP      {r4-r7,pc}
                  |L18.116|
000074  f7fffffe          BL       l206_unlock
000078  2000              MOVS     r0,#0                 ;334
00007a  e7f9              B        |L18.112|
;;;337    
                          ENDP

                  |L18.124|
                          DCD      ||.bss||+0x100

                          AREA ||i.l206_set_connected||, CODE, READONLY, ALIGN=2

                  l206_set_connected PROC
;;;52     
;;;53     void l206_set_connected(bool connected)
000000  4901              LDR      r1,|L19.8|
;;;54     {
;;;55         mIsConnected = connected;
000002  7008              STRB     r0,[r1,#0]
;;;56     }
000004  4770              BX       lr
;;;57     
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      ||.data||

                          AREA ||i.l206_setup||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  l206_setup PROC
;;;123    
;;;124    bool l206_setup(bool reboot)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;125    {
;;;126        bool ret;
;;;127        OS_ERR err;
;;;128        bool connect_done = FALSE;
000004  f04f0800          MOV      r8,#0
;;;129        uint16_t retry;
;;;130        uint8_t i;
;;;131    
;;;132        retry = 0;
;;;133        if(!reboot) {
;;;134            //init for ucos
;;;135            OSSemCreate(
;;;136                    (OS_SEM *) &mWait,
;;;137                    (CPU_CHAR *)"L206_WAIT",
;;;138                    (OS_SEM_CTR)0,
;;;139                    (OS_ERR *)&err
;;;140                    );
;;;141            OSMutexCreate(
;;;142                    (OS_MUTEX *)&mMutex,
;;;143                    (CPU_CHAR *)"L206_MUTEX",
;;;144                    &err
;;;145                    );
;;;146            OSMutexCreate(
;;;147                    (OS_MUTEX *)&mSendMutex,
;;;148                    (CPU_CHAR *)"L206_SEND_MUTEX",
;;;149                    &err
;;;150                    );
;;;151        }
;;;152    
;;;153        mIsConnected  = FALSE;
000008  4da0              LDR      r5,|L20.652|
00000a  4647              MOV      r7,r8                 ;132
00000c  b988              CBNZ     r0,|L20.50|
00000e  ab01              ADD      r3,sp,#4              ;135
000010  2200              MOVS     r2,#0                 ;135
000012  a19f              ADR      r1,|L20.656|
000014  48a1              LDR      r0,|L20.668|
000016  f7fffffe          BL       OSSemCreate
00001a  48a0              LDR      r0,|L20.668|
00001c  aa01              ADD      r2,sp,#4              ;141
00001e  a1a0              ADR      r1,|L20.672|
000020  3028              ADDS     r0,r0,#0x28           ;141
000022  f7fffffe          BL       OSMutexCreate
000026  489d              LDR      r0,|L20.668|
000028  aa01              ADD      r2,sp,#4              ;146
00002a  a1a0              ADR      r1,|L20.684|
00002c  3054              ADDS     r0,r0,#0x54           ;146
00002e  f7fffffe          BL       OSMutexCreate
                  |L20.50|
000032  2000              MOVS     r0,#0
;;;154        while(!connect_done) {
;;;155            switch(mState) {
;;;156                case STATE_UNINITED:
;;;157                    logi("%s: STATE_UNINITED", __func__);
;;;158                    l206_reset();
;;;159                    l206_powerup();
;;;160                    l206_delay(10);
;;;161    
;;;162                    mState = STATE_POWERUP;
;;;163                    if(l206_send_cmd("AT\r\n", "AT") == TRUE) {
;;;164                        mState = STATE_INITED;
;;;165                        logi("powerup done");
;;;166                    } else {
;;;167                        mState = STATE_UNINITED;
;;;168                        loge("powerup failed");
;;;169                    }
;;;170                    break;
;;;171                case STATE_INITED:
;;;172                    logi("%s: STATE_INITED", __func__);
;;;173                    for(i = 0; i < L206_CMD_SIZE; i++) {
;;;174                        l206_write((uint8_t *)mCmds[i].cmd,
000034  4e95              LDR      r6,|L20.652|
000036  f8dfb284          LDR      r11,|L20.700|
00003a  7028              STRB     r0,[r5,#0]            ;153
00003c  3610              ADDS     r6,r6,#0x10
00003e  f04f0905          MOV      r9,#5                 ;155
000042  f2413a88          MOV      r10,#0x1388           ;157
                  |L20.70|
000046  78a8              LDRB     r0,[r5,#2]            ;155  ; mState
000048  b130              CBZ      r0,|L20.88|
00004a  2802              CMP      r0,#2                 ;155
00004c  d047              BEQ      |L20.222|
00004e  2804              CMP      r0,#4                 ;155
000050  d07c              BEQ      |L20.332|
000052  2805              CMP      r0,#5                 ;155
000054  d132              BNE      |L20.188|
000056  e0ce              B        |L20.502|
                  |L20.88|
000058  4668              MOV      r0,sp                 ;157
00005a  f7fffffe          BL       OSTimeGet
00005e  f89b1000          LDRB     r1,[r11,#0]           ;157  ; DEBUG_MODE
000062  465c              MOV      r4,r11                ;157
000064  0789              LSLS     r1,r1,#30             ;157
000066  d509              BPL      |L20.124|
000068  fbb0f1fa          UDIV     r1,r0,r10             ;157
00006c  fb0a0011          MLS      r0,r10,r1,r0          ;157
000070  fbb0f2f9          UDIV     r2,r0,r9              ;157
000074  4b92              LDR      r3,|L20.704|
000076  a093              ADR      r0,|L20.708|
000078  f7fffffe          BL       __2printf
                  |L20.124|
00007c  f7fffffe          BL       l206_reset
000080  f7fffffe          BL       l206_powerup
000084  200a              MOVS     r0,#0xa               ;160
000086  f7fffffe          BL       l206_delay
00008a  2001              MOVS     r0,#1                 ;162
00008c  70a8              STRB     r0,[r5,#2]            ;162
00008e  a196              ADR      r1,|L20.744|
000090  a096              ADR      r0,|L20.748|
000092  f7fffffe          BL       l206_send_cmd
000096  2801              CMP      r0,#1                 ;163
000098  d011              BEQ      |L20.190|
00009a  2000              MOVS     r0,#0                 ;167
00009c  70a8              STRB     r0,[r5,#2]            ;167
00009e  4668              MOV      r0,sp                 ;168
0000a0  f7fffffe          BL       OSTimeGet
0000a4  7821              LDRB     r1,[r4,#0]            ;168  ; DEBUG_MODE
0000a6  07c9              LSLS     r1,r1,#31             ;168
0000a8  d008              BEQ      |L20.188|
0000aa  fbb0f1fa          UDIV     r1,r0,r10             ;168
0000ae  fb0a0211          MLS      r2,r10,r1,r0          ;168
0000b2  fbb2f2f9          UDIV     r2,r2,r9              ;168
0000b6  a08f              ADR      r0,|L20.756|
                  |L20.184|
0000b8  f7fffffe          BL       __2printf
                  |L20.188|
0000bc  e0b2              B        |L20.548|
                  |L20.190|
0000be  2002              MOVS     r0,#2                 ;164
0000c0  70a8              STRB     r0,[r5,#2]            ;164
0000c2  4668              MOV      r0,sp                 ;165
0000c4  f7fffffe          BL       OSTimeGet
0000c8  7821              LDRB     r1,[r4,#0]            ;165  ; DEBUG_MODE
0000ca  0789              LSLS     r1,r1,#30             ;165
0000cc  d5f6              BPL      |L20.188|
0000ce  fbb0f1fa          UDIV     r1,r0,r10             ;165
0000d2  fb0a0211          MLS      r2,r10,r1,r0          ;165
0000d6  fbb2f2f9          UDIV     r2,r2,r9              ;165
0000da  a08e              ADR      r0,|L20.788|
0000dc  e7ec              B        |L20.184|
                  |L20.222|
0000de  4668              MOV      r0,sp                 ;172
0000e0  f7fffffe          BL       OSTimeGet
0000e4  f89b1000          LDRB     r1,[r11,#0]           ;172  ; DEBUG_MODE
0000e8  0789              LSLS     r1,r1,#30             ;172
0000ea  d509              BPL      |L20.256|
0000ec  fbb0f1fa          UDIV     r1,r0,r10             ;172
0000f0  fb0a0211          MLS      r2,r10,r1,r0          ;172
0000f4  fbb2f2f9          UDIV     r2,r2,r9              ;172
0000f8  4b71              LDR      r3,|L20.704|
0000fa  a08e              ADR      r0,|L20.820|
0000fc  f7fffffe          BL       __2printf
                  |L20.256|
000100  f05f0400          MOVS.W   r4,#0                 ;173
                  |L20.260|
000104  f8560034          LDR      r0,[r6,r4,LSL #3]
000108  f7fffffe          BL       strlen
00010c  b281              UXTH     r1,r0
00010e  f8560034          LDR      r0,[r6,r4,LSL #3]
000112  f7fffffe          BL       l206_write
;;;175                                strlen(mCmds[i].cmd));
;;;176                        if(mCmds[i].delay >= 1000) {
000116  eb0600c4          ADD      r0,r6,r4,LSL #3
00011a  f44f717a          MOV      r1,#0x3e8
00011e  8880              LDRH     r0,[r0,#4]
000120  4288              CMP      r0,r1
000122  d305              BCC      |L20.304|
;;;177                            l206_delay(mCmds[i].delay / 1000);
000124  fbb0f0f1          UDIV     r0,r0,r1
000128  b2c0              UXTB     r0,r0
00012a  f7fffffe          BL       l206_delay
00012e  e001              B        |L20.308|
                  |L20.304|
;;;178                        } else {
;;;179                            l206_delay_ms(mCmds[i].delay);
000130  f7fffffe          BL       l206_delay_ms
                  |L20.308|
000134  1c64              ADDS     r4,r4,#1              ;173
000136  b2e4              UXTB     r4,r4                 ;173
000138  2c07              CMP      r4,#7                 ;173
00013a  d3e3              BCC      |L20.260|
;;;180                        }
;;;181                    }
;;;182                    rb_clear(&mRb);
00013c  4857              LDR      r0,|L20.668|
00013e  380c              SUBS     r0,r0,#0xc
000140  f7fffffe          BL       rb_clear
;;;183                    mState = STATE_CONNECTING;
000144  2004              MOVS     r0,#4
000146  70a8              STRB     r0,[r5,#2]
;;;184                    break;
000148  e06c              B        |L20.548|
00014a  e7ff              B        |L20.332|
                  |L20.332|
;;;185                case STATE_CONNECTING:
;;;186                    //check signal
;;;187                    logi("%s: signal = %d", __func__, l206_get_signal());
00014c  a802              ADD      r0,sp,#8
00014e  f7fffffe          BL       OSTimeGet
000152  4604              MOV      r4,r0
000154  f89b0000          LDRB     r0,[r11,#0]  ; DEBUG_MODE
000158  0780              LSLS     r0,r0,#30
00015a  d50c              BPL      |L20.374|
00015c  f7fffffe          BL       l206_get_signal
000160  fbb4f1fa          UDIV     r1,r4,r10
000164  fb0a4311          MLS      r3,r10,r1,r4
000168  fbb3f2f9          UDIV     r2,r3,r9
00016c  9000              STR      r0,[sp,#0]
00016e  4b54              LDR      r3,|L20.704|
000170  a079              ADR      r0,|L20.856|
000172  f7fffffe          BL       __2printf
                  |L20.374|
;;;188                    mState = STATE_CONNECTING;
000176  2004              MOVS     r0,#4
000178  70a8              STRB     r0,[r5,#2]
;;;189                    logi("%s: STATE_CONNECTING", __func__);
00017a  4668              MOV      r0,sp
00017c  f7fffffe          BL       OSTimeGet
000180  f89b1000          LDRB     r1,[r11,#0]  ; DEBUG_MODE
000184  465c              MOV      r4,r11
000186  0789              LSLS     r1,r1,#30
000188  d509              BPL      |L20.414|
00018a  fbb0f1fa          UDIV     r1,r0,r10
00018e  fb0a0211          MLS      r2,r10,r1,r0
000192  fbb2f2f9          UDIV     r2,r2,r9
000196  4b4a              LDR      r3,|L20.704|
000198  a078              ADR      r0,|L20.892|
00019a  f7fffffe          BL       __2printf
                  |L20.414|
;;;190                    ret = l206_connect(SERV_ADDR, SERV_PORT);
00019e  f24221b0          MOV      r1,#0x22b0
0001a2  a080              ADR      r0,|L20.932|
0001a4  f7fffffe          BL       l206_connect
;;;191                    if(ret ==TRUE) {
0001a8  2801              CMP      r0,#1
;;;192                        loge("connect success!");
;;;193                        mState = STATE_CONNECTED;
;;;194                    } else {
;;;195                        loge("connect failed, retry!");
0001aa  4668              MOV      r0,sp
0001ac  d012              BEQ      |L20.468|
0001ae  f7fffffe          BL       OSTimeGet
0001b2  7821              LDRB     r1,[r4,#0]  ; DEBUG_MODE
0001b4  07c9              LSLS     r1,r1,#31
0001b6  d008              BEQ      |L20.458|
0001b8  fbb0f1fa          UDIV     r1,r0,r10
0001bc  fb0a0211          MLS      r2,r10,r1,r0
0001c0  fbb2f2f9          UDIV     r2,r2,r9
0001c4  a07b              ADR      r0,|L20.948|
0001c6  f7fffffe          BL       __2printf
                  |L20.458|
;;;196                        mState = STATE_UNINITED;
0001ca  2000              MOVS     r0,#0
;;;197                        retry ++;
0001cc  1c7f              ADDS     r7,r7,#1
0001ce  70a8              STRB     r0,[r5,#2]            ;196
0001d0  b2bf              UXTH     r7,r7
0001d2  e027              B        |L20.548|
                  |L20.468|
0001d4  f7fffffe          BL       OSTimeGet
0001d8  7821              LDRB     r1,[r4,#0]            ;192  ; DEBUG_MODE
0001da  07c9              LSLS     r1,r1,#31             ;192
0001dc  d008              BEQ      |L20.496|
0001de  fbb0f1fa          UDIV     r1,r0,r10             ;192
0001e2  fb0a0211          MLS      r2,r10,r1,r0          ;192
0001e6  fbb2f2f9          UDIV     r2,r2,r9              ;192
0001ea  a07c              ADR      r0,|L20.988|
0001ec  f7fffffe          BL       __2printf
                  |L20.496|
0001f0  f8859002          STRB     r9,[r5,#2]            ;193
0001f4  e016              B        |L20.548|
                  |L20.502|
;;;198                    }
;;;199                    break;
;;;200                case STATE_CONNECTED:
;;;201                    logi("%s: STATE_CONNECTED", __func__);
0001f6  4668              MOV      r0,sp
0001f8  f7fffffe          BL       OSTimeGet
0001fc  f89b1000          LDRB     r1,[r11,#0]  ; DEBUG_MODE
000200  0789              LSLS     r1,r1,#30
000202  d509              BPL      |L20.536|
000204  fbb0f1fa          UDIV     r1,r0,r10
000208  fb0a0211          MLS      r2,r10,r1,r0
00020c  fbb2f2f9          UDIV     r2,r2,r9
000210  4b2b              LDR      r3,|L20.704|
000212  a07b              ADR      r0,|L20.1024|
000214  f7fffffe          BL       __2printf
                  |L20.536|
;;;202                    connect_done = TRUE;
;;;203                    mState = STATE_IDLE;
000218  2006              MOVS     r0,#6
00021a  f04f0801          MOV      r8,#1                 ;202
00021e  70a8              STRB     r0,[r5,#2]
;;;204                    mIsConnected  = TRUE;
000220  f8858000          STRB     r8,[r5,#0]
                  |L20.548|
;;;205                default:
;;;206                    break;
;;;207            }
;;;208            if(retry > L206_CONNECT_RETRY_TIMES) {
000224  2f04              CMP      r7,#4
000226  d916              BLS      |L20.598|
;;;209                loge("%s: retry = %d", __func__, retry);
000228  a802              ADD      r0,sp,#8
00022a  f7fffffe          BL       OSTimeGet
00022e  f89b1000          LDRB     r1,[r11,#0]  ; DEBUG_MODE
000232  465c              MOV      r4,r11
000234  07c9              LSLS     r1,r1,#31
000236  d00a              BEQ      |L20.590|
000238  fbb0f1fa          UDIV     r1,r0,r10
00023c  fb0a0211          MLS      r2,r10,r1,r0
000240  fbb2f2f9          UDIV     r2,r2,r9
000244  4b1e              LDR      r3,|L20.704|
000246  a078              ADR      r0,|L20.1064|
000248  9700              STR      r7,[sp,#0]
00024a  f7fffffe          BL       __2printf
                  |L20.590|
;;;210                break;
;;;211            }
;;;212        }
;;;213        if(!connect_done) {
00024e  f1b80f00          CMP      r8,#0
000252  d007              BEQ      |L20.612|
000254  e003              B        |L20.606|
                  |L20.598|
000256  f1b80f00          CMP      r8,#0                 ;154
00025a  f43faef4          BEQ      |L20.70|
                  |L20.606|
;;;214            loge("%s: We cannot connect server, retried %d times",
;;;215                    __func__, L206_CONNECT_RETRY_TIMES);
;;;216            return FALSE;
;;;217        }
;;;218    
;;;219        return TRUE;
00025e  2001              MOVS     r0,#1
                  |L20.608|
;;;220    }
000260  e8bd8ffe          POP      {r1-r11,pc}
                  |L20.612|
000264  a802              ADD      r0,sp,#8              ;214
000266  f7fffffe          BL       OSTimeGet
00026a  7821              LDRB     r1,[r4,#0]            ;214  ; DEBUG_MODE
00026c  07c9              LSLS     r1,r1,#31             ;214
00026e  d00b              BEQ      |L20.648|
000270  fbb0f1fa          UDIV     r1,r0,r10             ;214
000274  fb0a0211          MLS      r2,r10,r1,r0          ;214
000278  fbb2f2f9          UDIV     r2,r2,r9              ;214
00027c  2004              MOVS     r0,#4                 ;214
00027e  9000              STR      r0,[sp,#0]            ;214
000280  4b0f              LDR      r3,|L20.704|
000282  a071              ADR      r0,|L20.1096|
000284  f7fffffe          BL       __2printf
                  |L20.648|
000288  2000              MOVS     r0,#0                 ;216
00028a  e7e9              B        |L20.608|
;;;221    
                          ENDP

                  |L20.652|
                          DCD      ||.data||
                  |L20.656|
000290  4c323036          DCB      "L206_WAIT",0
000294  5f574149
000298  5400    
00029a  00                DCB      0
00029b  00                DCB      0
                  |L20.668|
                          DCD      ||.bss||+0x10c
                  |L20.672|
0002a0  4c323036          DCB      "L206_MUTEX",0
0002a4  5f4d5554
0002a8  455800  
0002ab  00                DCB      0
                  |L20.684|
0002ac  4c323036          DCB      "L206_SEND_MUTEX",0
0002b0  5f53454e
0002b4  445f4d55
0002b8  54455800
                  |L20.700|
                          DCD      DEBUG_MODE
                  |L20.704|
                          DCD      ||.constdata||+0x18
                  |L20.708|
0002c4  5b253035          DCB      "[%05d.%03d/I]: %s: STATE_UNINITED\r\n",0
0002c8  642e2530
0002cc  33642f49
0002d0  5d3a2025
0002d4  733a2053
0002d8  54415445
0002dc  5f554e49
0002e0  4e495445
0002e4  440d0a00
                  |L20.744|
0002e8  415400            DCB      "AT",0
0002eb  00                DCB      0
                  |L20.748|
0002ec  41540d0a          DCB      "AT\r\n",0
0002f0  00      
0002f1  00                DCB      0
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L20.756|
0002f4  5b253035          DCB      "[%05d.%03d/E]: powerup failed\r\n",0
0002f8  642e2530
0002fc  33642f45
000300  5d3a2070
000304  6f776572
000308  75702066
00030c  61696c65
000310  640d0a00
                  |L20.788|
000314  5b253035          DCB      "[%05d.%03d/I]: powerup done\r\n",0
000318  642e2530
00031c  33642f49
000320  5d3a2070
000324  6f776572
000328  75702064
00032c  6f6e650d
000330  0a00    
000332  00                DCB      0
000333  00                DCB      0
                  |L20.820|
000334  5b253035          DCB      "[%05d.%03d/I]: %s: STATE_INITED\r\n",0
000338  642e2530
00033c  33642f49
000340  5d3a2025
000344  733a2053
000348  54415445
00034c  5f494e49
000350  5445440d
000354  0a00    
000356  00                DCB      0
000357  00                DCB      0
                  |L20.856|
000358  5b253035          DCB      "[%05d.%03d/I]: %s: signal = %d\r\n",0
00035c  642e2530
000360  33642f49
000364  5d3a2025
000368  733a2073
00036c  69676e61
000370  6c203d20
000374  25640d0a
000378  00      
000379  00                DCB      0
00037a  00                DCB      0
00037b  00                DCB      0
                  |L20.892|
00037c  5b253035          DCB      "[%05d.%03d/I]: %s: STATE_CONNECTING\r\n",0
000380  642e2530
000384  33642f49
000388  5d3a2025
00038c  733a2053
000390  54415445
000394  5f434f4e
000398  4e454354
00039c  494e470d
0003a0  0a00    
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L20.932|
0003a4  3133392e          DCB      "139.224.17.163",0
0003a8  3232342e
0003ac  31372e31
0003b0  363300  
0003b3  00                DCB      0
                  |L20.948|
0003b4  5b253035          DCB      "[%05d.%03d/E]: connect failed, retry!\r\n",0
0003b8  642e2530
0003bc  33642f45
0003c0  5d3a2063
0003c4  6f6e6e65
0003c8  63742066
0003cc  61696c65
0003d0  642c2072
0003d4  65747279
0003d8  210d0a00
                  |L20.988|
0003dc  5b253035          DCB      "[%05d.%03d/E]: connect success!\r\n",0
0003e0  642e2530
0003e4  33642f45
0003e8  5d3a2063
0003ec  6f6e6e65
0003f0  63742073
0003f4  75636365
0003f8  7373210d
0003fc  0a00    
0003fe  00                DCB      0
0003ff  00                DCB      0
                  |L20.1024|
000400  5b253035          DCB      "[%05d.%03d/I]: %s: STATE_CONNECTED\r\n",0
000404  642e2530
000408  33642f49
00040c  5d3a2025
000410  733a2053
000414  54415445
000418  5f434f4e
00041c  4e454354
000420  45440d0a
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L20.1064|
000428  5b253035          DCB      "[%05d.%03d/E]: %s: retry = %d\r\n",0
00042c  642e2530
000430  33642f45
000434  5d3a2025
000438  733a2072
00043c  65747279
000440  203d2025
000444  640d0a00
                  |L20.1096|
000448  5b253035          DCB      "[%05d.%03d/E]: %s: We cannot connect server, retried %d"
00044c  642e2530
000450  33642f45
000454  5d3a2025
000458  733a2057
00045c  65206361
000460  6e6e6f74
000464  20636f6e
000468  6e656374
00046c  20736572
000470  7665722c
000474  20726574
000478  72696564
00047c  202564  
00047f  2074696d          DCB      " times\r\n",0
000483  65730d0a
000487  00      

                          AREA ||i.l206_unlock||, CODE, READONLY, ALIGN=2

                  l206_unlock PROC
;;;619    
;;;620    void l206_unlock(void)
000000  b508              PUSH     {r3,lr}
;;;621    {
;;;622        OS_ERR err;
;;;623    
;;;624        //logi("---%s---", __func__);
;;;625        OSMutexPost(&mMutex, OS_OPT_POST_NONE, &err);
000002  466a              MOV      r2,sp
000004  2100              MOVS     r1,#0
000006  4802              LDR      r0,|L21.16|
000008  f7fffffe          BL       OSMutexPost
;;;626    }
00000c  bd08              POP      {r3,pc}
;;;627    
                          ENDP

00000e  0000              DCW      0x0000
                  |L21.16|
                          DCD      ||.bss||+0x134

                          AREA ||i.l206_up||, CODE, READONLY, ALIGN=2

                  l206_up PROC
;;;642    
;;;643    void l206_up(void)
000000  b508              PUSH     {r3,lr}
;;;644    {
;;;645        OS_ERR err;
;;;646        //logi("%s", __func__);
;;;647        OSSemPost(&mWait, OS_OPT_POST_ALL, &err);
000002  466a              MOV      r2,sp
000004  f44f7100          MOV      r1,#0x200
000008  4801              LDR      r0,|L22.16|
00000a  f7fffffe          BL       OSSemPost
;;;648    }
00000e  bd08              POP      {r3,pc}
;;;649    
                          ENDP

                  |L22.16|
                          DCD      ||.bss||+0x10c

                          AREA ||i.l206_write||, CODE, READONLY, ALIGN=2

                  l206_write PROC
;;;600    
;;;601    void l206_write(uint8_t *buf, uint16_t size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;602    {
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
;;;603    
;;;604        uint16_t i = 0;
000008  2400              MOVS     r4,#0
;;;605        for(; i < size; i++) {
;;;606            USART_SendData(L206_USART, buf[i]);
00000a  4d09              LDR      r5,|L23.48|
00000c  e00b              B        |L23.38|
                  |L23.14|
00000e  5d39              LDRB     r1,[r7,r4]
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       USART_SendData
                  |L23.22|
;;;607            while(USART_GetFlagStatus(L206_USART, USART_FLAG_TXE) == RESET)
000016  2180              MOVS     r1,#0x80
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       USART_GetFlagStatus
00001e  2800              CMP      r0,#0
000020  d0f9              BEQ      |L23.22|
000022  1c64              ADDS     r4,r4,#1              ;605
000024  b2a4              UXTH     r4,r4                 ;605
                  |L23.38|
000026  42b4              CMP      r4,r6                 ;605
000028  d3f1              BCC      |L23.14|
;;;608            {;}
;;;609        }
;;;610    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;611    
                          ENDP

00002e  0000              DCW      0x0000
                  |L23.48|
                          DCD      0x40004800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mRingBuffer
                          %        256
                  mRb
                          %        12
                  mWait
                          %        40
                  mMutex
                          %        44
                  mSendMutex
                          %        44

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  6c323036          DCB      0x6c,0x32,0x30,0x36
000004  5f726573          DCB      0x5f,0x72,0x65,0x73
000008  657400            DCB      0x65,0x74,0x00
                  |symbol_number.76|
00000b  6c                DCB      0x6c
00000c  3230365f          DCB      0x32,0x30,0x36,0x5f
000010  706f7765          DCB      0x70,0x6f,0x77,0x65
000014  72757000          DCB      0x72,0x75,0x70,0x00
                  |symbol_number.77|
000018  6c323036          DCB      0x6c,0x32,0x30,0x36
00001c  5f736574          DCB      0x5f,0x73,0x65,0x74
000020  757000            DCB      0x75,0x70,0x00
                  |symbol_number.78|
000023  6c                DCB      0x6c
000024  3230365f          DCB      0x32,0x30,0x36,0x5f
000028  636f6e6e          DCB      0x63,0x6f,0x6e,0x6e
00002c  65637400          DCB      0x65,0x63,0x74,0x00
                  |symbol_number.79|
000030  6c323036          DCB      0x6c,0x32,0x30,0x36
000034  5f636f6e          DCB      0x5f,0x63,0x6f,0x6e
000038  6e656374          DCB      0x6e,0x65,0x63,0x74
00003c  5f6c6f63          DCB      0x5f,0x6c,0x6f,0x63
000040  6174696f          DCB      0x61,0x74,0x69,0x6f
000044  6e5f7365          DCB      0x6e,0x5f,0x73,0x65
000048  72766572          DCB      0x72,0x76,0x65,0x72
00004c  00                DCB      0x00
                  |symbol_number.80|
00004d  6c3230            DCB      0x6c,0x32,0x30
000050  365f7365          DCB      0x36,0x5f,0x73,0x65
000054  6e6400            DCB      0x6e,0x64,0x00
                  |symbol_number.81|
000057  6c                DCB      0x6c
000058  3230365f          DCB      0x32,0x30,0x36,0x5f
00005c  646f776e          DCB      0x64,0x6f,0x77,0x6e
000060  00                DCB      0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  41544530          DCB      "ATE0\r\n",0
000004  0d0a00  
000007  41542b43          DCB      "AT+CPIN?\r\n",0
00000b  50494e3f
00000f  0d0a00  
000012  41542b43          DCB      "AT+CREG?\r\n",0
000016  5245473f
00001a  0d0a00  
00001d  41542b43          DCB      "AT+CGATT?\r\n",0
000021  47415454
000025  3f0d0a00
000029  41542b5a          DCB      "AT+ZIPCFG=CMNET\r\n",0
00002d  49504346
000031  473d434d
000035  4e45540d
000039  0a00    
00003b  41542b5a          DCB      "AT+ZIPCALL=1\r\n",0
00003f  49504341
000043  4c4c3d31
000047  0d0a00  
00004a  41542b47          DCB      "AT+GTPOS=1\r\n",0
00004e  54504f53
000052  3d310d0a
000056  00      

                          AREA ||.data||, DATA, ALIGN=2

                  mIsConnected
000000  00                DCB      0x00
                  json_start
000001  00                DCB      0x00
                  mState
000002  0000              DCB      0x00,0x00
                  l206_lng
                          DCD      0x00000000
                  l206_lat
                          DCD      0x00000000
                  buf
                          DCD      0x00000000
                  mCmds
                          DCD      ||.conststring||
000014  0064              DCW      0x0064
000016  0000              DCB      0x00,0x00
                          DCD      ||.conststring||+0x7
00001c  0064              DCW      0x0064
00001e  0000              DCB      0x00,0x00
                          DCD      ||.conststring||+0x12
000024  0064              DCW      0x0064
000026  0000              DCB      0x00,0x00
                          DCD      ||.conststring||+0x1d
00002c  00c8              DCW      0x00c8
00002e  0000              DCB      0x00,0x00
                          DCD      ||.conststring||+0x29
000034  00c8              DCW      0x00c8
000036  0000              DCB      0x00,0x00
                          DCD      ||.conststring||+0x3b
00003c  1770              DCW      0x1770
00003e  0000              DCB      0x00,0x00
                          DCD      ||.conststring||+0x4a
000044  0bb8              DCW      0x0bb8
000046  0000              DCB      0x00,0x00
