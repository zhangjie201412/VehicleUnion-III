; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\stm32f10x_spi.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_spi.crf ..\STM32F10x_FWLib\src\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;450      */
;;;451    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;452    {
;;;453      /* Check the parameters */
;;;454      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;455      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;456      if (NewState != DISABLE)
;;;457      {
;;;458        /* Enable the selected SPI peripheral (in I2S mode) */
;;;459        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
;;;460      }
;;;461      else
;;;462      {
;;;463        /* Disable the selected SPI peripheral (in I2S mode) */
;;;464        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
000002  8b81              LDRH     r1,[r0,#0x1c]
000004  d002              BEQ      |L1.12|
000006  f4416180          ORR      r1,r1,#0x400          ;459
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L1.16|
000010  8381              STRH     r1,[r0,#0x1c]         ;459
;;;465      }
;;;466    }
000012  4770              BX       lr
;;;467    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;218      */
;;;219    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;220    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;221      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000006  2002              MOVS     r0,#2
000008  2100              MOVS     r1,#0
;;;222      uint32_t tmp = 0;
;;;223      RCC_ClocksTypeDef RCC_Clocks;
;;;224      uint32_t sourceclock = 0;
;;;225      
;;;226      /* Check the I2S parameters */
;;;227      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;228      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;229      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;230      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;231      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;232      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;233      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;234    
;;;235    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;236      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;237      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00000a  8baa              LDRH     r2,[r5,#0x1c]
00000c  b085              SUB      sp,sp,#0x14           ;220
00000e  2601              MOVS     r6,#1                 ;221
000010  f24f0340          MOV      r3,#0xf040
000014  401a              ANDS     r2,r2,r3
000016  83aa              STRH     r2,[r5,#0x1c]
;;;238      SPIx->I2SPR = 0x0002;
000018  8428              STRH     r0,[r5,#0x20]
;;;239      
;;;240      /* Get the I2SCFGR register value */
;;;241      tmpreg = SPIx->I2SCFGR;
00001a  8baf              LDRH     r7,[r5,#0x1c]
;;;242      
;;;243      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;244      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00001c  68a2              LDR      r2,[r4,#8]
00001e  2a02              CMP      r2,#2
000020  d027              BEQ      |L2.114|
;;;245      {
;;;246        i2sodd = (uint16_t)0;
;;;247        i2sdiv = (uint16_t)2;   
;;;248      }
;;;249      /* If the requested audio frequency is not the default, compute the prescaler */
;;;250      else
;;;251      {
;;;252        /* Check the frame length (For the Prescaler computing) */
;;;253        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000022  88a0              LDRH     r0,[r4,#4]
000024  b100              CBZ      r0,|L2.40|
;;;254        {
;;;255          /* Packet length is 16 bits */
;;;256          packetlength = 1;
;;;257        }
;;;258        else
;;;259        {
;;;260          /* Packet length is 32 bits */
;;;261          packetlength = 2;
000026  2602              MOVS     r6,#2
                  |L2.40|
;;;262        }
;;;263    
;;;264        /* Get the I2S clock source mask depending on the peripheral number */
;;;265        if(((uint32_t)SPIx) == SPI2_BASE)
;;;266        {
;;;267          /* The mask is relative to I2S2 */
;;;268          tmp = I2S2_CLOCK_SRC;
;;;269        }
;;;270        else 
;;;271        {
;;;272          /* The mask is relative to I2S3 */      
;;;273          tmp = I2S3_CLOCK_SRC;
;;;274        }
;;;275    
;;;276        /* Check the I2S clock source configuration depending on the Device:
;;;277           Only Connectivity line devices have the PLL3 VCO clock */
;;;278    #ifdef STM32F10X_CL
;;;279        if((RCC->CFGR2 & tmp) != 0)
;;;280        {
;;;281          /* Get the configuration bits of RCC PLL3 multiplier */
;;;282          tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
;;;283    
;;;284          /* Get the value of the PLL3 multiplier */      
;;;285          if((tmp > 5) && (tmp < 15))
;;;286          {
;;;287            /* Multiplier is between 8 and 14 (value 15 is forbidden) */
;;;288            tmp += 2;
;;;289          }
;;;290          else
;;;291          {
;;;292            if (tmp == 15)
;;;293            {
;;;294              /* Multiplier is 20 */
;;;295              tmp = 20;
;;;296            }
;;;297          }      
;;;298          /* Get the PREDIV2 value */
;;;299          sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
;;;300          
;;;301          /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
;;;302          sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
;;;303        }
;;;304        else
;;;305        {
;;;306          /* I2S Clock source is System clock: Get System Clock frequency */
;;;307          RCC_GetClocksFreq(&RCC_Clocks);      
;;;308          
;;;309          /* Get the source clock value: based on System Clock value */
;;;310          sourceclock = RCC_Clocks.SYSCLK_Frequency;
;;;311        }        
;;;312    #else /* STM32F10X_HD */
;;;313        /* I2S Clock source is System clock: Get System Clock frequency */
;;;314        RCC_GetClocksFreq(&RCC_Clocks);      
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       RCC_GetClocksFreq
;;;315          
;;;316        /* Get the source clock value: based on System Clock value */
;;;317        sourceclock = RCC_Clocks.SYSCLK_Frequency;    
;;;318    #endif /* STM32F10X_CL */    
;;;319    
;;;320        /* Compute the Real divider depending on the MCLK output state with a floating point */
;;;321        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00002e  88e1              LDRH     r1,[r4,#6]
000030  9800              LDR      r0,[sp,#0]
000032  f5b17f00          CMP      r1,#0x200
000036  d02d              BEQ      |L2.148|
;;;322        {
;;;323          /* MCLK output is enabled */
;;;324          tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
;;;325        }
;;;326        else
;;;327        {
;;;328          /* MCLK output is disabled */
;;;329          tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000038  0171              LSLS     r1,r6,#5
00003a  fbb0f0f1          UDIV     r0,r0,r1
00003e  bf00              NOP      
                  |L2.64|
000040  eb000080          ADD      r0,r0,r0,LSL #2
000044  68a1              LDR      r1,[r4,#8]
000046  0040              LSLS     r0,r0,#1
000048  fbb0f0f1          UDIV     r0,r0,r1
00004c  1d40              ADDS     r0,r0,#5
00004e  b280              UXTH     r0,r0
;;;330        }
;;;331        
;;;332        /* Remove the floating point */
;;;333        tmp = tmp / 10;  
000050  210a              MOVS     r1,#0xa
000052  fbb0f0f1          UDIV     r0,r0,r1
;;;334          
;;;335        /* Check the parity of the divider */
;;;336        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000056  f0000101          AND      r1,r0,#1
;;;337       
;;;338        /* Compute the i2sdiv prescaler */
;;;339        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
00005a  1a40              SUBS     r0,r0,r1
;;;340       
;;;341        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;342        i2sodd = (uint16_t) (i2sodd << 8);
00005c  f64f72ff          MOV      r2,#0xffff
000060  f3c0004f          UBFX     r0,r0,#1,#16          ;339
000064  ea022101          AND      r1,r2,r1,LSL #8
;;;343      }
;;;344      
;;;345      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;346      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000068  1e82              SUBS     r2,r0,#2
00006a  2afe              CMP      r2,#0xfe
00006c  d301              BCC      |L2.114|
;;;347      {
;;;348        /* Set the default values */
;;;349        i2sdiv = 2;
00006e  2002              MOVS     r0,#2
;;;350        i2sodd = 0;
000070  2100              MOVS     r1,#0
                  |L2.114|
;;;351      }
;;;352    
;;;353      /* Write to SPIx I2SPR register the computed value */
;;;354      SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
000072  88e2              LDRH     r2,[r4,#6]
000074  4308              ORRS     r0,r0,r1
000076  4302              ORRS     r2,r2,r0
000078  842a              STRH     r2,[r5,#0x20]
;;;355     
;;;356      /* Configure the I2S with the SPI_InitStruct values */
;;;357      tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
00007a  8820              LDRH     r0,[r4,#0]
00007c  8861              LDRH     r1,[r4,#2]
00007e  89a2              LDRH     r2,[r4,#0xc]
000080  4308              ORRS     r0,r0,r1
000082  88a1              LDRH     r1,[r4,#4]
000084  4311              ORRS     r1,r1,r2
000086  4308              ORRS     r0,r0,r1
000088  4338              ORRS     r0,r0,r7
00008a  f4406000          ORR      r0,r0,#0x800
;;;358                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;359                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;360     
;;;361      /* Write to SPIx I2SCFGR */  
;;;362      SPIx->I2SCFGR = tmpreg;   
00008e  83a8              STRH     r0,[r5,#0x1c]
;;;363    }
000090  b005              ADD      sp,sp,#0x14
000092  bdf0              POP      {r4-r7,pc}
                  |L2.148|
000094  0a00              LSRS     r0,r0,#8              ;324
000096  e7d3              B        |L2.64|
;;;364    
                          ENDP


                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;397      */
;;;398    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;399    {
;;;400    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;401      /* Initialize the I2S_Mode member */
;;;402      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;403      
;;;404      /* Initialize the I2S_Standard member */
;;;405      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;406      
;;;407      /* Initialize the I2S_DataFormat member */
;;;408      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;409      
;;;410      /* Initialize the I2S_MCLKOutput member */
;;;411      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;412      
;;;413      /* Initialize the I2S_AudioFreq member */
;;;414      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2202              MOVS     r2,#2
;;;415      
;;;416      /* Initialize the I2S_CPOL member */
;;;417      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000c  6082              STR      r2,[r0,#8]
00000e  8181              STRH     r1,[r0,#0xc]
;;;418    }
000010  4770              BX       lr
;;;419    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;731      */
;;;732    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;733    {
;;;734      /* Check the parameters */
;;;735      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;736      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;737      if (SPI_Direction == SPI_Direction_Tx)
;;;738      {
;;;739        /* Set the Tx only mode */
;;;740        SPIx->CR1 |= SPI_Direction_Tx;
;;;741      }
;;;742      else
;;;743      {
;;;744        /* Set the Rx only mode */
;;;745        SPIx->CR1 &= SPI_Direction_Rx;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L4.16|
000008  f4214180          BIC      r1,r1,#0x4000
                  |L4.12|
00000c  8001              STRH     r1,[r0,#0]            ;740
;;;746      }
;;;747    }
00000e  4770              BX       lr
                  |L4.16|
000010  f4414180          ORR      r1,r1,#0x4000         ;740
000014  e7fa              B        |L4.12|
;;;748    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;662      */
;;;663    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;664    {
;;;665      /* Check the parameters */
;;;666      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;667      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;668      if (NewState != DISABLE)
;;;669      {
;;;670        /* Enable the selected SPI CRC calculation */
;;;671        SPIx->CR1 |= CR1_CRCEN_Set;
;;;672      }
;;;673      else
;;;674      {
;;;675        /* Disable the selected SPI CRC calculation */
;;;676        SPIx->CR1 &= CR1_CRCEN_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L5.12|
000006  f4415100          ORR      r1,r1,#0x2000         ;671
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f4215100          BIC      r1,r1,#0x2000
                  |L5.16|
000010  8001              STRH     r1,[r0,#0]            ;671
;;;677      }
;;;678    }
000012  4770              BX       lr
;;;679    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;426      */
;;;427    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;428    {
;;;429      /* Check the parameters */
;;;430      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;431      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;432      if (NewState != DISABLE)
;;;433      {
;;;434        /* Enable the selected SPI peripheral */
;;;435        SPIx->CR1 |= CR1_SPE_Set;
;;;436      }
;;;437      else
;;;438      {
;;;439        /* Disable the selected SPI peripheral */
;;;440        SPIx->CR1 &= CR1_SPE_Reset;
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L6.12|
000006  f0410140          ORR      r1,r1,#0x40           ;435
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f0210140          BIC      r1,r1,#0x40
                  |L6.16|
000010  8001              STRH     r1,[r0,#0]            ;435
;;;441      }
;;;442    }
000012  4770              BX       lr
;;;443    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;630      */
;;;631    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;632    {
;;;633      /* Check the parameters */
;;;634      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;635      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;636      /* Clear DFF bit */
;;;637      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f4226200          BIC      r2,r2,#0x800
000006  8002              STRH     r2,[r0,#0]
;;;638      /* Set new DFF bit value */
;;;639      SPIx->CR1 |= SPI_DataSize;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;640    }
00000e  4770              BX       lr
;;;641    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;688      */
;;;689    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  2901              CMP      r1,#1
;;;690    {
000002  d001              BEQ      |L8.8|
;;;691      uint16_t crcreg = 0;
;;;692      /* Check the parameters */
;;;693      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;694      assert_param(IS_SPI_CRC(SPI_CRC));
;;;695      if (SPI_CRC != SPI_CRC_Rx)
;;;696      {
;;;697        /* Get the Tx CRC register */
;;;698        crcreg = SPIx->TXCRCR;
000004  8b00              LDRH     r0,[r0,#0x18]
;;;699      }
;;;700      else
;;;701      {
;;;702        /* Get the Rx CRC register */
;;;703        crcreg = SPIx->RXCRCR;
;;;704      }
;;;705      /* Return the selected CRC register */
;;;706      return crcreg;
;;;707    }
000006  4770              BX       lr
                  |L8.8|
000008  8a80              LDRH     r0,[r0,#0x14]         ;703
00000a  4770              BX       lr
;;;708    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;713      */
;;;714    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;715    {
;;;716      /* Check the parameters */
;;;717      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;718      
;;;719      /* Return the CRC polynomial register */
;;;720      return SPIx->CRCPR;
;;;721    }
000002  4770              BX       lr
;;;722    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;803      */
;;;804    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43c9              MVNS     r1,r1
;;;805    {
;;;806      /* Check the parameters */
;;;807      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;808      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;809        
;;;810        /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;811        SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8101              STRH     r1,[r0,#8]
;;;812    }
000004  4770              BX       lr
;;;813    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;882      */
;;;883    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  f001020f          AND      r2,r1,#0xf
;;;884    {
;;;885      uint16_t itpos = 0;
;;;886      /* Check the parameters */
;;;887      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;888      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;889    
;;;890      /* Get the SPI IT index */
;;;891      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
;;;892    
;;;893      /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;894      SPIx->SR = (uint16_t)~itpos;
000008  43c9              MVNS     r1,r1
00000a  8101              STRH     r1,[r0,#8]
;;;895    }
00000c  4770              BX       lr
;;;896    /**
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;520      */
;;;521    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;522    {
;;;523      /* Check the parameters */
;;;524      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;525      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;526      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;527      if (NewState != DISABLE)
;;;528      {
;;;529        /* Enable the selected SPI/I2S DMA requests */
;;;530        SPIx->CR2 |= SPI_I2S_DMAReq;
;;;531      }
;;;532      else
;;;533      {
;;;534        /* Disable the selected SPI/I2S DMA requests */
;;;535        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
000002  8882              LDRH     r2,[r0,#4]
000004  d001              BEQ      |L12.10|
000006  430a              ORRS     r2,r2,r1              ;530
000008  e000              B        |L12.12|
                  |L12.10|
00000a  438a              BICS     r2,r2,r1
                  |L12.12|
00000c  8082              STRH     r2,[r0,#4]            ;530
;;;536      }
;;;537    }
00000e  4770              BX       lr
;;;538    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;118      */
;;;119    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  4911              LDR      r1,|L13.72|
;;;120    {
000002  b510              PUSH     {r4,lr}
;;;121      /* Check the parameters */
;;;122      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;123    
;;;124      if (SPIx == SPI1)
000004  4288              CMP      r0,r1
000006  d10a              BNE      |L13.30|
;;;125      {
;;;126        /* Enable SPI1 reset state */
;;;127        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000008  1484              ASRS     r4,r0,#18
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;128        /* Release SPI1 from reset state */
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0
00001a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L13.30|
;;;130      }
;;;131      else if (SPIx == SPI2)
00001e  490b              LDR      r1,|L13.76|
000020  4288              CMP      r0,r1
000022  d102              BNE      |L13.42|
;;;132      {
;;;133        /* Enable SPI2 reset state */
;;;134        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000024  2101              MOVS     r1,#1
000026  1404              ASRS     r4,r0,#16
;;;135        /* Release SPI2 from reset state */
;;;136        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000028  e004              B        |L13.52|
                  |L13.42|
;;;137      }
;;;138      else
;;;139      {
;;;140        if (SPIx == SPI3)
00002a  4909              LDR      r1,|L13.80|
00002c  4288              CMP      r0,r1
00002e  d10a              BNE      |L13.70|
;;;141        {
;;;142          /* Enable SPI3 reset state */
;;;143          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000030  2101              MOVS     r1,#1
000032  13c4              ASRS     r4,r0,#15
                  |L13.52|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;144          /* Release SPI3 from reset state */
;;;145          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
00003a  4620              MOV      r0,r4
00003c  e8bd4010          POP      {r4,lr}
000040  2100              MOVS     r1,#0
000042  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L13.70|
;;;146        }
;;;147      }
;;;148    }
000046  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  |L13.72|
                          DCD      0x40013000
                  |L13.76|
                          DCD      0x40003800
                  |L13.80|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;765      */
;;;766    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;767    {
;;;768      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;769      /* Check the parameters */
;;;770      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;771      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;772      /* Check the status of the specified SPI/I2S flag */
;;;773      if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8912              LDRH     r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L14.12|
;;;774      {
;;;775        /* SPI_I2S_FLAG is set */
;;;776        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L14.12|
;;;777      }
;;;778      else
;;;779      {
;;;780        /* SPI_I2S_FLAG is reset */
;;;781        bitstatus = RESET;
;;;782      }
;;;783      /* Return the SPI_I2S_FLAG status */
;;;784      return  bitstatus;
;;;785    }
00000c  4770              BX       lr
;;;786    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;828      */
;;;829    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;830    {
;;;831      ITStatus bitstatus = RESET;
;;;832      uint16_t itpos = 0, itmask = 0, enablestatus = 0;
;;;833    
;;;834      /* Check the parameters */
;;;835      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;836      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;837    
;;;838      /* Get the SPI/I2S IT index */
;;;839      itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000002  f001040f          AND      r4,r1,#0xf
000006  2201              MOVS     r2,#1
000008  4603              MOV      r3,r0                 ;830
00000a  fa02f404          LSL      r4,r2,r4
00000e  2000              MOVS     r0,#0                 ;831
;;;840    
;;;841      /* Get the SPI/I2S IT mask */
;;;842      itmask = SPI_I2S_IT >> 4;
000010  0909              LSRS     r1,r1,#4
;;;843    
;;;844      /* Set the IT mask */
;;;845      itmask = 0x01 << itmask;
000012  408a              LSLS     r2,r2,r1
000014  b291              UXTH     r1,r2
;;;846    
;;;847      /* Get the SPI_I2S_IT enable bit status */
;;;848      enablestatus = (SPIx->CR2 & itmask) ;
000016  889a              LDRH     r2,[r3,#4]
000018  b2a4              UXTH     r4,r4                 ;839
00001a  400a              ANDS     r2,r2,r1
;;;849    
;;;850      /* Check the status of the specified SPI/I2S interrupt */
;;;851      if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
00001c  8919              LDRH     r1,[r3,#8]
00001e  4221              TST      r1,r4
000020  d002              BEQ      |L15.40|
000022  2a00              CMP      r2,#0
000024  d000              BEQ      |L15.40|
;;;852      {
;;;853        /* SPI_I2S_IT is set */
;;;854        bitstatus = SET;
000026  2001              MOVS     r0,#1
                  |L15.40|
;;;855      }
;;;856      else
;;;857      {
;;;858        /* SPI_I2S_IT is reset */
;;;859        bitstatus = RESET;
;;;860      }
;;;861      /* Return the SPI_I2S_IT status */
;;;862      return bitstatus;
;;;863    }
000028  bd10              POP      {r4,pc}
;;;864    
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;481      */
;;;482    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  0909              LSRS     r1,r1,#4
;;;483    {
;;;484      uint16_t itpos = 0, itmask = 0 ;
;;;485      /* Check the parameters */
;;;486      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;487      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;488      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;489    
;;;490      /* Get the SPI/I2S IT index */
;;;491      itpos = SPI_I2S_IT >> 4;
;;;492    
;;;493      /* Set the IT mask */
;;;494      itmask = (uint16_t)1 << (uint16_t)itpos;
000002  2301              MOVS     r3,#1
000004  408b              LSLS     r3,r3,r1
;;;495    
;;;496      if (NewState != DISABLE)
000006  2a00              CMP      r2,#0
;;;497      {
;;;498        /* Enable the selected SPI/I2S interrupt */
;;;499        SPIx->CR2 |= itmask;
;;;500      }
;;;501      else
;;;502      {
;;;503        /* Disable the selected SPI/I2S interrupt */
;;;504        SPIx->CR2 &= (uint16_t)~itmask;
000008  8882              LDRH     r2,[r0,#4]
00000a  b299              UXTH     r1,r3                 ;494
00000c  d001              BEQ      |L16.18|
00000e  430a              ORRS     r2,r2,r1              ;499
000010  e000              B        |L16.20|
                  |L16.18|
000012  438a              BICS     r2,r2,r1
                  |L16.20|
000014  8082              STRH     r2,[r0,#4]            ;499
;;;505      }
;;;506    }
000016  4770              BX       lr
;;;507    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;562      */
;;;563    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  8980              LDRH     r0,[r0,#0xc]
;;;564    {
;;;565      /* Check the parameters */
;;;566      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;567      
;;;568      /* Return the data in the DR register */
;;;569      return SPIx->DR;
;;;570    }
000002  4770              BX       lr
;;;571    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;546      */
;;;547    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;548    {
;;;549      /* Check the parameters */
;;;550      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;551      
;;;552      /* Write in the DR register the data to be sent */
;;;553      SPIx->DR = Data;
;;;554    }
000002  4770              BX       lr
;;;555    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;157      */
;;;158    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;159    {
;;;160      uint16_t tmpreg = 0;
;;;161      
;;;162      /* check the parameters */
;;;163      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;164      
;;;165      /* Check the SPI parameters */
;;;166      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;167      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;168      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;169      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;170      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;171      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;172      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;173      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;174      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;175    
;;;176    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;177      /* Get the SPIx CR1 value */
;;;178      tmpreg = SPIx->CR1;
000002  8802              LDRH     r2,[r0,#0]
;;;179      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;180      tmpreg &= CR1_CLEAR_Mask;
;;;181      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;182         master/salve mode, CPOL and CPHA */
;;;183      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;184      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;185      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;186      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;187      /* Set CPOL bit according to SPI_CPOL value */
;;;188      /* Set CPHA bit according to SPI_CPHA value */
;;;189      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
000004  884c              LDRH     r4,[r1,#2]
000006  f4025341          AND      r3,r2,#0x3040         ;180
00000a  880a              LDRH     r2,[r1,#0]
00000c  88cd              LDRH     r5,[r1,#6]
00000e  4322              ORRS     r2,r2,r4
000010  888c              LDRH     r4,[r1,#4]
000012  432c              ORRS     r4,r4,r5
000014  4322              ORRS     r2,r2,r4
000016  890c              LDRH     r4,[r1,#8]
000018  4322              ORRS     r2,r2,r4
00001a  894c              LDRH     r4,[r1,#0xa]
00001c  4322              ORRS     r2,r2,r4
00001e  898c              LDRH     r4,[r1,#0xc]
000020  4322              ORRS     r2,r2,r4
000022  89cc              LDRH     r4,[r1,#0xe]
000024  4322              ORRS     r2,r2,r4
000026  431a              ORRS     r2,r2,r3
;;;190                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;191                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;192                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;193      /* Write to SPIx CR1 */
;;;194      SPIx->CR1 = tmpreg;
000028  8002              STRH     r2,[r0,#0]
;;;195      
;;;196      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;197      SPIx->I2SCFGR &= SPI_Mode_Select;		
00002a  8b82              LDRH     r2,[r0,#0x1c]
00002c  f4226200          BIC      r2,r2,#0x800
000030  8382              STRH     r2,[r0,#0x1c]
;;;198    
;;;199    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;200      /* Write to SPIx CRCPOLY */
;;;201      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000032  8a09              LDRH     r1,[r1,#0x10]
000034  8201              STRH     r1,[r0,#0x10]
;;;202    }
000036  bd30              POP      {r4,r5,pc}
;;;203    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;580      */
;;;581    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;582    {
;;;583      /* Check the parameters */
;;;584      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;585      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;586      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
;;;587      {
;;;588        /* Set NSS pin internally by software */
;;;589        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
;;;590      }
;;;591      else
;;;592      {
;;;593        /* Reset NSS pin internally by software */
;;;594        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000004  8801              LDRH     r1,[r0,#0]
000006  3aff              SUBS     r2,r2,#0xff           ;586
000008  d002              BEQ      |L20.16|
00000a  f4417180          ORR      r1,r1,#0x100          ;589
00000e  e001              B        |L20.20|
                  |L20.16|
000010  f4217180          BIC      r1,r1,#0x100
                  |L20.20|
000014  8001              STRH     r1,[r0,#0]            ;589
;;;595      }
;;;596    }
000016  4770              BX       lr
;;;597    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;604      */
;;;605    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;606    {
;;;607      /* Check the parameters */
;;;608      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;609      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;610      if (NewState != DISABLE)
;;;611      {
;;;612        /* Enable the selected SPI SS output */
;;;613        SPIx->CR2 |= CR2_SSOE_Set;
;;;614      }
;;;615      else
;;;616      {
;;;617        /* Disable the selected SPI SS output */
;;;618        SPIx->CR2 &= CR2_SSOE_Reset;
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L21.12|
000006  f0410104          ORR      r1,r1,#4              ;613
00000a  e001              B        |L21.16|
                  |L21.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L21.16|
000010  8081              STRH     r1,[r0,#4]            ;613
;;;619      }
;;;620    }
000012  4770              BX       lr
;;;621    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;369      */
;;;370    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;371    {
;;;372    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;373      /* Initialize the SPI_Direction member */
;;;374      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;375      /* initialize the SPI_Mode member */
;;;376      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;377      /* initialize the SPI_DataSize member */
;;;378      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;379      /* Initialize the SPI_CPOL member */
;;;380      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;381      /* Initialize the SPI_CPHA member */
;;;382      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;383      /* Initialize the SPI_NSS member */
;;;384      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;385      /* Initialize the SPI_BaudRatePrescaler member */
;;;386      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;387      /* Initialize the SPI_FirstBit member */
;;;388      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;389      /* Initialize the SPI_CRCPolynomial member */
;;;390      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;391    }
000016  4770              BX       lr
;;;392    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;646      */
;;;647    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;648    {
;;;649      /* Check the parameters */
;;;650      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;651      
;;;652      /* Enable the selected SPI CRC transmission */
;;;653      SPIx->CR1 |= CR1_CRCNext_Set;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;654    }
000008  4770              BX       lr
;;;655    
                          ENDP

