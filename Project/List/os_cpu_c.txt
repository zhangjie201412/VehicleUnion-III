; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\os_cpu_c.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\os_cpu_c.crf ..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView\os_cpu_c.c]
                          THUMB

                          AREA ||i.OSIdleTaskHook||, CODE, READONLY, ALIGN=2

                  OSIdleTaskHook PROC
;;;62     
;;;63     void  OSIdleTaskHook (void)
000000  4802              LDR      r0,|L1.12|
;;;64     {
;;;65     #if OS_CFG_APP_HOOKS_EN > 0u
;;;66         if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
000002  6800              LDR      r0,[r0,#0]  ; OS_AppIdleTaskHookPtr
000004  2800              CMP      r0,#0                 ;64
000006  d000              BEQ      |L1.10|
;;;67             (*OS_AppIdleTaskHookPtr)();
000008  4700              BX       r0
                  |L1.10|
;;;68         }
;;;69     #endif
;;;70     }
00000a  4770              BX       lr
;;;71     
                          ENDP

                  |L1.12|
                          DCD      OS_AppIdleTaskHookPtr

                          AREA ||i.OSInitHook||, CODE, READONLY, ALIGN=2

                  OSInitHook PROC
;;;85     
;;;86     void  OSInitHook (void)
000000  b530              PUSH     {r4,r5,lr}
;;;87     {
;;;88         CPU_STK_SIZE   i;
;;;89         CPU_STK       *p_stk;
;;;90     
;;;91     
;;;92         p_stk = OSCfg_ISRStkBasePtr;                            /* Clear the ISR stack                                    */
000002  4b09              LDR      r3,|L2.40|
;;;93         for (i = 0u; i < OSCfg_ISRStkSize; i++) {
000004  2000              MOVS     r0,#0
000006  4a09              LDR      r2,|L2.44|
000008  4604              MOV      r4,r0
00000a  6819              LDR      r1,[r3,#0]            ;87  ; OSCfg_ISRStkBasePtr
00000c  e001              B        |L2.18|
                  |L2.14|
;;;94             *p_stk++ = (CPU_STK)0u;
00000e  c110              STM      r1!,{r4}
000010  1c40              ADDS     r0,r0,#1              ;93
                  |L2.18|
000012  6815              LDR      r5,[r2,#0]            ;93  ; OSCfg_ISRStkSize
000014  42a8              CMP      r0,r5                 ;93
000016  d3fa              BCC      |L2.14|
;;;95         }
;;;96         OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize - 1u);
000018  6818              LDR      r0,[r3,#0]  ; OSCfg_ISRStkBasePtr
00001a  4905              LDR      r1,|L2.48|
00001c  eb000085          ADD      r0,r0,r5,LSL #2
000020  1f00              SUBS     r0,r0,#4
000022  6008              STR      r0,[r1,#0]  ; OS_CPU_ExceptStkBase
;;;97     }
000024  bd30              POP      {r4,r5,pc}
;;;98     
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      OSCfg_ISRStkBasePtr
                  |L2.44|
                          DCD      OSCfg_ISRStkSize
                  |L2.48|
                          DCD      ||.data||

                          AREA ||i.OSStatTaskHook||, CODE, READONLY, ALIGN=2

                  OSStatTaskHook PROC
;;;113    
;;;114    void  OSStatTaskHook (void)
000000  4802              LDR      r0,|L3.12|
;;;115    {
;;;116    #if OS_CFG_APP_HOOKS_EN > 0u
;;;117        if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
000002  6800              LDR      r0,[r0,#0]  ; OS_AppStatTaskHookPtr
000004  2800              CMP      r0,#0                 ;115
000006  d000              BEQ      |L3.10|
;;;118            (*OS_AppStatTaskHookPtr)();
000008  4700              BX       r0
                  |L3.10|
;;;119        }
;;;120    #endif
;;;121    }
00000a  4770              BX       lr
;;;122    
                          ENDP

                  |L3.12|
                          DCD      OS_AppStatTaskHookPtr

                          AREA ||i.OSTaskCreateHook||, CODE, READONLY, ALIGN=2

                  OSTaskCreateHook PROC
;;;136    
;;;137    void  OSTaskCreateHook (OS_TCB  *p_tcb)
000000  4902              LDR      r1,|L4.12|
;;;138    {
;;;139    #if OS_CFG_APP_HOOKS_EN > 0u
;;;140        if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
000002  6809              LDR      r1,[r1,#0]  ; OS_AppTaskCreateHookPtr
000004  2900              CMP      r1,#0                 ;138
000006  d000              BEQ      |L4.10|
;;;141            (*OS_AppTaskCreateHookPtr)(p_tcb);
000008  4708              BX       r1
                  |L4.10|
;;;142        }
;;;143    #else
;;;144        (void)p_tcb;                                            /* Prevent compiler warning                               */
;;;145    #endif
;;;146    }
00000a  4770              BX       lr
;;;147    
                          ENDP

                  |L4.12|
                          DCD      OS_AppTaskCreateHookPtr

                          AREA ||i.OSTaskDelHook||, CODE, READONLY, ALIGN=2

                  OSTaskDelHook PROC
;;;161    
;;;162    void  OSTaskDelHook (OS_TCB  *p_tcb)
000000  4902              LDR      r1,|L5.12|
;;;163    {
;;;164    #if OS_CFG_APP_HOOKS_EN > 0u
;;;165        if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
000002  6809              LDR      r1,[r1,#0]  ; OS_AppTaskDelHookPtr
000004  2900              CMP      r1,#0                 ;163
000006  d000              BEQ      |L5.10|
;;;166            (*OS_AppTaskDelHookPtr)(p_tcb);
000008  4708              BX       r1
                  |L5.10|
;;;167        }
;;;168    #else
;;;169        (void)p_tcb;                                            /* Prevent compiler warning                               */
;;;170    #endif
;;;171    }
00000a  4770              BX       lr
;;;172    
                          ENDP

                  |L5.12|
                          DCD      OS_AppTaskDelHookPtr

                          AREA ||i.OSTaskReturnHook||, CODE, READONLY, ALIGN=2

                  OSTaskReturnHook PROC
;;;187    
;;;188    void  OSTaskReturnHook (OS_TCB  *p_tcb)
000000  4902              LDR      r1,|L6.12|
;;;189    {
;;;190    #if OS_CFG_APP_HOOKS_EN > 0u
;;;191        if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
000002  6809              LDR      r1,[r1,#0]  ; OS_AppTaskReturnHookPtr
000004  2900              CMP      r1,#0                 ;189
000006  d000              BEQ      |L6.10|
;;;192            (*OS_AppTaskReturnHookPtr)(p_tcb);
000008  4708              BX       r1
                  |L6.10|
;;;193        }
;;;194    #else
;;;195        (void)p_tcb;                                            /* Prevent compiler warning                               */
;;;196    #endif
;;;197    }
00000a  4770              BX       lr
;;;198    
                          ENDP

                  |L6.12|
                          DCD      OS_AppTaskReturnHookPtr

                          AREA ||i.OSTaskStkInit||, CODE, READONLY, ALIGN=2

                  OSTaskStkInit PROC
;;;228    
;;;229    CPU_STK  *OSTaskStkInit (OS_TASK_PTR    p_task,
000000  b510              PUSH     {r4,lr}
;;;230                             void          *p_arg,
;;;231                             CPU_STK       *p_stk_base,
;;;232                             CPU_STK       *p_stk_limit,
;;;233                             CPU_STK_SIZE   stk_size,
;;;234                             OS_OPT         opt)
;;;235    {
;;;236        CPU_STK  *p_stk;
;;;237    
;;;238    
;;;239        (void)opt;                                              /* Prevent compiler warning                               */
;;;240    
;;;241        p_stk = &p_stk_base[stk_size];                          /* Load stack pointer                                     */
000002  9c02              LDR      r4,[sp,#8]
000004  eb020284          ADD      r2,r2,r4,LSL #2
;;;242                                                                /* Registers stacked as if auto-saved on exception        */
;;;243        *--p_stk = (CPU_STK)0x01000000u;                        /* xPSR                                                   */
000008  3a10              SUBS     r2,r2,#0x10
00000a  f04f7480          MOV      r4,#0x1000000
00000e  e9c20402          STRD     r0,r4,[r2,#8]
;;;244        *--p_stk = (CPU_STK)p_task;                             /* Entry Point                                            */
;;;245        *--p_stk = (CPU_STK)OS_TaskReturn;                      /* R14 (LR)                                               */
000012  4813              LDR      r0,|L7.96|
;;;246        *--p_stk = (CPU_STK)0x12121212u;                        /* R12                                                    */
000014  6050              STR      r0,[r2,#4]
000016  f04f3012          MOV      r0,#0x12121212
00001a  f8420904          STR      r0,[r2],#-4
;;;247        *--p_stk = (CPU_STK)0x03030303u;                        /* R3                                                     */
00001e  f1a20028          SUB      r0,r2,#0x28
;;;248        *--p_stk = (CPU_STK)0x02020202u;                        /* R2                                                     */
000022  f04f3202          MOV      r2,#0x2020202
000026  e9c01307          STRD     r1,r3,[r0,#0x1c]
;;;249        *--p_stk = (CPU_STK)p_stk_limit;                        /* R1                                                     */
;;;250        *--p_stk = (CPU_STK)p_arg;                              /* R0 : argument                                          */
;;;251                                                                /* Remaining registers saved on process stack             */
;;;252        *--p_stk = (CPU_STK)0x11111111u;                        /* R11                                                    */
00002a  f04f3111          MOV      r1,#0x11111111
;;;253        *--p_stk = (CPU_STK)0x10101010u;                        /* R10                                                    */
00002e  6181              STR      r1,[r0,#0x18]
000030  00d1              LSLS     r1,r2,#3
;;;254        *--p_stk = (CPU_STK)0x09090909u;                        /* R9                                                     */
000032  6141              STR      r1,[r0,#0x14]
000034  f04f3109          MOV      r1,#0x9090909
;;;255        *--p_stk = (CPU_STK)0x08080808u;                        /* R8                                                     */
000038  6101              STR      r1,[r0,#0x10]
00003a  0091              LSLS     r1,r2,#2
;;;256        *--p_stk = (CPU_STK)0x07070707u;                        /* R7                                                     */
00003c  60c1              STR      r1,[r0,#0xc]
00003e  f04f3107          MOV      r1,#0x7070707
000042  f04f3403          MOV      r4,#0x3030303         ;247
;;;257        *--p_stk = (CPU_STK)0x06060606u;                        /* R6                                                     */
000046  6081              STR      r1,[r0,#8]
000048  0061              LSLS     r1,r4,#1
;;;258        *--p_stk = (CPU_STK)0x05050505u;                        /* R5                                                     */
00004a  6041              STR      r1,[r0,#4]
00004c  f04f3105          MOV      r1,#0x5050505
000050  6001              STR      r1,[r0,#0]
000052  e9c02409          STRD     r2,r4,[r0,#0x24]
;;;259        *--p_stk = (CPU_STK)0x04040404u;                        /* R4                                                     */
000056  0051              LSLS     r1,r2,#1
000058  f8401d04          STR      r1,[r0,#-4]!
;;;260    
;;;261        return (p_stk);
;;;262    }
00005c  bd10              POP      {r4,pc}
;;;263    
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      OS_TaskReturn

                          AREA ||i.OSTaskSwHook||, CODE, READONLY, ALIGN=2

                  OSTaskSwHook PROC
;;;281    
;;;282    void  OSTaskSwHook (void)
000000  4810              LDR      r0,|L8.68|
;;;283    {
000002  b510              PUSH     {r4,lr}
;;;284    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;285        CPU_TS  ts;
;;;286    #endif
;;;287    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;288        CPU_TS  int_dis_time;
;;;289    #endif
;;;290    
;;;291    
;;;292    
;;;293    #if OS_CFG_APP_HOOKS_EN > 0u
;;;294        if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
000004  6800              LDR      r0,[r0,#0]  ; OS_AppTaskSwHookPtr
000006  b100              CBZ      r0,|L8.10|
;;;295            (*OS_AppTaskSwHookPtr)();
000008  4780              BLX      r0
                  |L8.10|
;;;296        }
;;;297    #endif
;;;298    
;;;299    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;300        ts = OS_TS_GET();
00000a  f7fffffe          BL       CPU_TS_TmrRd
;;;301        if (OSTCBCurPtr != OSTCBHighRdyPtr) {
00000e  490e              LDR      r1,|L8.72|
000010  4a0e              LDR      r2,|L8.76|
000012  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
000014  6812              LDR      r2,[r2,#0]  ; OSTCBHighRdyPtr
000016  4291              CMP      r1,r2
000018  d007              BEQ      |L8.42|
00001a  3194              ADDS     r1,r1,#0x94
;;;302            OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
00001c  684b              LDR      r3,[r1,#4]
00001e  1ac3              SUBS     r3,r0,r3
;;;303            OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
000020  600b              STR      r3,[r1,#0]
000022  688c              LDR      r4,[r1,#8]
000024  4423              ADD      r3,r3,r4
000026  608b              STR      r3,[r1,#8]
000028  3994              SUBS     r1,r1,#0x94
                  |L8.42|
;;;304        }
;;;305    
;;;306        OSTCBHighRdyPtr->CyclesStart = ts;
;;;307    #endif
;;;308    
;;;309    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;310        int_dis_time = CPU_IntDisMeasMaxCurReset();             /* Keep track of per-task interrupt disable time          */
;;;311        if (OSTCBCurPtr->IntDisTimeMax < int_dis_time) {
;;;312            OSTCBCurPtr->IntDisTimeMax = int_dis_time;
;;;313        }
;;;314    #endif
;;;315    
;;;316    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;317                                                                /* Keep track of per-task scheduler lock time             */
;;;318        if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
00002a  f8c20098          STR      r0,[r2,#0x98]
00002e  4a08              LDR      r2,|L8.80|
000030  f8d130b4          LDR      r3,[r1,#0xb4]
000034  6810              LDR      r0,[r2,#0]  ; OSSchedLockTimeMaxCur
000036  4283              CMP      r3,r0
000038  d201              BCS      |L8.62|
;;;319            OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
00003a  f8c100b4          STR      r0,[r1,#0xb4]
                  |L8.62|
;;;320        }
;;;321        OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
00003e  2000              MOVS     r0,#0
000040  6010              STR      r0,[r2,#0]  ; OSSchedLockTimeMaxCur
;;;322    #endif
;;;323    }
000042  bd10              POP      {r4,pc}
;;;324    
                          ENDP

                  |L8.68|
                          DCD      OS_AppTaskSwHookPtr
                  |L8.72|
                          DCD      OSTCBCurPtr
                  |L8.76|
                          DCD      OSTCBHighRdyPtr
                  |L8.80|
                          DCD      OSSchedLockTimeMaxCur

                          AREA ||i.OSTimeTickHook||, CODE, READONLY, ALIGN=2

                  OSTimeTickHook PROC
;;;338    
;;;339    void  OSTimeTickHook (void)
000000  4802              LDR      r0,|L9.12|
;;;340    {
;;;341    #if OS_CFG_APP_HOOKS_EN > 0u
;;;342        if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
000002  6800              LDR      r0,[r0,#0]  ; OS_AppTimeTickHookPtr
000004  2800              CMP      r0,#0                 ;340
000006  d000              BEQ      |L9.10|
;;;343            (*OS_AppTimeTickHookPtr)();
000008  4700              BX       r0
                  |L9.10|
;;;344        }
;;;345    #endif
;;;346    }
00000a  4770              BX       lr
;;;347    
                          ENDP

                  |L9.12|
                          DCD      OS_AppTimeTickHookPtr

                          AREA ||i.OS_CPU_SysTickHandler||, CODE, READONLY, ALIGN=2

                  OS_CPU_SysTickHandler PROC
;;;362    
;;;363    void  OS_CPU_SysTickHandler (void)
000000  b510              PUSH     {r4,lr}
;;;364    {
;;;365        CPU_SR_ALLOC();
;;;366    
;;;367    
;;;368        CPU_CRITICAL_ENTER();
000002  f7fffffe          BL       CPU_SR_Save
;;;369        OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
000006  4a06              LDR      r2,|L10.32|
000008  7811              LDRB     r1,[r2,#0]  ; OSIntNestingCtr
00000a  1c49              ADDS     r1,r1,#1
00000c  7011              STRB     r1,[r2,#0]
;;;370        CPU_CRITICAL_EXIT();
00000e  f7fffffe          BL       CPU_SR_Restore
;;;371    
;;;372        OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
000012  f7fffffe          BL       OSTimeTick
;;;373    
;;;374        OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      OSIntExit
;;;375    }
;;;376    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      OSIntNestingCtr

                          AREA ||i.OS_CPU_SysTickInit||, CODE, READONLY, ALIGN=2

                  OS_CPU_SysTickInit PROC
;;;390    
;;;391    void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;392    {
;;;393        CPU_INT32U  prio;
;;;394    
;;;395    
;;;396        CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
000004  1e40              SUBS     r0,r0,#1
000006  6148              STR      r0,[r1,#0x14]
;;;397    
;;;398                                                                /* Set SysTick handler prio.                              */
;;;399        prio  = CPU_REG_NVIC_SHPRI3;
000008  4806              LDR      r0,|L11.36|
00000a  6802              LDR      r2,[r0,#0]
;;;400        prio &= DEF_BIT_FIELD(24, 0);
00000c  f022427f          BIC      r2,r2,#0xff000000
;;;401        prio |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);
;;;402    
;;;403        CPU_REG_NVIC_SHPRI3 = prio;
000010  6002              STR      r2,[r0,#0]
;;;404    
;;;405                                                                /* Enable timer.                                          */
;;;406        CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
000012  6908              LDR      r0,[r1,#0x10]
000014  f0400005          ORR      r0,r0,#5
000018  6108              STR      r0,[r1,#0x10]
;;;407                                CPU_REG_NVIC_ST_CTRL_ENABLE;
;;;408                                                                /* Enable timer interrupt.                                */
;;;409        CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_TICKINT;
00001a  6908              LDR      r0,[r1,#0x10]
00001c  f0400002          ORR      r0,r0,#2
000020  6108              STR      r0,[r1,#0x10]
;;;410    }
000022  4770              BX       lr
;;;411    
                          ENDP

                  |L11.36|
                          DCD      0xe000ed20

                          AREA ||.data||, DATA, ALIGN=2

                  OS_CPU_ExceptStkBase
                          DCD      0x00000000
