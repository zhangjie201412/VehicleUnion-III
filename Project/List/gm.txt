; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\gm.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\gm.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\gm.crf ..\PAL\vehicles\gm.c]
                          THUMB

                          AREA ||i.gm_check_fault_code||, CODE, READONLY, ALIGN=2

                  gm_check_fault_code PROC
;;;1311   
;;;1312   uint32_t *gm_check_fault_code(uint8_t id, uint8_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1313   {
000004  460e              MOV      r6,r1
;;;1314       int8_t ret;
;;;1315       uint8_t length;
;;;1316       CanRxMsg *rxMsg;
;;;1317       uint16_t txId = gm_code_list[id][0];
000006  4925              LDR      r1,|L1.156|
000008  f8314020          LDRH     r4,[r1,r0,LSL #2]
;;;1318       uint16_t rxId = gm_code_list[id][1];
00000c  eb010080          ADD      r0,r1,r0,LSL #2
;;;1319   
;;;1320       //clear buf
;;;1321       memset(gm_code_val, 0x00, FAULT_CODE_MAX_SIZE);
000010  210a              MOVS     r1,#0xa
000012  8847              LDRH     r7,[r0,#2]            ;1318
000014  4822              LDR      r0,|L1.160|
000016  f7fffffe          BL       __aeabi_memclr4
;;;1322       gm_fault_code.StdId = txId;
00001a  4820              LDR      r0,|L1.156|
;;;1323       ret = flexcan_ioctl(DIR_BI, &gm_fault_code, rxId, 1);
00001c  2301              MOVS     r3,#1
00001e  3828              SUBS     r0,r0,#0x28           ;1322
000020  4601              MOV      r1,r0
000022  6004              STR      r4,[r0,#0]  ; gm_fault_code
000024  463a              MOV      r2,r7
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       flexcan_ioctl
;;;1324       if(ret == 1) {
00002c  2801              CMP      r0,#1
00002e  d108              BNE      |L1.66|
;;;1325           rxMsg = flexcan_dump();
000030  f7fffffe          BL       flexcan_dump
;;;1326           if(rxMsg == NULL) {
000034  b118              CBZ      r0,|L1.62|
;;;1327               *len = 0;
;;;1328               return NULL;
;;;1329           }
;;;1330           //check the return bytes
;;;1331           if(rxMsg->Data[0] == 0x81) {
000036  7ac1              LDRB     r1,[r0,#0xb]
000038  2981              CMP      r1,#0x81
00003a  d005              BEQ      |L1.72|
00003c  e001              B        |L1.66|
                  |L1.62|
00003e  2000              MOVS     r0,#0                 ;1327
000040  7030              STRB     r0,[r6,#0]            ;1327
                  |L1.66|
;;;1332               gm_code_val[0] = (rxMsg->Data[1] << 8) | rxMsg->Data[2];
;;;1333               if(gm_code_val[0] == 0x00) {
;;;1334                   *len = 1;
;;;1335                   return gm_code_val;
;;;1336               }
;;;1337           } else {
;;;1338               return NULL;
;;;1339           }
;;;1340       } else {
;;;1341           return NULL;
000042  2000              MOVS     r0,#0
                  |L1.68|
;;;1342       }
;;;1343       length = 1;
;;;1344       for(;;) {
;;;1345           ret = flexcan_ioctl(DIR_INPUT, NULL, rxId, 1);
;;;1346           if(ret == 1) {
;;;1347               rxMsg = flexcan_dump();
;;;1348               if(rxMsg == NULL) {
;;;1349                   *len = length;
;;;1350                   break;
;;;1351               }
;;;1352               //check the return bytes
;;;1353               if(rxMsg->Data[0] == 0x81) {
;;;1354                   length ++;
;;;1355                   gm_code_val[length - 1] = (rxMsg->Data[1] << 8) | rxMsg->Data[2];
;;;1356                   if(gm_code_val[length - 1] == 0x00) {
;;;1357                       break;
;;;1358                   }
;;;1359               } else {
;;;1360                   break;
;;;1361               }
;;;1362           } else {
;;;1363               break;
;;;1364           }
;;;1365       }
;;;1366       *len = length;
;;;1367   
;;;1368       return gm_code_val;
;;;1369   }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L1.72|
000048  8980              LDRH     r0,[r0,#0xc]          ;1332
00004a  4d15              LDR      r5,|L1.160|
00004c  ba40              REV16    r0,r0                 ;1332
00004e  6028              STR      r0,[r5,#0]            ;1332  ; gm_code_val
000050  6828              LDR      r0,[r5,#0]            ;1333  ; gm_code_val
000052  b148              CBZ      r0,|L1.104|
000054  2401              MOVS     r4,#1                 ;1343
                  |L1.86|
000056  2301              MOVS     r3,#1                 ;1345
000058  463a              MOV      r2,r7                 ;1345
00005a  2100              MOVS     r1,#0                 ;1345
00005c  4618              MOV      r0,r3                 ;1345
00005e  f7fffffe          BL       flexcan_ioctl
000062  2801              CMP      r0,#1                 ;1346
000064  d003              BEQ      |L1.110|
000066  e016              B        |L1.150|
                  |L1.104|
000068  2001              MOVS     r0,#1                 ;1334
00006a  7030              STRB     r0,[r6,#0]            ;1334
00006c  e014              B        |L1.152|
                  |L1.110|
00006e  f7fffffe          BL       flexcan_dump
000072  b118              CBZ      r0,|L1.124|
000074  7ac1              LDRB     r1,[r0,#0xb]          ;1353
000076  2981              CMP      r1,#0x81              ;1353
000078  d002              BEQ      |L1.128|
00007a  e00c              B        |L1.150|
                  |L1.124|
00007c  7034              STRB     r4,[r6,#0]            ;1349
00007e  e00a              B        |L1.150|
                  |L1.128|
000080  8980              LDRH     r0,[r0,#0xc]          ;1355
000082  1c64              ADDS     r4,r4,#1              ;1354
000084  b2e4              UXTB     r4,r4                 ;1354
000086  ba41              REV16    r1,r0                 ;1355
000088  eb050084          ADD      r0,r5,r4,LSL #2       ;1355
00008c  f8401d04          STR      r1,[r0,#-4]!          ;1355
000090  6800              LDR      r0,[r0,#0]            ;1356
000092  2800              CMP      r0,#0                 ;1356
000094  d1df              BNE      |L1.86|
                  |L1.150|
000096  7034              STRB     r4,[r6,#0]            ;1366
                  |L1.152|
000098  4801              LDR      r0,|L1.160|
00009a  e7d3              B        |L1.68|
                          ENDP

                  |L1.156|
                          DCD      ||.data||+0x80c
                  |L1.160|
                          DCD      ||.bss||+0x34

                          AREA ||i.gm_clear_fault_code||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_clear_fault_code PROC
;;;1299   
;;;1300   void gm_clear_fault_code(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1301   {
;;;1302       uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;1303       logi("-> %s\r\n", __func__);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       OSTimeGet
00000a  4912              LDR      r1,|L2.84|
00000c  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00000e  0789              LSLS     r1,r1,#30
000010  d50c              BPL      |L2.44|
000012  f2413288          MOV      r2,#0x1388
000016  fbb0f1f2          UDIV     r1,r0,r2
00001a  fb020011          MLS      r0,r2,r1,r0
00001e  2205              MOVS     r2,#5
000020  fbb0f2f2          UDIV     r2,r0,r2
000024  4b0c              LDR      r3,|L2.88|
000026  a00d              ADR      r0,|L2.92|
000028  f7fffffe          BL       __2printf
                  |L2.44|
;;;1304       
;;;1305       for(i = 0; i < FAULT_CODE_MAX_SIZE; i++) {
;;;1306           gm_clear_fault.StdId = gm_code_list[i][0];
00002c  4d12              LDR      r5,|L2.120|
00002e  f1a50614          SUB      r6,r5,#0x14
000032  bf00              NOP      
                  |L2.52|
000034  f8350024          LDRH     r0,[r5,r4,LSL #2]
;;;1307           flexcan_send_frame(&gm_clear_fault);
000038  6030              STR      r0,[r6,#0]  ; gm_clear_fault
00003a  480f              LDR      r0,|L2.120|
00003c  3814              SUBS     r0,r0,#0x14
00003e  f7fffffe          BL       flexcan_send_frame
;;;1308           xdelay_ms(200);
000042  20c8              MOVS     r0,#0xc8
000044  f7fffffe          BL       xdelay_ms
000048  1c64              ADDS     r4,r4,#1              ;1305
00004a  b2e4              UXTB     r4,r4                 ;1305
00004c  2c0a              CMP      r4,#0xa               ;1305
00004e  d3f1              BCC      |L2.52|
;;;1309       }
;;;1310   }
000050  bdf8              POP      {r3-r7,pc}
;;;1311   
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      DEBUG_MODE
                  |L2.88|
                          DCD      ||.constdata||+0x78
                  |L2.92|
00005c  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
000060  642e2530
000064  33642f49
000068  5d3a202d
00006c  3e202573
000070  0d0a0d0a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L2.120|
                          DCD      ||.data||+0x80c

                          AREA ||i.gm_ctrl_door||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_ctrl_door PROC
;;;1221   
;;;1222   void gm_ctrl_door(uint8_t state)
000000  b538              PUSH     {r3-r5,lr}
;;;1223   {
000002  4605              MOV      r5,r0
;;;1224       uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;1225       logi("-> %s\r\n", __func__);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       OSTimeGet
00000c  4916              LDR      r1,|L3.104|
00000e  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
000010  0789              LSLS     r1,r1,#30
000012  d50c              BPL      |L3.46|
000014  f2413288          MOV      r2,#0x1388
000018  fbb0f1f2          UDIV     r1,r0,r2
00001c  fb020011          MLS      r0,r2,r1,r0
000020  2205              MOVS     r2,#5
000022  fbb0f2f2          UDIV     r2,r0,r2
000026  4b11              LDR      r3,|L3.108|
000028  a011              ADR      r0,|L3.112|
00002a  f7fffffe          BL       __2printf
                  |L3.46|
;;;1226       if(state) {
00002e  b165              CBZ      r5,|L3.74|
;;;1227           for(i = 0; i < 5; i++) {
;;;1228               flexcan_send_frame(&gm_door_on[i]);
000030  4d16              LDR      r5,|L3.140|
000032  bf00              NOP      
                  |L3.52|
000034  eb040084          ADD      r0,r4,r4,LSL #2
000038  eb050080          ADD      r0,r5,r0,LSL #2
00003c  f7fffffe          BL       flexcan_send_frame
000040  1c64              ADDS     r4,r4,#1              ;1227
000042  b2e4              UXTB     r4,r4                 ;1227
000044  2c05              CMP      r4,#5                 ;1227
000046  d3f5              BCC      |L3.52|
;;;1229           }
;;;1230       } else {
;;;1231           for(i = 0; i < 5; i++) {
;;;1232               flexcan_send_frame(&gm_door_off[i]);
;;;1233           }
;;;1234       }
;;;1235   }
000048  bd38              POP      {r3-r5,pc}
                  |L3.74|
00004a  4d10              LDR      r5,|L3.140|
00004c  f1150564          ADDS.W   r5,r5,#0x64           ;1232
                  |L3.80|
000050  eb040084          ADD      r0,r4,r4,LSL #2       ;1232
000054  eb050080          ADD      r0,r5,r0,LSL #2       ;1232
000058  f7fffffe          BL       flexcan_send_frame
00005c  1c64              ADDS     r4,r4,#1              ;1231
00005e  b2e4              UXTB     r4,r4                 ;1231
000060  2c05              CMP      r4,#5                 ;1231
000062  d3f5              BCC      |L3.80|
000064  bd38              POP      {r3-r5,pc}
;;;1236   
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      DEBUG_MODE
                  |L3.108|
                          DCD      ||.constdata||+0x2f
                  |L3.112|
000070  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
000074  642e2530
000078  33642f49
00007c  5d3a202d
000080  3e202573
000084  0d0a0d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L3.140|
                          DCD      ||.data||+0x48

                          AREA ||i.gm_ctrl_findcar||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_ctrl_findcar PROC
;;;1281   
;;;1282   void gm_ctrl_findcar(uint8_t state)
000000  b538              PUSH     {r3-r5,lr}
;;;1283   {
000002  4605              MOV      r5,r0
;;;1284       uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;1285       logi("-> %s\r\n", __func__);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       OSTimeGet
00000c  4919              LDR      r1,|L4.116|
00000e  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
000010  0789              LSLS     r1,r1,#30
000012  d50c              BPL      |L4.46|
000014  f2413288          MOV      r2,#0x1388
000018  fbb0f1f2          UDIV     r1,r0,r2
00001c  fb020011          MLS      r0,r2,r1,r0
000020  2205              MOVS     r2,#5
000022  fbb0f2f2          UDIV     r2,r0,r2
000026  4b14              LDR      r3,|L4.120|
000028  a014              ADR      r0,|L4.124|
00002a  f7fffffe          BL       __2printf
                  |L4.46|
;;;1286       xdelay(1);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       xdelay
;;;1287       if(state) {
000034  b175              CBZ      r5,|L4.84|
;;;1288           for(i = 0; i < 2; i ++) {
;;;1289               flexcan_send_frame(&gm_findcar_on[i]);
000036  4d18              LDR      r5,|L4.152|
                  |L4.56|
000038  eb040084          ADD      r0,r4,r4,LSL #2
00003c  eb050080          ADD      r0,r5,r0,LSL #2
000040  f7fffffe          BL       flexcan_send_frame
;;;1290               xdelay_ms(200);
000044  20c8              MOVS     r0,#0xc8
000046  f7fffffe          BL       xdelay_ms
00004a  1c64              ADDS     r4,r4,#1              ;1288
00004c  b2e4              UXTB     r4,r4                 ;1288
00004e  2c02              CMP      r4,#2                 ;1288
000050  d3f2              BCC      |L4.56|
;;;1291           }
;;;1292       } else {
;;;1293           for(i = 0; i < 2; i++) {
;;;1294               flexcan_send_frame(&gm_findcar_off[i]);
;;;1295               xdelay_ms(200);
;;;1296           }
;;;1297       }
;;;1298   }
000052  bd38              POP      {r3-r5,pc}
                  |L4.84|
000054  4d10              LDR      r5,|L4.152|
000056  3528              ADDS     r5,r5,#0x28           ;1294
                  |L4.88|
000058  eb040084          ADD      r0,r4,r4,LSL #2       ;1294
00005c  eb050080          ADD      r0,r5,r0,LSL #2       ;1294
000060  f7fffffe          BL       flexcan_send_frame
000064  20c8              MOVS     r0,#0xc8              ;1295
000066  f7fffffe          BL       xdelay_ms
00006a  1c64              ADDS     r4,r4,#1              ;1293
00006c  b2e4              UXTB     r4,r4                 ;1293
00006e  2c02              CMP      r4,#2                 ;1293
000070  d3f2              BCC      |L4.88|
000072  bd38              POP      {r3-r5,pc}
;;;1299   
                          ENDP

                  |L4.116|
                          DCD      DEBUG_MODE
                  |L4.120|
                          DCD      ||.constdata||+0x68
                  |L4.124|
00007c  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
000080  642e2530
000084  33642f49
000088  5d3a202d
00008c  3e202573
000090  0d0a0d0a
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L4.152|
                          DCD      ||.data||+0x228

                          AREA ||i.gm_ctrl_light||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_ctrl_light PROC
;;;1236   
;;;1237   void gm_ctrl_light(uint8_t state)
000000  b538              PUSH     {r3-r5,lr}
;;;1238   {
000002  4604              MOV      r4,r0
;;;1239       logi("-> %s\r\n", __func__);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       OSTimeGet
00000a  490d              LDR      r1,|L5.64|
00000c  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00000e  0789              LSLS     r1,r1,#30
000010  d50c              BPL      |L5.44|
000012  f2413288          MOV      r2,#0x1388
000016  fbb0f1f2          UDIV     r1,r0,r2
00001a  fb020011          MLS      r0,r2,r1,r0
00001e  2205              MOVS     r2,#5
000020  fbb0f2f2          UDIV     r2,r0,r2
000024  4b07              LDR      r3,|L5.68|
000026  a008              ADR      r0,|L5.72|
000028  f7fffffe          BL       __2printf
                  |L5.44|
;;;1240       if(state) {
00002c  b10c              CBZ      r4,|L5.50|
;;;1241           flexcan_send_frame(&gm_lamp_on);
00002e  480d              LDR      r0,|L5.100|
000030  e001              B        |L5.54|
                  |L5.50|
;;;1242       } else {
;;;1243           flexcan_send_frame(&gm_lamp_off);
000032  480c              LDR      r0,|L5.100|
000034  3014              ADDS     r0,r0,#0x14
                  |L5.54|
000036  e8bd4038          POP      {r3-r5,lr}
00003a  f7ffbffe          B.W      flexcan_send_frame
;;;1244       }
;;;1245   }
;;;1246   
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      DEBUG_MODE
                  |L5.68|
                          DCD      ||.constdata||+0x3c
                  |L5.72|
000048  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
00004c  642e2530
000050  33642f49
000054  5d3a202d
000058  3e202573
00005c  0d0a0d0a
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L5.100|
                          DCD      ||.data||+0x20

                          AREA ||i.gm_ctrl_sunroof||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_ctrl_sunroof PROC
;;;1246   
;;;1247   void gm_ctrl_sunroof(uint8_t state)
000000  b538              PUSH     {r3-r5,lr}
;;;1248   {
000002  4605              MOV      r5,r0
;;;1249       uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;1250       logi("-> %s\r\n", __func__);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       OSTimeGet
00000c  4918              LDR      r1,|L6.112|
00000e  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
000010  0789              LSLS     r1,r1,#30
000012  d50c              BPL      |L6.46|
000014  f2413288          MOV      r2,#0x1388
000018  fbb0f1f2          UDIV     r1,r0,r2
00001c  fb020011          MLS      r0,r2,r1,r0
000020  2205              MOVS     r2,#5
000022  fbb0f2f2          UDIV     r2,r0,r2
000026  4b13              LDR      r3,|L6.116|
000028  a013              ADR      r0,|L6.120|
00002a  f7fffffe          BL       __2printf
                  |L6.46|
;;;1251       if(state) {
00002e  b17d              CBZ      r5,|L6.80|
;;;1252           for(i = 0; i < 3; i ++) {
;;;1253               flexcan_send_frame(&gm_sunroof_on[i]);
000030  4d18              LDR      r5,|L6.148|
000032  bf00              NOP      
                  |L6.52|
000034  eb040084          ADD      r0,r4,r4,LSL #2
000038  eb050080          ADD      r0,r5,r0,LSL #2
00003c  f7fffffe          BL       flexcan_send_frame
;;;1254               xdelay(3);
000040  2003              MOVS     r0,#3
000042  f7fffffe          BL       xdelay
000046  1c64              ADDS     r4,r4,#1              ;1252
000048  b2e4              UXTB     r4,r4                 ;1252
00004a  2c03              CMP      r4,#3                 ;1252
00004c  d3f2              BCC      |L6.52|
;;;1255           }
;;;1256       } else {
;;;1257           for(i = 0; i < 3; i++) {
;;;1258               flexcan_send_frame(&gm_sunroof_off[i]);
;;;1259               xdelay(3);
;;;1260           }
;;;1261       }
;;;1262   }
00004e  bd38              POP      {r3-r5,pc}
                  |L6.80|
000050  4d10              LDR      r5,|L6.148|
000052  353c              ADDS     r5,r5,#0x3c           ;1258
                  |L6.84|
000054  eb040084          ADD      r0,r4,r4,LSL #2       ;1258
000058  eb050080          ADD      r0,r5,r0,LSL #2       ;1258
00005c  f7fffffe          BL       flexcan_send_frame
000060  2003              MOVS     r0,#3                 ;1259
000062  f7fffffe          BL       xdelay
000066  1c64              ADDS     r4,r4,#1              ;1257
000068  b2e4              UXTB     r4,r4                 ;1257
00006a  2c03              CMP      r4,#3                 ;1257
00006c  d3f2              BCC      |L6.84|
00006e  bd38              POP      {r3-r5,pc}
;;;1263   
                          ENDP

                  |L6.112|
                          DCD      DEBUG_MODE
                  |L6.116|
                          DCD      ||.constdata||+0x4a
                  |L6.120|
000078  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
00007c  642e2530
000080  33642f49
000084  5d3a202d
000088  3e202573
00008c  0d0a0d0a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L6.148|
                          DCD      ||.data||+0x1b0

                          AREA ||i.gm_ctrl_trunk||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_ctrl_trunk PROC
;;;1263   
;;;1264   void gm_ctrl_trunk(uint8_t state)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1265   {
000002  4606              MOV      r6,r0
;;;1266       uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;1267       logi("-> %s\r\n", __func__);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       OSTimeGet
00000c  491a              LDR      r1,|L7.120|
00000e  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
000010  0789              LSLS     r1,r1,#30
000012  d50c              BPL      |L7.46|
000014  f2413288          MOV      r2,#0x1388
000018  fbb0f1f2          UDIV     r1,r0,r2
00001c  fb020011          MLS      r0,r2,r1,r0
000020  2205              MOVS     r2,#5
000022  fbb0f2f2          UDIV     r2,r0,r2
000026  4b15              LDR      r3,|L7.124|
000028  a015              ADR      r0,|L7.128|
00002a  f7fffffe          BL       __2printf
                  |L7.46|
;;;1268       xdelay(1);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       xdelay
;;;1269       if(state) {
;;;1270           for(i = 0; i < 2; i ++) {
;;;1271               flexcan_send_frame(&gm_trunk_on[i]);
;;;1272               xdelay_ms(500);
000034  f44f75fa          MOV      r5,#0x1f4
000038  b176              CBZ      r6,|L7.88|
00003a  4e18              LDR      r6,|L7.156|
                  |L7.60|
00003c  eb040084          ADD      r0,r4,r4,LSL #2       ;1271
000040  eb060080          ADD      r0,r6,r0,LSL #2       ;1271
000044  f7fffffe          BL       flexcan_send_frame
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       xdelay_ms
00004e  1c64              ADDS     r4,r4,#1              ;1270
000050  b2e4              UXTB     r4,r4                 ;1270
000052  2c02              CMP      r4,#2                 ;1270
000054  d3f2              BCC      |L7.60|
;;;1273           }
;;;1274       } else {
;;;1275           for(i = 0; i < 2; i++) {
;;;1276               flexcan_send_frame(&gm_trunk_off[i]);
;;;1277               xdelay_ms(500);
;;;1278           }
;;;1279       }
;;;1280   }
000056  bdf8              POP      {r3-r7,pc}
                  |L7.88|
000058  4e10              LDR      r6,|L7.156|
00005a  3628              ADDS     r6,r6,#0x28           ;1276
                  |L7.92|
00005c  eb040084          ADD      r0,r4,r4,LSL #2       ;1276
000060  eb060080          ADD      r0,r6,r0,LSL #2       ;1276
000064  f7fffffe          BL       flexcan_send_frame
000068  4628              MOV      r0,r5                 ;1277
00006a  f7fffffe          BL       xdelay_ms
00006e  1c64              ADDS     r4,r4,#1              ;1275
000070  b2e4              UXTB     r4,r4                 ;1275
000072  2c02              CMP      r4,#2                 ;1275
000074  d3f2              BCC      |L7.92|
000076  bdf8              POP      {r3-r7,pc}
;;;1281   
                          ENDP

                  |L7.120|
                          DCD      DEBUG_MODE
                  |L7.124|
                          DCD      ||.constdata||+0x5a
                  |L7.128|
000080  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
000084  642e2530
000088  33642f49
00008c  5d3a202d
000090  3e202573
000094  0d0a0d0a
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L7.156|
                          DCD      ||.data||+0x160

                          AREA ||i.gm_ctrl_window||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_ctrl_window PROC
;;;1201   
;;;1202   void gm_ctrl_window(uint8_t state)
000000  b538              PUSH     {r3-r5,lr}
;;;1203   {
000002  4605              MOV      r5,r0
;;;1204       uint8_t i = 0;
000004  2400              MOVS     r4,#0
;;;1205   
;;;1206       logi("-> %s\r\n", __func__);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       OSTimeGet
00000c  491b              LDR      r1,|L8.124|
00000e  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
000010  0789              LSLS     r1,r1,#30
000012  d50c              BPL      |L8.46|
000014  f2413288          MOV      r2,#0x1388
000018  fbb0f1f2          UDIV     r1,r0,r2
00001c  fb020011          MLS      r0,r2,r1,r0
000020  2205              MOVS     r2,#5
000022  fbb0f2f2          UDIV     r2,r0,r2
000026  4b16              LDR      r3,|L8.128|
000028  a016              ADR      r0,|L8.132|
00002a  f7fffffe          BL       __2printf
                  |L8.46|
;;;1207       flexcan_send_frame(&gm_exit_cmd);
00002e  481c              LDR      r0,|L8.160|
000030  f7fffffe          BL       flexcan_send_frame
;;;1208       xdelay_ms(500);
000034  f44f70fa          MOV      r0,#0x1f4
000038  f7fffffe          BL       xdelay_ms
;;;1209       if(state) {
00003c  b175              CBZ      r5,|L8.92|
;;;1210           for(i = 0; i < 2; i++) {
;;;1211               flexcan_send_frame(&gm_window_on[i]);
00003e  4d19              LDR      r5,|L8.164|
                  |L8.64|
000040  eb040084          ADD      r0,r4,r4,LSL #2
000044  eb050080          ADD      r0,r5,r0,LSL #2
000048  f7fffffe          BL       flexcan_send_frame
;;;1212               xdelay(5);
00004c  2005              MOVS     r0,#5
00004e  f7fffffe          BL       xdelay
000052  1c64              ADDS     r4,r4,#1              ;1210
000054  b2e4              UXTB     r4,r4                 ;1210
000056  2c02              CMP      r4,#2                 ;1210
000058  d3f2              BCC      |L8.64|
;;;1213           }
;;;1214       } else {
;;;1215           for(i = 0; i < 2; i++) {
;;;1216               flexcan_send_frame(&gm_window_off[i]);
;;;1217               xdelay(5);
;;;1218           }
;;;1219       }
;;;1220   }
00005a  bd38              POP      {r3-r5,pc}
                  |L8.92|
00005c  4d11              LDR      r5,|L8.164|
00005e  3528              ADDS     r5,r5,#0x28           ;1216
                  |L8.96|
000060  eb040084          ADD      r0,r4,r4,LSL #2       ;1216
000064  eb050080          ADD      r0,r5,r0,LSL #2       ;1216
000068  f7fffffe          BL       flexcan_send_frame
00006c  2005              MOVS     r0,#5                 ;1217
00006e  f7fffffe          BL       xdelay
000072  1c64              ADDS     r4,r4,#1              ;1215
000074  b2e4              UXTB     r4,r4                 ;1215
000076  2c02              CMP      r4,#2                 ;1215
000078  d3f2              BCC      |L8.96|
00007a  bd38              POP      {r3-r5,pc}
;;;1221   
                          ENDP

                  |L8.124|
                          DCD      DEBUG_MODE
                  |L8.128|
                          DCD      ||.constdata||+0x20
                  |L8.132|
000084  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
000088  642e2530
00008c  33642f49
000090  5d3a202d
000094  3e202573
000098  0d0a0d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L8.160|
                          DCD      ||.data||+0xc
                  |L8.164|
                          DCD      ||.data||+0x110

                          AREA ||i.gm_data_stream||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  gm_data_stream PROC
;;;1107   
;;;1108   uint8_t* gm_data_stream(uint8_t pid, uint8_t *len)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1109   {
000004  4604              MOV      r4,r0
;;;1110       uint8_t i, j;
;;;1111       int8_t ret;
;;;1112       uint8_t valid_len;
;;;1113       uint8_t valid_index = 0;
;;;1114       uint8_t data_type;
;;;1115       uint8_t offset;
;;;1116   
;;;1117       CanTxMsg txMsg;
;;;1118       CanRxMsg *rxMsg;
;;;1119   
;;;1120       //add tpms fake data
;;;1121       if(pid == TPMS_DATA_LFTIREP) {
;;;1122           *len = 1;
000006  2001              MOVS     r0,#1
000008  b08b              SUB      sp,sp,#0x2c           ;1109
00000a  460d              MOV      r5,r1                 ;1109
00000c  2c35              CMP      r4,#0x35              ;1121
00000e  d00e              BEQ      |L9.46|
;;;1123           return fake1;
;;;1124       }
;;;1125       if(pid == TPMS_DATA_RFTIREP) {
000010  2c36              CMP      r4,#0x36
000012  d011              BEQ      |L9.56|
;;;1126           *len = 1;
;;;1127           return fake2;
;;;1128       }
;;;1129       if(pid == TPMS_DATA_LRTIREP) {
000014  2c37              CMP      r4,#0x37
000016  d013              BEQ      |L9.64|
;;;1130           *len = 1;
;;;1131           return fake3;
;;;1132       }
;;;1133       if(pid == TPMS_DATA_RRTIREP) {
000018  2c38              CMP      r4,#0x38
00001a  d015              BEQ      |L9.72|
;;;1134           *len = 1;
;;;1135           return fake4;
;;;1136       }
;;;1137   
;;;1138       //check if this pid supported
;;;1139       if(gmSupportItems[pid].support != SUPPORTED) {
00001c  4848              LDR      r0,|L9.320|
00001e  eb000044          ADD      r0,r0,r4,LSL #1
000022  7840              LDRB     r0,[r0,#1]
000024  2801              CMP      r0,#1
000026  d013              BEQ      |L9.80|
;;;1140           *len = UNSUPPORTED_LEN;
000028  20ff              MOVS     r0,#0xff
00002a  7008              STRB     r0,[r1,#0]
;;;1141           return NULL;
00002c  e079              B        |L9.290|
                  |L9.46|
00002e  7008              STRB     r0,[r1,#0]            ;1122
000030  4844              LDR      r0,|L9.324|
                  |L9.50|
;;;1142       }
;;;1143   
;;;1144       //clear flexcan rx buf
;;;1145       xdelay_ms(400);
;;;1146       //clear rx buf
;;;1147       memset(gm_rx_buf, 0x00, 8);
;;;1148   
;;;1149       valid_len = gmDataStream[pid].valid_len;
;;;1150       offset = gmDataStream[pid].offset;
;;;1151   
;;;1152       //send pid data
;;;1153       txMsg.StdId = gmDataStream[pid].txId[0];
;;;1154       txMsg.IDE = CAN_ID_STD;
;;;1155       txMsg.DLC = 8;
;;;1156       for(i = 0; i < txMsg.DLC; i++) {
;;;1157           txMsg.Data[i] = gmDataStream[pid].data[i];
;;;1158       }
;;;1159       //get data type
;;;1160       data_type = gmDataStream[pid].data[1] + 0x40;
;;;1161       ret = flexcan_ioctl(DIR_BI, &txMsg, gmDataStream[pid].rxId[0], 1);
;;;1162       if(ret > 0) {
;;;1163           rxMsg = flexcan_dump();
;;;1164           if(rxMsg == NULL) {
;;;1165               return NULL;
;;;1166           }
;;;1167           if(gmDataStream[pid].ds) {
;;;1168               //check rx data type is ok?
;;;1169               if(data_type == rxMsg->Data[1]) {
;;;1170                   //get valid pid callback
;;;1171                   //send start stream
;;;1172                   gm_start_stream.StdId = gmDataStream[pid].txId[1];
;;;1173                   ret = flexcan_ioctl(DIR_BI, &gm_start_stream,
;;;1174                           gmDataStream[pid].rxId[1], 1);
;;;1175                   if(ret > 0) {
;;;1176                       rxMsg = flexcan_dump();
;;;1177                       if(rxMsg == NULL) {
;;;1178                           return NULL;
;;;1179                       }
;;;1180                       //get valid buf
;;;1181                       for(i = 0; i < 8; i++) {
;;;1182                           gm_rx_buf[i] = rxMsg->Data[i];
;;;1183                       }
;;;1184                   }
;;;1185               } else {
;;;1186                   loge("Error: not valid rx msg\r\n");
;;;1187                   return NULL;
;;;1188               }
;;;1189           } else {
;;;1190               //get valid buf
;;;1191               for(i = 0; i < 8; i++) {
;;;1192                   gm_rx_buf[i] = rxMsg->Data[i];
;;;1193               }
;;;1194           }
;;;1195           *len = valid_len;
;;;1196           return gm_rx_buf + offset;
;;;1197       } else {
;;;1198           return NULL;
;;;1199       }
;;;1200   }
000032  b00b              ADD      sp,sp,#0x2c
000034  e8bd83f0          POP      {r4-r9,pc}
                  |L9.56|
000038  7008              STRB     r0,[r1,#0]            ;1126
00003a  4842              LDR      r0,|L9.324|
00003c  1c40              ADDS     r0,r0,#1              ;1127
00003e  e7f8              B        |L9.50|
                  |L9.64|
000040  7008              STRB     r0,[r1,#0]            ;1130
000042  4840              LDR      r0,|L9.324|
000044  1c80              ADDS     r0,r0,#2              ;1131
000046  e7f4              B        |L9.50|
                  |L9.72|
000048  7008              STRB     r0,[r1,#0]            ;1134
00004a  483e              LDR      r0,|L9.324|
00004c  1cc0              ADDS     r0,r0,#3              ;1135
00004e  e7f0              B        |L9.50|
                  |L9.80|
000050  f44f70c8          MOV      r0,#0x190             ;1145
000054  f7fffffe          BL       xdelay_ms
000058  493a              LDR      r1,|L9.324|
00005a  2000              MOVS     r0,#0                 ;1147
00005c  6048              STR      r0,[r1,#4]            ;1147  ; gm_rx_buf
00005e  6088              STR      r0,[r1,#8]            ;1147  ; gm_rx_buf
000060  eb040144          ADD      r1,r4,r4,LSL #1       ;1149
000064  eb0102c4          ADD      r2,r1,r4,LSL #3       ;1149
000068  4935              LDR      r1,|L9.320|
00006a  3172              ADDS     r1,r1,#0x72           ;1149
00006c  eb010442          ADD      r4,r1,r2,LSL #1       ;1149
000070  f8949014          LDRB     r9,[r4,#0x14]         ;1149
000074  f8948013          LDRB     r8,[r4,#0x13]         ;1150
000078  8861              LDRH     r1,[r4,#2]            ;1153
00007a  f88d0014          STRB     r0,[sp,#0x14]         ;1154
00007e  2008              MOVS     r0,#8                 ;1155
000080  9103              STR      r1,[sp,#0xc]          ;1154
000082  f88d0016          STRB     r0,[sp,#0x16]         ;1155
000086  2000              MOVS     r0,#0                 ;1156
000088  a903              ADD      r1,sp,#0xc            ;1117
                  |L9.138|
00008a  1822              ADDS     r2,r4,r0              ;1157
00008c  180b              ADDS     r3,r1,r0              ;1157
00008e  7a92              LDRB     r2,[r2,#0xa]          ;1157
000090  72da              STRB     r2,[r3,#0xb]          ;1157
000092  1c40              ADDS     r0,r0,#1              ;1156
000094  f89d2016          LDRB     r2,[sp,#0x16]         ;1156
000098  b2c0              UXTB     r0,r0                 ;1156
00009a  4282              CMP      r2,r0                 ;1156
00009c  d8f5              BHI      |L9.138|
00009e  7ae0              LDRB     r0,[r4,#0xb]          ;1160
0000a0  88e2              LDRH     r2,[r4,#6]            ;1161
0000a2  3040              ADDS     r0,r0,#0x40           ;1160
0000a4  b2c7              UXTB     r7,r0                 ;1160
0000a6  2301              MOVS     r3,#1                 ;1161
0000a8  2003              MOVS     r0,#3                 ;1161
0000aa  f7fffffe          BL       flexcan_ioctl
0000ae  2800              CMP      r0,#0                 ;1162
0000b0  dd37              BLE      |L9.290|
0000b2  f7fffffe          BL       flexcan_dump
0000b6  2800              CMP      r0,#0                 ;1164
0000b8  d0bb              BEQ      |L9.50|
0000ba  4e22              LDR      r6,|L9.324|
0000bc  7ca1              LDRB     r1,[r4,#0x12]         ;1167
0000be  1d36              ADDS     r6,r6,#4              ;1182
0000c0  b359              CBZ      r1,|L9.282|
0000c2  7b00              LDRB     r0,[r0,#0xc]          ;1169
0000c4  42b8              CMP      r0,r7                 ;1169
0000c6  d117              BNE      |L9.248|
0000c8  f506711d          ADD      r1,r6,#0x274          ;1172
0000cc  88a0              LDRH     r0,[r4,#4]            ;1172
0000ce  6008              STR      r0,[r1,#0]            ;1173  ; gm_start_stream
0000d0  8922              LDRH     r2,[r4,#8]            ;1173
0000d2  2301              MOVS     r3,#1                 ;1173
0000d4  2003              MOVS     r0,#3                 ;1173
0000d6  f7fffffe          BL       flexcan_ioctl
0000da  2800              CMP      r0,#0                 ;1175
0000dc  dd2a              BLE      |L9.308|
0000de  f7fffffe          BL       flexcan_dump
0000e2  2800              CMP      r0,#0                 ;1177
0000e4  d0a5              BEQ      |L9.50|
0000e6  2100              MOVS     r1,#0                 ;1181
                  |L9.232|
0000e8  1842              ADDS     r2,r0,r1              ;1182
0000ea  7ad2              LDRB     r2,[r2,#0xb]          ;1182
0000ec  5472              STRB     r2,[r6,r1]            ;1182
0000ee  1c49              ADDS     r1,r1,#1              ;1181
0000f0  b2c9              UXTB     r1,r1                 ;1181
0000f2  2908              CMP      r1,#8                 ;1181
0000f4  d3f8              BCC      |L9.232|
0000f6  e01d              B        |L9.308|
                  |L9.248|
0000f8  4668              MOV      r0,sp                 ;1186
0000fa  f7fffffe          BL       OSTimeGet
0000fe  4912              LDR      r1,|L9.328|
000100  7809              LDRB     r1,[r1,#0]            ;1186  ; DEBUG_MODE
000102  07c9              LSLS     r1,r1,#31             ;1186
000104  d00d              BEQ      |L9.290|
000106  f2413288          MOV      r2,#0x1388            ;1186
00010a  fbb0f1f2          UDIV     r1,r0,r2              ;1186
00010e  fb020011          MLS      r0,r2,r1,r0           ;1186
000112  2205              MOVS     r2,#5                 ;1186
000114  fbb0f2f2          UDIV     r2,r0,r2              ;1186
000118  e000              B        |L9.284|
                  |L9.282|
00011a  e004              B        |L9.294|
                  |L9.284|
00011c  a00b              ADR      r0,|L9.332|
00011e  f7fffffe          BL       __2printf
                  |L9.290|
000122  2000              MOVS     r0,#0                 ;1198
000124  e785              B        |L9.50|
                  |L9.294|
000126  1842              ADDS     r2,r0,r1              ;1192
000128  7ad2              LDRB     r2,[r2,#0xb]          ;1192
00012a  5472              STRB     r2,[r6,r1]            ;1192
00012c  1c49              ADDS     r1,r1,#1              ;1191
00012e  b2c9              UXTB     r1,r1                 ;1191
000130  2908              CMP      r1,#8                 ;1191
000132  d3f8              BCC      |L9.294|
                  |L9.308|
000134  f8859000          STRB     r9,[r5,#0]            ;1195
000138  eb060008          ADD      r0,r6,r8              ;1196
00013c  e779              B        |L9.50|
;;;1201   
                          ENDP

00013e  0000              DCW      0x0000
                  |L9.320|
                          DCD      ||.data||+0x28c
                  |L9.324|
                          DCD      ||.data||
                  |L9.328|
                          DCD      DEBUG_MODE
                  |L9.332|
00014c  5b253035          DCB      "[%05d.%03d/E]: Error: not valid rx msg\r\n\r\n",0
000150  642e2530
000154  33642f45
000158  5d3a2045
00015c  72726f72
000160  3a206e6f
000164  74207661
000168  6c696420
00016c  7278206d
000170  73670d0a
000174  0d0a00  
000177  00                DCB      0

                          AREA ||i.gm_engine_on||, CODE, READONLY, ALIGN=2

                  gm_engine_on PROC
;;;1071   
;;;1072   bool gm_engine_on(void)
000000  b510              PUSH     {r4,lr}
;;;1073   {
000002  b086              SUB      sp,sp,#0x18
;;;1074       CanRxMsg *rxMsg;
;;;1075       int8_t ret = -1;
;;;1076       uint8_t on = FALSE;
000004  2400              MOVS     r4,#0
;;;1077       CanTxMsg gm_engineAlive =
000006  2214              MOVS     r2,#0x14
000008  4909              LDR      r1,|L10.48|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;1078       {
;;;1079           0x7e0, 0x18db33f1,
;;;1080           CAN_ID_STD, CAN_RTR_DATA,
;;;1081           8,
;;;1082           0x04, 0x2c, 0xfe, 0x00, 0x0c, 0x00, 0x00, 0x00,
;;;1083       };
;;;1084   
;;;1085       ret = flexcan_ioctl(DIR_BI, &gm_engineAlive,
000010  2301              MOVS     r3,#1
000012  f44f62fd          MOV      r2,#0x7e8
000016  4669              MOV      r1,sp
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       flexcan_ioctl
;;;1086               0x7e8, 1);
;;;1087       if(ret > 0) {
00001e  2800              CMP      r0,#0
000020  dd03              BLE      |L10.42|
;;;1088           rxMsg = flexcan_dump();
000022  f7fffffe          BL       flexcan_dump
;;;1089           //check if the receive msg type is needed
;;;1090           //TODO: ???
;;;1091           if(rxMsg == NULL) {
000026  b100              CBZ      r0,|L10.42|
;;;1092               on = FALSE;
;;;1093           } else {
;;;1094               on = TRUE;
000028  2401              MOVS     r4,#1
                  |L10.42|
;;;1095           }
;;;1096       } else {
;;;1097           on = FALSE;
;;;1098       }
;;;1099   
;;;1100       return on;
;;;1101   }
00002a  b006              ADD      sp,sp,#0x18
00002c  4620              MOV      r0,r4                 ;1100
00002e  bd10              POP      {r4,pc}
;;;1102   
                          ENDP

                  |L10.48|
                          DCD      ||.constdata||+0xc

                          AREA ||i.gm_exit||, CODE, READONLY, ALIGN=2

                  gm_exit PROC
;;;1022   
;;;1023   void gm_exit(uint8_t type)
000000  b510              PUSH     {r4,lr}
;;;1024   {
000002  b170              CBZ      r0,|L11.34|
;;;1025   
;;;1026       switch(type) {
000004  2801              CMP      r0,#1
000006  d00f              BEQ      |L11.40|
000008  2802              CMP      r0,#2
00000a  d010              BEQ      |L11.46|
00000c  2803              CMP      r0,#3
00000e  d111              BNE      |L11.52|
;;;1027           case TYPE_ENG:
;;;1028               flexcan_send_frame(&gm_eng_exit_code);
;;;1029               xdelay_ms(100);
;;;1030               break;
;;;1031           case TYPE_AT:
;;;1032               flexcan_send_frame(&gm_at_exit_code);
;;;1033               xdelay_ms(100);
;;;1034               break;
;;;1035           case TYPE_ABS:
;;;1036               flexcan_send_frame(&gm_abs_exit_code);
;;;1037               xdelay_ms(100);
;;;1038               break;
;;;1039           case TYPE_BCM:
;;;1040               flexcan_send_frame(&gm_bcm_exit_code);
000010  4809              LDR      r0,|L11.56|
000012  bf00              NOP      
                  |L11.20|
000014  f7fffffe          BL       flexcan_send_frame
;;;1041               xdelay_ms(100);
000018  e8bd4010          POP      {r4,lr}
00001c  2064              MOVS     r0,#0x64
00001e  f7ffbffe          B.W      xdelay_ms
                  |L11.34|
000022  4805              LDR      r0,|L11.56|
000024  383c              SUBS     r0,r0,#0x3c           ;1028
000026  e7f5              B        |L11.20|
                  |L11.40|
000028  4803              LDR      r0,|L11.56|
00002a  3828              SUBS     r0,r0,#0x28           ;1032
00002c  e7f2              B        |L11.20|
                  |L11.46|
00002e  4802              LDR      r0,|L11.56|
000030  3814              SUBS     r0,r0,#0x14           ;1036
000032  e7ef              B        |L11.20|
                  |L11.52|
;;;1042               break;
;;;1043           default:
;;;1044               break;
;;;1045       }
;;;1046   }
000034  bd10              POP      {r4,pc}
;;;1047   
                          ENDP

000036  0000              DCW      0x0000
                  |L11.56|
                          DCD      ||.data||+0x910

                          AREA ||i.gm_init||, CODE, READONLY, ALIGN=2

                  gm_init PROC
;;;988    
;;;989    void gm_init(uint8_t type)
000000  b570              PUSH     {r4-r6,lr}
;;;990    {
000002  b1a8              CBZ      r0,|L12.48|
;;;991        uint8_t i;
;;;992    
;;;993        switch(type) {
000004  2801              CMP      r0,#1
000006  d025              BEQ      |L12.84|
000008  2802              CMP      r0,#2
00000a  d035              BEQ      |L12.120|
00000c  2803              CMP      r0,#3
00000e  d10e              BNE      |L12.46|
;;;994            case TYPE_ENG:
;;;995                for(i = 0; i < 2; i ++) {
;;;996                    flexcan_send_frame(&gm_eng_init_code[i]);
;;;997                    xdelay_ms(100);
;;;998                }
;;;999                break;
;;;1000           case TYPE_AT:
;;;1001               for(i = 0; i < 2; i ++) {
;;;1002                   flexcan_send_frame(&gm_at_init_code[i]);
;;;1003                   xdelay_ms(100);
;;;1004               }
;;;1005               break;
;;;1006           case TYPE_ABS:
;;;1007               for(i = 0; i < 2; i ++) {
;;;1008                   flexcan_send_frame(&gm_abs_init_code[i]);
;;;1009                   xdelay_ms(100);
;;;1010               }
;;;1011               break;
;;;1012           case TYPE_BCM:
;;;1013               for(i = 0; i < 2; i ++) {
;;;1014                   flexcan_send_frame(&gm_bcm_init_code[i]);
000010  4d22              LDR      r5,|L12.156|
000012  2400              MOVS     r4,#0                 ;1013
                  |L12.20|
000014  eb040084          ADD      r0,r4,r4,LSL #2
000018  eb050080          ADD      r0,r5,r0,LSL #2
00001c  f7fffffe          BL       flexcan_send_frame
;;;1015                   xdelay_ms(100);
000020  2064              MOVS     r0,#0x64
000022  f7fffffe          BL       xdelay_ms
000026  1c64              ADDS     r4,r4,#1              ;1013
000028  b2e4              UXTB     r4,r4                 ;1013
00002a  2c02              CMP      r4,#2                 ;1013
00002c  d3f2              BCC      |L12.20|
                  |L12.46|
;;;1016               }
;;;1017               break;
;;;1018           default:
;;;1019               break;
;;;1020       }
;;;1021   }
00002e  bd70              POP      {r4-r6,pc}
                  |L12.48|
000030  4d1a              LDR      r5,|L12.156|
000032  2400              MOVS     r4,#0                 ;995
000034  f1b50578          SUBS.W   r5,r5,#0x78           ;996
                  |L12.56|
000038  eb040084          ADD      r0,r4,r4,LSL #2       ;996
00003c  eb050080          ADD      r0,r5,r0,LSL #2       ;996
000040  f7fffffe          BL       flexcan_send_frame
000044  2064              MOVS     r0,#0x64              ;997
000046  f7fffffe          BL       xdelay_ms
00004a  1c64              ADDS     r4,r4,#1              ;995
00004c  b2e4              UXTB     r4,r4                 ;995
00004e  2c02              CMP      r4,#2                 ;995
000050  d3f2              BCC      |L12.56|
000052  bd70              POP      {r4-r6,pc}
                  |L12.84|
000054  4d11              LDR      r5,|L12.156|
000056  2400              MOVS     r4,#0                 ;1001
000058  f1b50550          SUBS.W   r5,r5,#0x50           ;1002
                  |L12.92|
00005c  eb040084          ADD      r0,r4,r4,LSL #2       ;1002
000060  eb050080          ADD      r0,r5,r0,LSL #2       ;1002
000064  f7fffffe          BL       flexcan_send_frame
000068  2064              MOVS     r0,#0x64              ;1003
00006a  f7fffffe          BL       xdelay_ms
00006e  1c64              ADDS     r4,r4,#1              ;1001
000070  b2e4              UXTB     r4,r4                 ;1001
000072  2c02              CMP      r4,#2                 ;1001
000074  d3f2              BCC      |L12.92|
000076  bd70              POP      {r4-r6,pc}
                  |L12.120|
000078  4d08              LDR      r5,|L12.156|
00007a  2400              MOVS     r4,#0                 ;1007
00007c  f1b50528          SUBS.W   r5,r5,#0x28           ;1008
                  |L12.128|
000080  eb040084          ADD      r0,r4,r4,LSL #2       ;1008
000084  eb050080          ADD      r0,r5,r0,LSL #2       ;1008
000088  f7fffffe          BL       flexcan_send_frame
00008c  2064              MOVS     r0,#0x64              ;1009
00008e  f7fffffe          BL       xdelay_ms
000092  1c64              ADDS     r4,r4,#1              ;1007
000094  b2e4              UXTB     r4,r4                 ;1007
000096  2c02              CMP      r4,#2                 ;1007
000098  d3f2              BCC      |L12.128|
00009a  bd70              POP      {r4-r6,pc}
;;;1022   
                          ENDP

                  |L12.156|
                          DCD      ||.data||+0x8ac

                          AREA ||i.gm_keepalive||, CODE, READONLY, ALIGN=2

                  gm_keepalive PROC
;;;1047   
;;;1048   void gm_keepalive(uint8_t type)
000000  b510              PUSH     {r4,lr}
;;;1049   {
000002  b170              CBZ      r0,|L13.34|
;;;1050       switch(type) {
000004  2801              CMP      r0,#1
000006  d00f              BEQ      |L13.40|
000008  2802              CMP      r0,#2
00000a  d010              BEQ      |L13.46|
00000c  2803              CMP      r0,#3
00000e  d111              BNE      |L13.52|
;;;1051           case TYPE_ENG:
;;;1052               flexcan_send_frame(&gm_eng_init_code[0]);
;;;1053               xdelay_ms(100);
;;;1054               break;
;;;1055           case TYPE_AT:
;;;1056               flexcan_send_frame(&gm_at_init_code[0]);
;;;1057               xdelay_ms(100);
;;;1058               break;
;;;1059           case TYPE_ABS:
;;;1060               flexcan_send_frame(&gm_abs_init_code[0]);
;;;1061               xdelay_ms(100);
;;;1062               break;
;;;1063           case TYPE_BCM:
;;;1064               flexcan_send_frame(&gm_bcm_init_code[0]);
000010  4809              LDR      r0,|L13.56|
000012  bf00              NOP      
                  |L13.20|
000014  f7fffffe          BL       flexcan_send_frame
;;;1065               xdelay_ms(100);
000018  e8bd4010          POP      {r4,lr}
00001c  2064              MOVS     r0,#0x64
00001e  f7ffbffe          B.W      xdelay_ms
                  |L13.34|
000022  4805              LDR      r0,|L13.56|
000024  3878              SUBS     r0,r0,#0x78           ;1052
000026  e7f5              B        |L13.20|
                  |L13.40|
000028  4803              LDR      r0,|L13.56|
00002a  3850              SUBS     r0,r0,#0x50           ;1056
00002c  e7f2              B        |L13.20|
                  |L13.46|
00002e  4802              LDR      r0,|L13.56|
000030  3828              SUBS     r0,r0,#0x28           ;1060
000032  e7ef              B        |L13.20|
                  |L13.52|
;;;1066               break;
;;;1067           default:
;;;1068               break;
;;;1069       }
;;;1070   }
000034  bd10              POP      {r4,pc}
;;;1071   
                          ENDP

000036  0000              DCW      0x0000
                  |L13.56|
                          DCD      ||.data||+0x8ac

                          AREA ||i.gm_setup||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  gm_setup PROC
;;;964    
;;;965    void gm_setup(Vehicles *vehicle)
000000  b538              PUSH     {r3-r5,lr}
;;;966    {
000002  4604              MOV      r4,r0
;;;967        logi("-> %s\r\n", __func__);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       OSTimeGet
00000a  4919              LDR      r1,|L14.112|
00000c  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00000e  0789              LSLS     r1,r1,#30
000010  d50c              BPL      |L14.44|
000012  f2413288          MOV      r2,#0x1388
000016  fbb0f1f2          UDIV     r1,r0,r2
00001a  fb020011          MLS      r0,r2,r1,r0
00001e  2205              MOVS     r2,#5
000020  fbb0f2f2          UDIV     r2,r0,r2
000024  4b13              LDR      r3,|L14.116|
000026  a014              ADR      r0,|L14.120|
000028  f7fffffe          BL       __2printf
                  |L14.44|
;;;968        //init gm ops
;;;969        gm_ctrl_ops.control_door = gm_ctrl_door;
00002c  4a1a              LDR      r2,|L14.152|
00002e  4819              LDR      r0,|L14.148|
;;;970        gm_ctrl_ops.control_window = gm_ctrl_window;
;;;971        gm_ctrl_ops.control_sunroof = gm_ctrl_sunroof;
;;;972        gm_ctrl_ops.control_light = gm_ctrl_light;
;;;973        gm_ctrl_ops.control_findcar = gm_ctrl_findcar;
;;;974        gm_ctrl_ops.control_trunk = gm_ctrl_trunk;
;;;975        gm_ctrl_ops.clear_fault_code = gm_clear_fault_code;
;;;976    
;;;977        gm_data_ops.transfer_data_stream = gm_data_stream;
000030  f102011c          ADD      r1,r2,#0x1c
000034  6050              STR      r0,[r2,#4]            ;970  ; gm_ctrl_ops
000036  4819              LDR      r0,|L14.156|
000038  6010              STR      r0,[r2,#0]            ;971  ; gm_ctrl_ops
00003a  4819              LDR      r0,|L14.160|
00003c  60d0              STR      r0,[r2,#0xc]          ;972  ; gm_ctrl_ops
00003e  4819              LDR      r0,|L14.164|
000040  6090              STR      r0,[r2,#8]            ;973  ; gm_ctrl_ops
000042  4819              LDR      r0,|L14.168|
000044  6150              STR      r0,[r2,#0x14]         ;974  ; gm_ctrl_ops
000046  4819              LDR      r0,|L14.172|
000048  6110              STR      r0,[r2,#0x10]         ;975  ; gm_ctrl_ops
00004a  4819              LDR      r0,|L14.176|
00004c  6190              STR      r0,[r2,#0x18]  ; gm_ctrl_ops
00004e  4819              LDR      r0,|L14.180|
;;;978        gm_data_ops.is_engine_on = gm_engine_on;
000050  6048              STR      r0,[r1,#4]  ; gm_data_ops
000052  4819              LDR      r0,|L14.184|
;;;979        gm_data_ops.check_fault_code = gm_check_fault_code;
000054  6008              STR      r0,[r1,#0]  ; gm_data_ops
000056  4819              LDR      r0,|L14.188|
;;;980        gm_data_ops.init = gm_init;
000058  6088              STR      r0,[r1,#8]  ; gm_data_ops
00005a  4819              LDR      r0,|L14.192|
;;;981        gm_data_ops.exit = gm_exit;
00005c  60c8              STR      r0,[r1,#0xc]  ; gm_data_ops
00005e  4819              LDR      r0,|L14.196|
;;;982        gm_data_ops.keepalive = gm_keepalive;
000060  6148              STR      r0,[r1,#0x14]  ; gm_data_ops
000062  4819              LDR      r0,|L14.200|
;;;983    
;;;984        vehicle->ctrlOps = &gm_ctrl_ops;
;;;985        vehicle->dataOps = &gm_data_ops;
;;;986        vehicle->init = TRUE;
000064  6108              STR      r0,[r1,#0x10]  ; gm_data_ops
000066  e9c41201          STRD     r1,r2,[r4,#4]
00006a  2001              MOVS     r0,#1
00006c  7020              STRB     r0,[r4,#0]
;;;987    }
00006e  bd38              POP      {r3-r5,pc}
;;;988    
                          ENDP

                  |L14.112|
                          DCD      DEBUG_MODE
                  |L14.116|
                          DCD      ||.constdata||
                  |L14.120|
000078  5b253035          DCB      "[%05d.%03d/I]: -> %s\r\n\r\n",0
00007c  642e2530
000080  33642f49
000084  5d3a202d
000088  3e202573
00008c  0d0a0d0a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L14.148|
                          DCD      gm_ctrl_door
                  |L14.152|
                          DCD      ||.bss||
                  |L14.156|
                          DCD      gm_ctrl_window
                  |L14.160|
                          DCD      gm_ctrl_sunroof
                  |L14.164|
                          DCD      gm_ctrl_light
                  |L14.168|
                          DCD      gm_ctrl_findcar
                  |L14.172|
                          DCD      gm_ctrl_trunk
                  |L14.176|
                          DCD      gm_clear_fault_code
                  |L14.180|
                          DCD      gm_data_stream
                  |L14.184|
                          DCD      gm_engine_on
                  |L14.188|
                          DCD      gm_check_fault_code
                  |L14.192|
                          DCD      gm_init
                  |L14.196|
                          DCD      gm_exit
                  |L14.200|
                          DCD      gm_keepalive

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  gm_ctrl_ops
                          %        28
                  gm_data_ops
                          %        24
                  gm_code_val
                          %        40

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __func__
000000  676d5f73          DCB      0x67,0x6d,0x5f,0x73
000004  65747570          DCB      0x65,0x74,0x75,0x70
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007e0
                          DCD      0x18db33f1
000014  00000804          DCB      0x00,0x00,0x08,0x04
000018  2cfe000c          DCB      0x2c,0xfe,0x00,0x0c
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.49|
000020  676d5f63          DCB      0x67,0x6d,0x5f,0x63
000024  74726c5f          DCB      0x74,0x72,0x6c,0x5f
000028  77696e64          DCB      0x77,0x69,0x6e,0x64
00002c  6f7700            DCB      0x6f,0x77,0x00
                  |symbol_number.50|
00002f  67                DCB      0x67
000030  6d5f6374          DCB      0x6d,0x5f,0x63,0x74
000034  726c5f64          DCB      0x72,0x6c,0x5f,0x64
000038  6f6f7200          DCB      0x6f,0x6f,0x72,0x00
                  |symbol_number.51|
00003c  676d5f63          DCB      0x67,0x6d,0x5f,0x63
000040  74726c5f          DCB      0x74,0x72,0x6c,0x5f
000044  6c696768          DCB      0x6c,0x69,0x67,0x68
000048  7400              DCB      0x74,0x00
                  |symbol_number.52|
00004a  676d              DCB      0x67,0x6d
00004c  5f637472          DCB      0x5f,0x63,0x74,0x72
000050  6c5f7375          DCB      0x6c,0x5f,0x73,0x75
000054  6e726f6f          DCB      0x6e,0x72,0x6f,0x6f
000058  6600              DCB      0x66,0x00
                  |symbol_number.53|
00005a  676d              DCB      0x67,0x6d
00005c  5f637472          DCB      0x5f,0x63,0x74,0x72
000060  6c5f7472          DCB      0x6c,0x5f,0x74,0x72
000064  756e6b00          DCB      0x75,0x6e,0x6b,0x00
                  |symbol_number.54|
000068  676d5f63          DCB      0x67,0x6d,0x5f,0x63
00006c  74726c5f          DCB      0x74,0x72,0x6c,0x5f
000070  66696e64          DCB      0x66,0x69,0x6e,0x64
000074  63617200          DCB      0x63,0x61,0x72,0x00
                  |symbol_number.55|
000078  676d5f63          DCB      0x67,0x6d,0x5f,0x63
00007c  6c656172          DCB      0x6c,0x65,0x61,0x72
000080  5f666175          DCB      0x5f,0x66,0x61,0x75
000084  6c745f63          DCB      0x6c,0x74,0x5f,0x63
000088  6f646500          DCB      0x6f,0x64,0x65,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  fake1
000000  18                DCB      0x18
                  fake2
000001  19                DCB      0x19
                  fake3
000002  19                DCB      0x19
                  fake4
000003  1b                DCB      0x1b
                  gm_rx_buf
                          %        8
                  gm_exit_cmd
                          DCD      0x00000241
                          DCD      0x18db33f1
000014  00000201          DCB      0x00,0x00,0x02,0x01
000018  20000000          DCB      0x20,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_lamp_on
                          DCD      0x00000241
                          DCD      0x18db33f1
000028  00000807          DCB      0x00,0x00,0x08,0x07
00002c  ae020000          DCB      0xae,0x02,0x00,0x00
000030  02020000          DCB      0x02,0x02,0x00,0x00
                  gm_lamp_off
                          DCD      0x00000241
                          DCD      0x18db33f1
00003c  00000807          DCB      0x00,0x00,0x08,0x07
000040  ae020000          DCB      0xae,0x02,0x00,0x00
000044  02000000          DCB      0x02,0x00,0x00,0x00
                  gm_door_on
                          DCD      0x00000241
                          DCD      0x18db33f1
000050  00000807          DCB      0x00,0x00,0x08,0x07
000054  ae010404          DCB      0xae,0x01,0x04,0x04
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
000064  00000807          DCB      0x00,0x00,0x08,0x07
000068  ae010400          DCB      0xae,0x01,0x04,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
000078  00000807          DCB      0x00,0x00,0x08,0x07
00007c  ae010202          DCB      0xae,0x01,0x02,0x02
000080  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
00008c  00000807          DCB      0x00,0x00,0x08,0x07
000090  ae010200          DCB      0xae,0x01,0x02,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0000a0  00000802          DCB      0x00,0x00,0x08,0x02
0000a4  ae000000          DCB      0xae,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_door_off
                          DCD      0x00000241
                          DCD      0x18db33f1
0000b4  00000807          DCB      0x00,0x00,0x08,0x07
0000b8  ae010101          DCB      0xae,0x01,0x01,0x01
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0000c8  00000807          DCB      0x00,0x00,0x08,0x07
0000cc  ae010100          DCB      0xae,0x01,0x01,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0000dc  00000807          DCB      0x00,0x00,0x08,0x07
0000e0  ae010101          DCB      0xae,0x01,0x01,0x01
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0000f0  00000807          DCB      0x00,0x00,0x08,0x07
0000f4  ae010100          DCB      0xae,0x01,0x01,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
000104  00000802          DCB      0x00,0x00,0x08,0x02
000108  ae000000          DCB      0xae,0x00,0x00,0x00
00010c  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_window_on
                          DCD      0x00000241
                          DCD      0x18db33f1
000118  00000807          DCB      0x00,0x00,0x08,0x07
00011c  ae3b0f03          DCB      0xae,0x3b,0x0f,0x03
000120  03030300          DCB      0x03,0x03,0x03,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
00012c  00000807          DCB      0x00,0x00,0x08,0x07
000130  ae3b0f03          DCB      0xae,0x3b,0x0f,0x03
000134  03030300          DCB      0x03,0x03,0x03,0x00
                  gm_window_off
                          DCD      0x00000241
                          DCD      0x18db33f1
000140  00000807          DCB      0x00,0x00,0x08,0x07
000144  ae3b0f02          DCB      0xae,0x3b,0x0f,0x02
000148  02020200          DCB      0x02,0x02,0x02,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
000154  00000807          DCB      0x00,0x00,0x08,0x07
000158  ae3b0f02          DCB      0xae,0x3b,0x0f,0x02
00015c  02020200          DCB      0x02,0x02,0x02,0x00
                  gm_trunk_on
                          DCD      0x00000241
                          DCD      0x18db33f1
000168  00000807          DCB      0x00,0x00,0x08,0x07
00016c  ae011010          DCB      0xae,0x01,0x10,0x10
000170  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
00017c  00000807          DCB      0x00,0x00,0x08,0x07
000180  ae011000          DCB      0xae,0x01,0x10,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_trunk_off
                          DCD      0x00000241
                          DCD      0x18db33f1
000190  00000802          DCB      0x00,0x00,0x08,0x02
000194  ae000000          DCB      0xae,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0001a4  00000802          DCB      0x00,0x00,0x08,0x02
0001a8  ae000000          DCB      0xae,0x00,0x00,0x00
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_sunroof_on
                          DCD      0x00000241
                          DCD      0x18db33f1
0001b8  00000807          DCB      0x00,0x00,0x08,0x07
0001bc  ae4cff08          DCB      0xae,0x4c,0xff,0x08
0001c0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0001cc  00000807          DCB      0x00,0x00,0x08,0x07
0001d0  ae4cff08          DCB      0xae,0x4c,0xff,0x08
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0001e0  00000807          DCB      0x00,0x00,0x08,0x07
0001e4  ae4cff08          DCB      0xae,0x4c,0xff,0x08
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_sunroof_off
                          DCD      0x00000241
                          DCD      0x18db33f1
0001f4  00000807          DCB      0x00,0x00,0x08,0x07
0001f8  ae4cff04          DCB      0xae,0x4c,0xff,0x04
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
000208  00000807          DCB      0x00,0x00,0x08,0x07
00020c  ae4cff04          DCB      0xae,0x4c,0xff,0x04
000210  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
00021c  00000807          DCB      0x00,0x00,0x08,0x07
000220  ae4cff04          DCB      0xae,0x4c,0xff,0x04
000224  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_findcar_on
                          DCD      0x00000241
                          DCD      0x18db33f1
000230  00000807          DCB      0x00,0x00,0x08,0x07
000234  ae100101          DCB      0xae,0x10,0x01,0x01
000238  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
000244  00000807          DCB      0x00,0x00,0x08,0x07
000248  ae02f0f0          DCB      0xae,0x02,0xf0,0xf0
00024c  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_findcar_off
                          DCD      0x00000241
                          DCD      0x18db33f1
000258  00000802          DCB      0x00,0x00,0x08,0x02
00025c  ae000000          DCB      0xae,0x00,0x00,0x00
000260  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
00026c  00000802          DCB      0x00,0x00,0x08,0x02
000270  ae000000          DCB      0xae,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_start_stream
                          DCD      0x000007e0
                          DCD      0x18db33f1
000280  00000803          DCB      0x00,0x00,0x08,0x03
000284  aa03fe00          DCB      0xaa,0x03,0xfe,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
                  gmSupportItems
00028c  00010101          DCB      0x00,0x01,0x01,0x01
000290  02010300          DCB      0x02,0x01,0x03,0x00
000294  04010501          DCB      0x04,0x01,0x05,0x01
000298  06000700          DCB      0x06,0x00,0x07,0x00
00029c  08010901          DCB      0x08,0x01,0x09,0x01
0002a0  0a010b01          DCB      0x0a,0x01,0x0b,0x01
0002a4  0c010d01          DCB      0x0c,0x01,0x0d,0x01
0002a8  0e010f01          DCB      0x0e,0x01,0x0f,0x01
0002ac  10001101          DCB      0x10,0x00,0x11,0x01
0002b0  12011301          DCB      0x12,0x01,0x13,0x01
0002b4  14011500          DCB      0x14,0x01,0x15,0x00
0002b8  16001700          DCB      0x16,0x00,0x17,0x00
0002bc  18011900          DCB      0x18,0x01,0x19,0x00
0002c0  1a011b01          DCB      0x1a,0x01,0x1b,0x01
0002c4  1c011d01          DCB      0x1c,0x01,0x1d,0x01
0002c8  1e011f01          DCB      0x1e,0x01,0x1f,0x01
0002cc  20002101          DCB      0x20,0x00,0x21,0x01
0002d0  22012301          DCB      0x22,0x01,0x23,0x01
0002d4  24002500          DCB      0x24,0x00,0x25,0x00
0002d8  26012701          DCB      0x26,0x01,0x27,0x01
0002dc  28012901          DCB      0x28,0x01,0x29,0x01
0002e0  2a012b01          DCB      0x2a,0x01,0x2b,0x01
0002e4  2c002d01          DCB      0x2c,0x00,0x2d,0x01
0002e8  2e002f01          DCB      0x2e,0x00,0x2f,0x01
0002ec  30003100          DCB      0x30,0x00,0x31,0x00
0002f0  32013301          DCB      0x32,0x01,0x33,0x01
0002f4  34010000          DCB      0x34,0x01,0x00,0x00
                          DCD      0x00000000
0002fc  0000              DCB      0x00,0x00
                  gmDataStream
0002fe  0000              DCB      0x00,0x00
000300  07e007e0          DCW      0x07e0,0x07e0
000304  07e805e8          DCW      0x07e8,0x05e8
000308  042cfe00          DCB      0x04,0x2c,0xfe,0x00
00030c  0c000000          DCB      0x0c,0x00,0x00,0x00
000310  01010200          DCB      0x01,0x01,0x02,0x00
000314  0100              DCB      0x01,0x00
000316  07e0              DCW      0x07e0
000318  07e007e8          DCW      0x07e0,0x07e8
00031c  05e8              DCW      0x05e8
00031e  042c              DCB      0x04,0x2c
000320  fe000d00          DCB      0xfe,0x00,0x0d,0x00
000324  00000101          DCB      0x00,0x00,0x01,0x01
000328  01000200          DCB      0x01,0x00,0x02,0x00
00032c  07e007e0          DCW      0x07e0,0x07e0
000330  07e805e8          DCW      0x07e8,0x05e8
000334  042cfe00          DCB      0x04,0x2c,0xfe,0x00
000338  05000000          DCB      0x05,0x00,0x00,0x00
00033c  01010100          DCB      0x01,0x01,0x01,0x00
000340  0300              DCB      0x03,0x00
000342  07e0              DCW      0x07e0
000344  07e007e8          DCW      0x07e0,0x07e8
000348  05e8              DCW      0x05e8
00034a  042c              DCB      0x04,0x2c
00034c  fe000f00          DCB      0xfe,0x00,0x0f,0x00
000350  00000101          DCB      0x00,0x00,0x01,0x01
000354  01000400          DCB      0x01,0x00,0x04,0x00
000358  07e007e0          DCW      0x07e0,0x07e0
00035c  07e805e8          DCW      0x07e8,0x05e8
000360  042cfe13          DCB      0x04,0x2c,0xfe,0x13
000364  1f000000          DCB      0x1f,0x00,0x00,0x00
000368  01010200          DCB      0x01,0x01,0x02,0x00
00036c  0500              DCB      0x05,0x00
00036e  07e0              DCW      0x07e0
000370  07e007e8          DCW      0x07e0,0x07e8
000374  05e8              DCW      0x05e8
000376  042c              DCB      0x04,0x2c
000378  fe12b100          DCB      0xfe,0x12,0xb1,0x00
00037c  00000101          DCB      0x00,0x00,0x01,0x01
000380  02000600          DCB      0x02,0x00,0x06,0x00
000384  07e007e0          DCW      0x07e0,0x07e0
000388  07e805e8          DCW      0x07e8,0x05e8
00038c  042cfe00          DCB      0x04,0x2c,0xfe,0x00
000390  1f000000          DCB      0x1f,0x00,0x00,0x00
000394  01010200          DCB      0x01,0x01,0x02,0x00
000398  0700              DCB      0x07,0x00
00039a  07e0              DCW      0x07e0
00039c  07e007e8          DCW      0x07e0,0x07e8
0003a0  05e8              DCW      0x05e8
0003a2  042c              DCB      0x04,0x2c
0003a4  fe000400          DCB      0xfe,0x00,0x04,0x00
0003a8  00000101          DCB      0x00,0x00,0x01,0x01
0003ac  01000800          DCB      0x01,0x00,0x08,0x00
0003b0  07e007e0          DCW      0x07e0,0x07e0
0003b4  07e805e8          DCW      0x07e8,0x05e8
0003b8  042cfe00          DCB      0x04,0x2c,0xfe,0x00
0003bc  07000000          DCB      0x07,0x00,0x00,0x00
0003c0  01010100          DCB      0x01,0x01,0x01,0x00
0003c4  0900              DCB      0x09,0x00
0003c6  07e0              DCW      0x07e0
0003c8  07e007e8          DCW      0x07e0,0x07e8
0003cc  05e8              DCW      0x05e8
0003ce  042c              DCB      0x04,0x2c
0003d0  fe000600          DCB      0xfe,0x00,0x06,0x00
0003d4  00000101          DCB      0x00,0x00,0x01,0x01
0003d8  01000a00          DCB      0x01,0x00,0x0a,0x00
0003dc  07e007e0          DCW      0x07e0,0x07e0
0003e0  07e805e8          DCW      0x07e8,0x05e8
0003e4  042cfe12          DCB      0x04,0x2c,0xfe,0x12
0003e8  06000000          DCB      0x06,0x00,0x00,0x00
0003ec  01010100          DCB      0x01,0x01,0x01,0x00
0003f0  0b00              DCB      0x0b,0x00
0003f2  07e0              DCW      0x07e0
0003f4  07e007e8          DCW      0x07e0,0x07e8
0003f8  05e8              DCW      0x05e8
0003fa  042c              DCB      0x04,0x2c
0003fc  fe120500          DCB      0xfe,0x12,0x05,0x00
000400  00000101          DCB      0x00,0x00,0x01,0x01
000404  01000c00          DCB      0x01,0x00,0x0c,0x00
000408  07e007e0          DCW      0x07e0,0x07e0
00040c  07e805e8          DCW      0x07e8,0x05e8
000410  042cfe12          DCB      0x04,0x2c,0xfe,0x12
000414  07000000          DCB      0x07,0x00,0x00,0x00
000418  01010100          DCB      0x01,0x01,0x01,0x00
00041c  0d00              DCB      0x0d,0x00
00041e  07e0              DCW      0x07e0
000420  07e007e8          DCW      0x07e0,0x07e8
000424  05e8              DCW      0x05e8
000426  042c              DCB      0x04,0x2c
000428  fe120800          DCB      0xfe,0x12,0x08,0x00
00042c  00000101          DCB      0x00,0x00,0x01,0x01
000430  01000e00          DCB      0x01,0x00,0x0e,0x00
000434  07e007e0          DCW      0x07e0,0x07e0
000438  07e805e8          DCW      0x07e8,0x05e8
00043c  042cfe11          DCB      0x04,0x2c,0xfe,0x11
000440  ea000000          DCB      0xea,0x00,0x00,0x00
000444  01010100          DCB      0x01,0x01,0x01,0x00
000448  0f00              DCB      0x0f,0x00
00044a  07e0              DCW      0x07e0
00044c  07e007e8          DCW      0x07e0,0x07e8
000450  05e8              DCW      0x05e8
000452  042c              DCB      0x04,0x2c
000454  fe11eb00          DCB      0xfe,0x11,0xeb,0x00
000458  00000101          DCB      0x00,0x00,0x01,0x01
00045c  01001000          DCB      0x01,0x00,0x10,0x00
000460  07e007e0          DCW      0x07e0,0x07e0
000464  07e805e8          DCW      0x07e8,0x05e8
000468  042cfe11          DCB      0x04,0x2c,0xfe,0x11
00046c  31000000          DCB      0x31,0x00,0x00,0x00
000470  01010100          DCB      0x01,0x01,0x01,0x00
000474  1100              DCB      0x11,0x00
000476  07e0              DCW      0x07e0
000478  07e007e8          DCW      0x07e0,0x07e8
00047c  05e8              DCW      0x05e8
00047e  042c              DCB      0x04,0x2c
000480  fe207e00          DCB      0xfe,0x20,0x7e,0x00
000484  00000101          DCB      0x00,0x00,0x01,0x01
000488  01001200          DCB      0x01,0x00,0x12,0x00
00048c  07e007e0          DCW      0x07e0,0x07e0
000490  07e805e8          DCW      0x07e8,0x05e8
000494  042cfe23          DCB      0x04,0x2c,0xfe,0x23
000498  20000000          DCB      0x20,0x00,0x00,0x00
00049c  01010100          DCB      0x01,0x01,0x01,0x00
0004a0  1300              DCB      0x13,0x00
0004a2  07e0              DCW      0x07e0
0004a4  07e007e8          DCW      0x07e0,0x07e8
0004a8  05e8              DCW      0x05e8
0004aa  042c              DCB      0x04,0x2c
0004ac  fe232100          DCB      0xfe,0x23,0x21,0x00
0004b0  00000101          DCB      0x00,0x00,0x01,0x01
0004b4  01001400          DCB      0x01,0x00,0x14,0x00
0004b8  07e007e0          DCW      0x07e0,0x07e0
0004bc  07e805e8          DCW      0x07e8,0x05e8
0004c0  042cfe20          DCB      0x04,0x2c,0xfe,0x20
0004c4  8a000000          DCB      0x8a,0x00,0x00,0x00
0004c8  01010200          DCB      0x01,0x01,0x02,0x00
0004cc  1500              DCB      0x15,0x00
0004ce  07e0              DCW      0x07e0
0004d0  07e007e8          DCW      0x07e0,0x07e8
0004d4  05e8              DCW      0x05e8
0004d6  042c              DCB      0x04,0x2c
0004d8  fe12c300          DCB      0xfe,0x12,0xc3,0x00
0004dc  00000101          DCB      0x00,0x00,0x01,0x01
0004e0  02001600          DCB      0x02,0x00,0x16,0x00
0004e4  07e007e0          DCW      0x07e0,0x07e0
0004e8  07e805e8          DCW      0x07e8,0x05e8
0004ec  042cfe11          DCB      0x04,0x2c,0xfe,0x11
0004f0  27000000          DCB      0x27,0x00,0x00,0x00
0004f4  01010100          DCB      0x01,0x01,0x01,0x00
0004f8  1700              DCB      0x17,0x00
0004fa  07e0              DCW      0x07e0
0004fc  07e007e8          DCW      0x07e0,0x07e8
000500  05e8              DCW      0x05e8
000502  042c              DCB      0x04,0x2c
000504  fe112700          DCB      0xfe,0x11,0x27,0x00
000508  00000101          DCB      0x00,0x00,0x01,0x01
00050c  01001800          DCB      0x01,0x00,0x18,0x00
000510  07e007e0          DCW      0x07e0,0x07e0
000514  07e805e8          DCW      0x07e8,0x05e8
000518  042cfe00          DCB      0x04,0x2c,0xfe,0x00
00051c  44000000          DCB      0x44,0x00,0x00,0x00
000520  01010200          DCB      0x01,0x01,0x02,0x00
000524  1900              DCB      0x19,0x00
000526  07e0              DCW      0x07e0
000528  07e007e8          DCW      0x07e0,0x07e8
00052c  05e8              DCW      0x05e8
00052e  042c              DCB      0x04,0x2c
000530  fe000e00          DCB      0xfe,0x00,0x0e,0x00
000534  00000101          DCB      0x00,0x00,0x01,0x01
000538  01001a00          DCB      0x01,0x00,0x1a,0x00
00053c  07e007e0          DCW      0x07e0,0x07e0
000540  07e805e8          DCW      0x07e8,0x05e8
000544  042cfe00          DCB      0x04,0x2c,0xfe,0x00
000548  10000000          DCB      0x10,0x00,0x00,0x00
00054c  01010200          DCB      0x01,0x01,0x02,0x00
000550  1b00              DCB      0x1b,0x00
000552  07e0              DCW      0x07e0
000554  07e007e8          DCW      0x07e0,0x07e8
000558  05e8              DCW      0x05e8
00055a  021a              DCB      0x02,0x1a
00055c  6d000000          DCB      0x6d,0x00,0x00,0x00
000560  00000003          DCB      0x00,0x00,0x00,0x03
000564  01001c00          DCB      0x01,0x00,0x1c,0x00
000568  07e007e0          DCW      0x07e0,0x07e0
00056c  07e805e8          DCW      0x07e8,0x05e8
000570  042cfe11          DCB      0x04,0x2c,0xfe,0x11
000574  54000000          DCB      0x54,0x00,0x00,0x00
000578  01010100          DCB      0x01,0x01,0x01,0x00
00057c  1d00              DCB      0x1d,0x00
00057e  07e0              DCW      0x07e0
000580  07e007e8          DCW      0x07e0,0x07e8
000584  05e8              DCW      0x05e8
000586  042c              DCB      0x04,0x2c
000588  fe194000          DCB      0xfe,0x19,0x40,0x00
00058c  00000101          DCB      0x00,0x00,0x01,0x01
000590  01001e00          DCB      0x01,0x00,0x1e,0x00
000594  07e007e0          DCW      0x07e0,0x07e0
000598  07e805e8          DCW      0x07e8,0x05e8
00059c  042cfe13          DCB      0x04,0x2c,0xfe,0x13
0005a0  2a000000          DCB      0x2a,0x00,0x00,0x00
0005a4  01010200          DCB      0x01,0x01,0x02,0x00
0005a8  1f00              DCB      0x1f,0x00
0005aa  07e0              DCW      0x07e0
0005ac  07e007e8          DCW      0x07e0,0x07e8
0005b0  05e8              DCW      0x05e8
0005b2  042c              DCB      0x04,0x2c
0005b4  fe131d00          DCB      0xfe,0x13,0x1d,0x00
0005b8  00000101          DCB      0x00,0x00,0x01,0x01
0005bc  02002000          DCB      0x02,0x00,0x20,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          %        8
0005d0  00000000          DCB      0x00,0x00,0x00,0x00
0005d4  2100              DCB      0x21,0x00
0005d6  07e2              DCW      0x07e2
0005d8  07e207ea          DCW      0x07e2,0x07ea
0005dc  05ea              DCW      0x05ea
0005de  042c              DCB      0x04,0x2c
0005e0  fe002f00          DCB      0xfe,0x00,0x2f,0x00
0005e4  00000101          DCB      0x00,0x00,0x01,0x01
0005e8  01002200          DCB      0x01,0x00,0x22,0x00
0005ec  02430243          DCW      0x0243,0x0243
0005f0  06430543          DCW      0x0643,0x0543
0005f4  042cfe40          DCB      0x04,0x2c,0xfe,0x40
0005f8  75000000          DCB      0x75,0x00,0x00,0x00
0005fc  01010100          DCB      0x01,0x01,0x01,0x00
000600  2300              DCB      0x23,0x00
000602  0241              DCW      0x0241
000604  02410641          DCW      0x0241,0x0641
000608  0641              DCW      0x0641
00060a  0322              DCB      0x03,0x22
00060c  90f80000          DCB      0x90,0xf8,0x00,0x00
000610  00000004          DCB      0x00,0x00,0x00,0x04
000614  02002400          DCB      0x02,0x00,0x24,0x00
000618  02410241          DCW      0x0241,0x0241
00061c  06410641          DCW      0x0641,0x0641
000620  032290fb          DCB      0x03,0x22,0x90,0xfb
000624  00000000          DCB      0x00,0x00,0x00,0x00
000628  00040200          DCB      0x00,0x04,0x02,0x00
00062c  2500              DCB      0x25,0x00
00062e  0241              DCW      0x0241
000630  02410641          DCW      0x0241,0x0641
000634  0641              DCW      0x0641
000636  021a              DCB      0x02,0x1a
000638  09000000          DCB      0x09,0x00,0x00,0x00
00063c  00000003          DCB      0x00,0x00,0x00,0x03
000640  02002600          DCB      0x02,0x00,0x26,0x00
000644  02410241          DCW      0x0241,0x0241
000648  06410641          DCW      0x0641,0x0641
00064c  032290b1          DCB      0x03,0x22,0x90,0xb1
000650  00000000          DCB      0x00,0x00,0x00,0x00
000654  00040200          DCB      0x00,0x04,0x02,0x00
000658  2700              DCB      0x27,0x00
00065a  0241              DCW      0x0241
00065c  02410641          DCW      0x0241,0x0641
000660  0641              DCW      0x0641
000662  0322              DCB      0x03,0x22
000664  80850000          DCB      0x80,0x85,0x00,0x00
000668  00000004          DCB      0x00,0x00,0x00,0x04
00066c  01002800          DCB      0x01,0x00,0x28,0x00
000670  02410241          DCW      0x0241,0x0241
000674  06410641          DCW      0x0641,0x0641
000678  03228086          DCB      0x03,0x22,0x80,0x86
00067c  00000000          DCB      0x00,0x00,0x00,0x00
000680  00040100          DCB      0x00,0x04,0x01,0x00
000684  2900              DCB      0x29,0x00
000686  0241              DCW      0x0241
000688  02410641          DCW      0x0241,0x0641
00068c  0641              DCW      0x0641
00068e  0322              DCB      0x03,0x22
000690  80880000          DCB      0x80,0x88,0x00,0x00
000694  00000004          DCB      0x00,0x00,0x00,0x04
000698  01002a00          DCB      0x01,0x00,0x2a,0x00
00069c  02410241          DCW      0x0241,0x0241
0006a0  06410641          DCW      0x0641,0x0641
0006a4  03228087          DCB      0x03,0x22,0x80,0x87
0006a8  00000000          DCB      0x00,0x00,0x00,0x00
0006ac  00040100          DCB      0x00,0x04,0x01,0x00
0006b0  2b00              DCB      0x2b,0x00
0006b2  0241              DCW      0x0241
0006b4  02410641          DCW      0x0241,0x0641
0006b8  0641              DCW      0x0641
0006ba  0322              DCB      0x03,0x22
0006bc  90e00000          DCB      0x90,0xe0,0x00,0x00
0006c0  00000004          DCB      0x00,0x00,0x00,0x04
0006c4  01002c00          DCB      0x01,0x00,0x2c,0x00
0006c8  02410241          DCW      0x0241,0x0241
0006cc  06410641          DCW      0x0641,0x0641
0006d0  0322804c          DCB      0x03,0x22,0x80,0x4c
0006d4  00000000          DCB      0x00,0x00,0x00,0x00
0006d8  00040200          DCB      0x00,0x04,0x02,0x00
0006dc  2d00              DCB      0x2d,0x00
0006de  0241              DCW      0x0241
0006e0  02410641          DCW      0x0241,0x0641
0006e4  0641              DCW      0x0641
0006e6  0322              DCB      0x03,0x22
0006e8  804c0000          DCB      0x80,0x4c,0x00,0x00
0006ec  00000004          DCB      0x00,0x00,0x00,0x04
0006f0  02002e00          DCB      0x02,0x00,0x2e,0x00
0006f4  02410241          DCW      0x0241,0x0241
0006f8  06410641          DCW      0x0641,0x0641
0006fc  0322804c          DCB      0x03,0x22,0x80,0x4c
000700  00000000          DCB      0x00,0x00,0x00,0x00
000704  00040200          DCB      0x00,0x04,0x02,0x00
000708  2f00              DCB      0x2f,0x00
00070a  0241              DCW      0x0241
00070c  02410641          DCW      0x0241,0x0641
000710  0641              DCW      0x0641
000712  0322              DCB      0x03,0x22
000714  804c0000          DCB      0x80,0x4c,0x00,0x00
000718  00000004          DCB      0x00,0x00,0x00,0x04
00071c  02003000          DCB      0x02,0x00,0x30,0x00
000720  02410241          DCW      0x0241,0x0241
000724  06410641          DCW      0x0641,0x0641
000728  0322804c          DCB      0x03,0x22,0x80,0x4c
00072c  00000000          DCB      0x00,0x00,0x00,0x00
000730  00040200          DCB      0x00,0x04,0x02,0x00
000734  3100              DCB      0x31,0x00
000736  0241              DCW      0x0241
000738  02410641          DCW      0x0241,0x0641
00073c  0641              DCW      0x0641
00073e  0322              DCB      0x03,0x22
000740  804c0000          DCB      0x80,0x4c,0x00,0x00
000744  00000004          DCB      0x00,0x00,0x00,0x04
000748  02003200          DCB      0x02,0x00,0x32,0x00
00074c  02410241          DCW      0x0241,0x0241
000750  06410641          DCW      0x0641,0x0641
000754  0322804c          DCB      0x03,0x22,0x80,0x4c
000758  00000000          DCB      0x00,0x00,0x00,0x00
00075c  00040200          DCB      0x00,0x04,0x02,0x00
000760  3300              DCB      0x33,0x00
000762  0241              DCW      0x0241
000764  02410641          DCW      0x0241,0x0641
000768  0641              DCW      0x0641
00076a  0322              DCB      0x03,0x22
00076c  804c0000          DCB      0x80,0x4c,0x00,0x00
000770  00000004          DCB      0x00,0x00,0x00,0x04
000774  02003400          DCB      0x02,0x00,0x34,0x00
000778  02410241          DCW      0x0241,0x0241
00077c  06410641          DCW      0x0641,0x0641
000780  021adf00          DCB      0x02,0x1a,0xdf,0x00
000784  00000000          DCB      0x00,0x00,0x00,0x00
000788  00040400          DCB      0x00,0x04,0x04,0x00
                          %        88
                  gm_fault_code
                          DCD      0x00000000
                          DCD      0x18db33f1
0007ec  00000803          DCB      0x00,0x00,0x08,0x03
0007f0  a9811a00          DCB      0xa9,0x81,0x1a,0x00
0007f4  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_clear_fault
                          DCD      0x00000000
                          DCD      0x18db33f1
000800  00000801          DCB      0x00,0x00,0x08,0x01
000804  04000000          DCB      0x04,0x00,0x00,0x00
000808  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_code_list
00080c  07e005e8          DCW      0x07e0,0x05e8
000810  07e205ea          DCW      0x07e2,0x05ea
000814  02430543          DCW      0x0243,0x0543
000818  02470547          DCW      0x0247,0x0547
00081c  02410541          DCW      0x0241,0x0541
000820  024c054c          DCW      0x024c,0x054c
000824  02420542          DCW      0x0242,0x0542
000828  02510551          DCW      0x0251,0x0551
00082c  02410541          DCW      0x0241,0x0541
                          DCD      0x00000000
                  gm_eng_init_code
                          DCD      0x000007e0
                          DCD      0x18db33f1
00083c  00000201          DCB      0x00,0x00,0x02,0x01
000840  3e000000          DCB      0x3e,0x00,0x00,0x00
000844  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007e0
                          DCD      0x18db33f1
000850  00000302          DCB      0x00,0x00,0x03,0x02
000854  aa000000          DCB      0xaa,0x00,0x00,0x00
000858  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_at_init_code
                          DCD      0x000007e2
                          DCD      0x18db33f1
000864  00000201          DCB      0x00,0x00,0x02,0x01
000868  3e000000          DCB      0x3e,0x00,0x00,0x00
00086c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007e2
                          DCD      0x18db33f1
000878  00000302          DCB      0x00,0x00,0x03,0x02
00087c  aa000000          DCB      0xaa,0x00,0x00,0x00
000880  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_abs_init_code
                          DCD      0x00000243
                          DCD      0x18db33f1
00088c  00000201          DCB      0x00,0x00,0x02,0x01
000890  3e000000          DCB      0x3e,0x00,0x00,0x00
000894  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000243
                          DCD      0x18db33f1
0008a0  00000302          DCB      0x00,0x00,0x03,0x02
0008a4  aa000000          DCB      0xaa,0x00,0x00,0x00
0008a8  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_bcm_init_code
                          DCD      0x00000241
                          DCD      0x18db33f1
0008b4  00000201          DCB      0x00,0x00,0x02,0x01
0008b8  3e000000          DCB      0x3e,0x00,0x00,0x00
0008bc  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000241
                          DCD      0x18db33f1
0008c8  00000302          DCB      0x00,0x00,0x03,0x02
0008cc  aa000000          DCB      0xaa,0x00,0x00,0x00
0008d0  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_eng_exit_code
                          DCD      0x000007e0
                          DCD      0x18db33f1
0008dc  00000201          DCB      0x00,0x00,0x02,0x01
0008e0  20000000          DCB      0x20,0x00,0x00,0x00
0008e4  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_at_exit_code
                          DCD      0x000007e2
                          DCD      0x18db33f1
0008f0  00000201          DCB      0x00,0x00,0x02,0x01
0008f4  20000000          DCB      0x20,0x00,0x00,0x00
0008f8  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_abs_exit_code
                          DCD      0x00000243
                          DCD      0x18db33f1
000904  00000201          DCB      0x00,0x00,0x02,0x01
000908  20000000          DCB      0x20,0x00,0x00,0x00
00090c  00000000          DCB      0x00,0x00,0x00,0x00
                  gm_bcm_exit_code
                          DCD      0x00000241
                          DCD      0x18db33f1
000918  00000201          DCB      0x00,0x00,0x02,0x01
00091c  20000000          DCB      0x20,0x00,0x00,0x00
000920  00000000          DCB      0x00,0x00,0x00,0x00
