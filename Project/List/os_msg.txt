; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\os_msg.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\os_msg.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\os_msg.crf ..\UCOSIII\uCOS-III\Source\os_msg.c]
                          THUMB

                          AREA ||i.OS_MsgPoolCreate||, CODE, READONLY, ALIGN=1

                  OS_MsgPoolCreate PROC
;;;61     
;;;62     void  OS_MsgPoolCreate (OS_MSG      *p_msg,
000000  b510              PUSH     {r4,lr}
;;;63                             OS_MSG_QTY   size)
;;;64     {
;;;65         OS_MSG      *p_msg1;
;;;66         OS_MSG      *p_msg2;
;;;67         OS_MSG_QTY   i;
;;;68         OS_MSG_QTY   loops;
;;;69     
;;;70     
;;;71     
;;;72         p_msg1 = p_msg;
;;;73         p_msg2 = p_msg;
;;;74         p_msg2++;
;;;75         loops  = size - 1u;
000002  1e49              SUBS     r1,r1,#1
000004  b28c              UXTH     r4,r1
;;;76         for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
000006  2300              MOVS     r3,#0
000008  f1000210          ADD      r2,r0,#0x10           ;74
00000c  4619              MOV      r1,r3
00000e  e007              B        |L1.32|
                  |L1.16|
000010  e9c02100          STRD     r2,r1,[r0,#0]         ;64
;;;77             p_msg1->NextPtr = p_msg2;
;;;78             p_msg1->MsgPtr  = (void      *)0;
;;;79             p_msg1->MsgSize = (OS_MSG_SIZE)0u;
000014  8101              STRH     r1,[r0,#8]
;;;80             p_msg1->MsgTS   = (CPU_TS     )0u;
;;;81             p_msg1++;
000016  60c1              STR      r1,[r0,#0xc]
000018  3010              ADDS     r0,r0,#0x10
;;;82             p_msg2++;
00001a  3210              ADDS     r2,r2,#0x10
00001c  1c5b              ADDS     r3,r3,#1              ;76
00001e  b29b              UXTH     r3,r3                 ;76
                  |L1.32|
000020  42a3              CMP      r3,r4                 ;76
000022  d3f5              BCC      |L1.16|
;;;83         }
;;;84         p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
;;;85         p_msg1->MsgPtr  = (void      *)0;
000024  6001              STR      r1,[r0,#0]
;;;86         p_msg1->MsgSize = (OS_MSG_SIZE)0u;
000026  6041              STR      r1,[r0,#4]
000028  8101              STRH     r1,[r0,#8]
;;;87         p_msg1->MsgTS   = (CPU_TS     )0u;
00002a  60c1              STR      r1,[r0,#0xc]
;;;88     }
00002c  bd10              POP      {r4,pc}
;;;89     
                          ENDP


                          AREA ||i.OS_MsgPoolInit||, CODE, READONLY, ALIGN=2

                  OS_MsgPoolInit PROC
;;;108    
;;;109    void  OS_MsgPoolInit (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;110    {
;;;111    #ifdef OS_SAFETY_CRITICAL
;;;112        if (p_err == (OS_ERR *)0) {
;;;113            OS_SAFETY_CRITICAL_EXCEPTION();
;;;114            return;
;;;115        }
;;;116    #endif
;;;117    
;;;118    #if OS_CFG_ARG_CHK_EN > 0u
;;;119        if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
000002  4e0e              LDR      r6,|L2.60|
000004  4604              MOV      r4,r0                 ;110
000006  6830              LDR      r0,[r6,#0]            ;110  ; OSCfg_MsgPoolBasePtr
000008  b180              CBZ      r0,|L2.44|
;;;120           *p_err = OS_ERR_MSG_POOL_NULL_PTR;
;;;121            return;
;;;122        }
;;;123        if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
00000a  4d0d              LDR      r5,|L2.64|
00000c  8828              LDRH     r0,[r5,#0]  ; OSCfg_MsgPoolSize
00000e  b180              CBZ      r0,|L2.50|
;;;124           *p_err = OS_ERR_MSG_POOL_EMPTY;
;;;125            return;
;;;126        }
;;;127    #endif
;;;128    
;;;129        OS_MsgPoolCreate(OSCfg_MsgPoolBasePtr,
000010  b281              UXTH     r1,r0
000012  6830              LDR      r0,[r6,#0]  ; OSCfg_MsgPoolBasePtr
000014  f7fffffe          BL       OS_MsgPoolCreate
;;;130                         OSCfg_MsgPoolSize);
;;;131        OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
000018  480a              LDR      r0,|L2.68|
00001a  6831              LDR      r1,[r6,#0]  ; OSCfg_MsgPoolBasePtr
;;;132        OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
00001c  6001              STR      r1,[r0,#0]  ; OSMsgPool
00001e  8829              LDRH     r1,[r5,#0]  ; OSCfg_MsgPoolSize
000020  8081              STRH     r1,[r0,#4]
;;;133        OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
000022  2100              MOVS     r1,#0
000024  80c1              STRH     r1,[r0,#6]
;;;134        OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
000026  8101              STRH     r1,[r0,#8]
;;;135       *p_err                =  OS_ERR_NONE;
000028  8021              STRH     r1,[r4,#0]
;;;136    }
00002a  bd70              POP      {r4-r6,pc}
                  |L2.44|
00002c  f245701e          MOV      r0,#0x571e            ;120
000030  e001              B        |L2.54|
                  |L2.50|
000032  f245701d          MOV      r0,#0x571d            ;124
                  |L2.54|
000036  8020              STRH     r0,[r4,#0]            ;124
000038  bd70              POP      {r4-r6,pc}
;;;137    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      OSCfg_MsgPoolBasePtr
                  |L2.64|
                          DCD      OSCfg_MsgPoolSize
                  |L2.68|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQFreeAll||, CODE, READONLY, ALIGN=2

                  OS_MsgQFreeAll PROC
;;;153    
;;;154    OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156        OS_MSG      *p_msg;
;;;157        OS_MSG_QTY   qty;
;;;158    
;;;159    
;;;160    
;;;161        qty = p_msg_q->NbrEntries;                              /* Get the number of OS_MSGs being freed                  */
000002  8942              LDRH     r2,[r0,#0xa]
000004  b192              CBZ      r2,|L3.44|
;;;162        if (p_msg_q->NbrEntries > (OS_MSG_QTY)0) {
;;;163            p_msg                   = p_msg_q->InPtr;           /* Point to end of message chain                          */
;;;164            p_msg->NextPtr          = OSMsgPool.NextPtr;
000006  490a              LDR      r1,|L3.48|
000008  6803              LDR      r3,[r0,#0]
00000a  680c              LDR      r4,[r1,#0]  ; OSMsgPool
;;;165            OSMsgPool.NextPtr       = p_msg_q->OutPtr;          /* Point to beginning of message chain                    */
00000c  601c              STR      r4,[r3,#0]
00000e  6843              LDR      r3,[r0,#4]
;;;166            OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;      /* Update statistics for free list of messages            */
000010  600b              STR      r3,[r1,#0]  ; OSMsgPool
000012  88cb              LDRH     r3,[r1,#6]  ; OSMsgPool
000014  8944              LDRH     r4,[r0,#0xa]
000016  1b1b              SUBS     r3,r3,r4
000018  80cb              STRH     r3,[r1,#6]
;;;167            OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
00001a  888b              LDRH     r3,[r1,#4]  ; OSMsgPool
00001c  8944              LDRH     r4,[r0,#0xa]
00001e  4423              ADD      r3,r3,r4
000020  808b              STRH     r3,[r1,#4]
;;;168            p_msg_q->NbrEntries     = (OS_MSG_QTY)0;            /* Flush the message queue                                */
000022  2100              MOVS     r1,#0
000024  8141              STRH     r1,[r0,#0xa]
;;;169            p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
000026  8181              STRH     r1,[r0,#0xc]
;;;170            p_msg_q->InPtr          = (OS_MSG   *)0;
;;;171            p_msg_q->OutPtr         = (OS_MSG   *)0;
000028  6001              STR      r1,[r0,#0]
00002a  6041              STR      r1,[r0,#4]
                  |L3.44|
;;;172        }
;;;173        return (qty);
00002c  4610              MOV      r0,r2
;;;174    }
00002e  bd10              POP      {r4,pc}
;;;175    
                          ENDP

                  |L3.48|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQGet||, CODE, READONLY, ALIGN=2

                  OS_MsgQGet PROC
;;;228    
;;;229    void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
000000  b5f0              PUSH     {r4-r7,lr}
;;;230                       OS_MSG_SIZE  *p_msg_size,
;;;231                       CPU_TS       *p_ts,
;;;232                       OS_ERR       *p_err)
;;;233    {
;;;234        OS_MSG  *p_msg;
;;;235        void    *p_void;
;;;236    
;;;237    
;;;238    
;;;239    #ifdef OS_SAFETY_CRITICAL
;;;240        if (p_err == (OS_ERR *)0) {
;;;241            OS_SAFETY_CRITICAL_EXCEPTION();
;;;242            return ((void *)0);
;;;243        }
;;;244    #endif
;;;245    
;;;246        if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {
000002  8944              LDRH     r4,[r0,#0xa]
000004  2500              MOVS     r5,#0
000006  b1cc              CBZ      r4,|L4.60|
;;;247           *p_msg_size = (OS_MSG_SIZE)0;
;;;248            if (p_ts != (CPU_TS *)0) {
;;;249               *p_ts  = (CPU_TS  )0;
;;;250            }
;;;251           *p_err = OS_ERR_Q_EMPTY;
;;;252            return ((void *)0);
;;;253        }
;;;254    
;;;255        p_msg           = p_msg_q->OutPtr;
;;;256        p_void          = p_msg->MsgPtr;
000008  6844              LDR      r4,[r0,#4]
;;;257       *p_msg_size      = p_msg->MsgSize;
00000a  8927              LDRH     r7,[r4,#8]
00000c  6866              LDR      r6,[r4,#4]
00000e  800f              STRH     r7,[r1,#0]
;;;258        if (p_ts != (CPU_TS *)0) {
000010  b10a              CBZ      r2,|L4.22|
;;;259           *p_ts  = p_msg->MsgTS;
000012  68e1              LDR      r1,[r4,#0xc]
000014  6011              STR      r1,[r2,#0]
                  |L4.22|
;;;260        }
;;;261        p_msg_q->OutPtr = p_msg->NextPtr;
000016  6821              LDR      r1,[r4,#0]
;;;262        if (p_msg_q->OutPtr == (OS_MSG *)0) {
000018  6041              STR      r1,[r0,#4]
00001a  b1b9              CBZ      r1,|L4.76|
;;;263            p_msg_q->InPtr      = (OS_MSG   *)0;
;;;264            p_msg_q->NbrEntries = (OS_MSG_QTY)0;
;;;265        } else {
;;;266            p_msg_q->NbrEntries--;
00001c  8941              LDRH     r1,[r0,#0xa]
00001e  1e49              SUBS     r1,r1,#1
000020  8141              STRH     r1,[r0,#0xa]
                  |L4.34|
;;;267        }
;;;268        p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
000022  480c              LDR      r0,|L4.84|
000024  6801              LDR      r1,[r0,#0]  ; OSMsgPool
;;;269        OSMsgPool.NextPtr = p_msg;
000026  6021              STR      r1,[r4,#0]
;;;270        OSMsgPool.NbrFree++;
000028  6004              STR      r4,[r0,#0]  ; OSMsgPool
00002a  8881              LDRH     r1,[r0,#4]  ; OSMsgPool
00002c  1c49              ADDS     r1,r1,#1
00002e  8081              STRH     r1,[r0,#4]
;;;271        OSMsgPool.NbrUsed--;
000030  88c1              LDRH     r1,[r0,#6]  ; OSMsgPool
000032  1e49              SUBS     r1,r1,#1
000034  80c1              STRH     r1,[r0,#6]
;;;272       *p_err             = OS_ERR_NONE;
000036  801d              STRH     r5,[r3,#0]
;;;273        return (p_void);
000038  4630              MOV      r0,r6
;;;274    }
00003a  bdf0              POP      {r4-r7,pc}
                  |L4.60|
00003c  800d              STRH     r5,[r1,#0]            ;247
00003e  b102              CBZ      r2,|L4.66|
000040  6015              STR      r5,[r2,#0]            ;249
                  |L4.66|
000042  f2465092          MOV      r0,#0x6592            ;251
000046  8018              STRH     r0,[r3,#0]            ;251
000048  2000              MOVS     r0,#0                 ;252
00004a  bdf0              POP      {r4-r7,pc}
                  |L4.76|
00004c  6005              STR      r5,[r0,#0]            ;264
00004e  8145              STRH     r5,[r0,#0xa]          ;264
000050  e7e7              B        |L4.34|
;;;275    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQInit||, CODE, READONLY, ALIGN=1

                  OS_MsgQInit PROC
;;;193    
;;;194    void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
000000  8101              STRH     r1,[r0,#8]
;;;195                       OS_MSG_QTY   size)
;;;196    {
;;;197        p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
;;;198        p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
000002  2100              MOVS     r1,#0
000004  8141              STRH     r1,[r0,#0xa]
;;;199        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
000006  8181              STRH     r1,[r0,#0xc]
;;;200        p_msg_q->InPtr          = (OS_MSG   *)0;
;;;201        p_msg_q->OutPtr         = (OS_MSG   *)0;
000008  6001              STR      r1,[r0,#0]
00000a  6041              STR      r1,[r0,#4]
;;;202    }
00000c  4770              BX       lr
;;;203    
                          ENDP


                          AREA ||i.OS_MsgQPut||, CODE, READONLY, ALIGN=2

                  OS_MsgQPut PROC
;;;308    
;;;309    void  OS_MsgQPut (OS_MSG_Q     *p_msg_q,
000000  b5f0              PUSH     {r4-r7,lr}
;;;310                      void         *p_void,
;;;311                      OS_MSG_SIZE   msg_size,
;;;312                      OS_OPT        opt,
;;;313                      CPU_TS        ts,
;;;314                      OS_ERR       *p_err)
;;;315    {
;;;316        OS_MSG  *p_msg;
;;;317        OS_MSG  *p_msg_in;
;;;318    
;;;319    
;;;320    
;;;321    #ifdef OS_SAFETY_CRITICAL
;;;322        if (p_err == (OS_ERR *)0) {
;;;323            OS_SAFETY_CRITICAL_EXCEPTION();
;;;324            return;
;;;325        }
;;;326    #endif
;;;327    
;;;328        if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
000002  8944              LDRH     r4,[r0,#0xa]
000004  e9dde705          LDRD     lr,r7,[sp,#0x14]      ;315
000008  8905              LDRH     r5,[r0,#8]
00000a  42ac              CMP      r4,r5
00000c  d302              BCC      |L6.20|
;;;329           *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
00000e  f2465093          MOV      r0,#0x6593
;;;330            return;
000012  e01e              B        |L6.82|
                  |L6.20|
;;;331        }
;;;332    
;;;333        if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
000014  4d1a              LDR      r5,|L6.128|
000016  88ae              LDRH     r6,[r5,#4]  ; OSMsgPool
000018  b1ce              CBZ      r6,|L6.78|
;;;334           *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
;;;335            return;
;;;336        }
;;;337    
;;;338        p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
;;;339        OSMsgPool.NextPtr = p_msg->NextPtr;
00001a  682c              LDR      r4,[r5,#0]  ; OSMsgPool
;;;340        OSMsgPool.NbrFree--;
00001c  1e76              SUBS     r6,r6,#1
00001e  f8d4c000          LDR      r12,[r4,#0]           ;339
000022  f8c5c000          STR      r12,[r5,#0]  ; OSMsgPool
000026  80ae              STRH     r6,[r5,#4]
;;;341        OSMsgPool.NbrUsed++;
000028  88ee              LDRH     r6,[r5,#6]  ; OSMsgPool
00002a  1c76              ADDS     r6,r6,#1
00002c  b2b6              UXTH     r6,r6
00002e  80ee              STRH     r6,[r5,#6]
;;;342        if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
000030  f8b5c008          LDRH     r12,[r5,#8]  ; OSMsgPool
000034  45b4              CMP      r12,r6
000036  d200              BCS      |L6.58|
;;;343            OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
000038  812e              STRH     r6,[r5,#8]
                  |L6.58|
;;;344        }
;;;345        if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
00003a  8946              LDRH     r6,[r0,#0xa]
00003c  2500              MOVS     r5,#0
00003e  b156              CBZ      r6,|L6.86|
;;;346            p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
;;;347            p_msg_q->OutPtr        = p_msg;
;;;348            p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
;;;349        } else {
;;;350            if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Assume FIFO if not LIFO                                */
000040  06db              LSLS     r3,r3,#27
000042  d40c              BMI      |L6.94|
;;;351                p_msg_in           = p_msg_q->InPtr;            /* FIFO                                                   */
;;;352                p_msg_in->NextPtr  = p_msg;
000044  6803              LDR      r3,[r0,#0]
;;;353                p_msg->NextPtr     = (OS_MSG *)0;
000046  601c              STR      r4,[r3,#0]
;;;354                p_msg_q->InPtr     = p_msg;
000048  6025              STR      r5,[r4,#0]
00004a  6004              STR      r4,[r0,#0]
00004c  e00a              B        |L6.100|
                  |L6.78|
00004e  f245701d          MOV      r0,#0x571d            ;334
                  |L6.82|
000052  8038              STRH     r0,[r7,#0]            ;334
;;;355            } else {
;;;356                p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO                                                   */
;;;357                p_msg_q->OutPtr    = p_msg;
;;;358            }
;;;359            p_msg_q->NbrEntries++;
;;;360        }
;;;361        if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
;;;362            p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
;;;363        }
;;;364        p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
;;;365        p_msg->MsgSize = msg_size;
;;;366        p_msg->MsgTS   = ts;
;;;367       *p_err          = OS_ERR_NONE;
;;;368    }
000054  bdf0              POP      {r4-r7,pc}
                  |L6.86|
000056  6004              STR      r4,[r0,#0]            ;347
000058  2301              MOVS     r3,#1                 ;348
00005a  6044              STR      r4,[r0,#4]            ;348
00005c  e004              B        |L6.104|
                  |L6.94|
00005e  6843              LDR      r3,[r0,#4]            ;356
000060  6023              STR      r3,[r4,#0]            ;357
000062  6044              STR      r4,[r0,#4]            ;357
                  |L6.100|
000064  8943              LDRH     r3,[r0,#0xa]          ;359
000066  1c5b              ADDS     r3,r3,#1              ;359
                  |L6.104|
000068  8143              STRH     r3,[r0,#0xa]          ;359
00006a  8986              LDRH     r6,[r0,#0xc]          ;361
00006c  b29b              UXTH     r3,r3                 ;361
00006e  429e              CMP      r6,r3                 ;361
000070  d200              BCS      |L6.116|
000072  8183              STRH     r3,[r0,#0xc]          ;362
                  |L6.116|
000074  6061              STR      r1,[r4,#4]            ;365
000076  8122              STRH     r2,[r4,#8]            ;365
000078  f8c4e00c          STR      lr,[r4,#0xc]          ;367
00007c  803d              STRH     r5,[r7,#0]            ;367
00007e  bdf0              POP      {r4-r7,pc}
;;;369    #endif
                          ENDP

                  |L6.128|
                          DCD      OSMsgPool
