; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\stm32f10x_iwdg.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_iwdg.crf ..\STM32F10x_FWLib\src\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||i.IWDG_Enable||, CODE, READONLY, ALIGN=2

                  IWDG_Enable PROC
;;;147      */
;;;148    void IWDG_Enable(void)
000000  4902              LDR      r1,|L1.12|
;;;149    {
;;;150      IWDG->KR = KR_KEY_Enable;
000002  f64c40cc          MOV      r0,#0xcccc
000006  6008              STR      r0,[r1,#0]
;;;151    }
000008  4770              BX       lr
;;;152    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  IWDG_GetFlagStatus PROC
;;;160      */
;;;161    FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
000000  4a03              LDR      r2,|L2.16|
;;;162    {
000002  4601              MOV      r1,r0
;;;163      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;164      /* Check the parameters */
;;;165      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;166      if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
000006  68d2              LDR      r2,[r2,#0xc]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L2.14|
;;;167      {
;;;168        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L2.14|
;;;169      }
;;;170      else
;;;171      {
;;;172        bitstatus = RESET;
;;;173      }
;;;174      /* Return the flag status */
;;;175      return bitstatus;
;;;176    }
00000e  4770              BX       lr
;;;177    
                          ENDP

                  |L2.16|
                          DCD      0x40003000

                          AREA ||i.IWDG_ReloadCounter||, CODE, READONLY, ALIGN=2

                  IWDG_ReloadCounter PROC
;;;137      */
;;;138    void IWDG_ReloadCounter(void)
000000  4902              LDR      r1,|L3.12|
;;;139    {
;;;140      IWDG->KR = KR_KEY_Reload;
000002  f64a20aa          MOV      r0,#0xaaaa
000006  6008              STR      r0,[r1,#0]
;;;141    }
000008  4770              BX       lr
;;;142    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  IWDG_SetPrescaler PROC
;;;111      */
;;;112    void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
000000  4901              LDR      r1,|L4.8|
;;;113    {
;;;114      /* Check the parameters */
;;;115      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;116      IWDG->PR = IWDG_Prescaler;
000002  6048              STR      r0,[r1,#4]
;;;117    }
000004  4770              BX       lr
;;;118    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetReload||, CODE, READONLY, ALIGN=2

                  IWDG_SetReload PROC
;;;124      */
;;;125    void IWDG_SetReload(uint16_t Reload)
000000  4901              LDR      r1,|L5.8|
;;;126    {
;;;127      /* Check the parameters */
;;;128      assert_param(IS_IWDG_RELOAD(Reload));
;;;129      IWDG->RLR = Reload;
000002  6088              STR      r0,[r1,#8]
;;;130    }
000004  4770              BX       lr
;;;131    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_WriteAccessCmd||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;91       */
;;;92     void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
000000  4901              LDR      r1,|L6.8|
;;;93     {
;;;94       /* Check the parameters */
;;;95       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;96       IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;97     }
000004  4770              BX       lr
;;;98     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40003000
