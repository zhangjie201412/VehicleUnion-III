; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\uc_bsp.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\uc_bsp.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\uc_bsp.crf ..\UCOSIII\UCOS_BSP\uc_bsp.c]
                          THUMB

                          AREA ||i.BSP_CPU_ClkFreq||, CODE, READONLY, ALIGN=1

                  BSP_CPU_ClkFreq PROC
;;;26     
;;;27     CPU_INT32U  BSP_CPU_ClkFreq (void)
000000  b500              PUSH     {lr}
;;;28     {
000002  b085              SUB      sp,sp,#0x14
;;;29         RCC_ClocksTypeDef  rcc_clocks;
;;;30     
;;;31         RCC_GetClocksFreq(&rcc_clocks);		//获取各个时钟频率
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       RCC_GetClocksFreq
;;;32     
;;;33         return ((CPU_INT32U)rcc_clocks.HCLK_Frequency);  //返回HCLK时钟频率
00000a  9801              LDR      r0,[sp,#4]
;;;34     }
00000c  b005              ADD      sp,sp,#0x14
00000e  bd00              POP      {pc}
;;;35     
                          ENDP


                          AREA ||i.CPU_TS32_to_uSec||, CODE, READONLY, ALIGN=2

                  CPU_TS32_to_uSec PROC
;;;219    #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
;;;220    CPU_INT64U  CPU_TS32_to_uSec (CPU_TS32  ts_cnts)
000000  b510              PUSH     {r4,lr}
;;;221    {
000002  4604              MOV      r4,r0
;;;222        CPU_INT64U  ts_us;
;;;223        CPU_INT64U  fclk_freq;
;;;224    
;;;225    
;;;226        fclk_freq = BSP_CPU_ClkFreq();
000004  f7fffffe          BL       BSP_CPU_ClkFreq
000008  2100              MOVS     r1,#0
;;;227        ts_us     = ts_cnts / (fclk_freq / DEF_TIME_NBR_uS_PER_SEC);
00000a  4a05              LDR      r2,|L2.32|
00000c  460b              MOV      r3,r1
00000e  f7fffffe          BL       __aeabi_uldivmod
000012  4602              MOV      r2,r0
000014  460b              MOV      r3,r1
000016  4620              MOV      r0,r4
000018  2100              MOVS     r1,#0
00001a  f7fffffe          BL       __aeabi_uldivmod
;;;228    
;;;229        return (ts_us);
;;;230    }
00001e  bd10              POP      {r4,pc}
;;;231    #endif
                          ENDP

                  |L2.32|
                          DCD      0x000f4240

                          AREA ||i.CPU_TS_TmrInit||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrInit PROC
;;;76     #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;77     void  CPU_TS_TmrInit (void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         CPU_INT32U  fclk_freq;
;;;80     
;;;81     
;;;82         fclk_freq = BSP_CPU_ClkFreq();
000002  f7fffffe          BL       BSP_CPU_ClkFreq
;;;83     
;;;84         BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA; //使用DWT  /* Enable Cortex-M4's DWT CYCCNT reg.                   */
000006  4908              LDR      r1,|L3.40|
000008  680a              LDR      r2,[r1,#0]
00000a  f0427280          ORR      r2,r2,#0x1000000
00000e  600a              STR      r2,[r1,#0]
;;;85         BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;					 //初始化CYCCNT寄存器
000010  4906              LDR      r1,|L3.44|
000012  2200              MOVS     r2,#0
000014  604a              STR      r2,[r1,#4]
;;;86         BSP_REG_DWT_CR     |= (CPU_INT32U)BSP_BIT_DWT_CR_CYCCNTENA;//开启CYCCNT
000016  680a              LDR      r2,[r1,#0]
000018  f0420201          ORR      r2,r2,#1
00001c  600a              STR      r2,[r1,#0]
;;;87     
;;;88         CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
00001e  e8bd4010          POP      {r4,lr}
000022  f7ffbffe          B.W      CPU_TS_TmrFreqSet
;;;89     }
;;;90     #endif
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0xe000edfc
                  |L3.44|
                          DCD      0xe0001000

                          AREA ||i.CPU_TS_TmrRd||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrRd PROC
;;;158    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;159    CPU_TS_TMR  CPU_TS_TmrRd (void)
000000  4801              LDR      r0,|L4.8|
;;;160    {
;;;161        CPU_TS_TMR  ts_tmr_cnts;
;;;162    
;;;163    
;;;164        ts_tmr_cnts = (CPU_TS_TMR)BSP_REG_DWT_CYCCNT;
000002  6840              LDR      r0,[r0,#4]
;;;165    
;;;166        return (ts_tmr_cnts);
;;;167    }
000004  4770              BX       lr
;;;168    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0xe0001000
