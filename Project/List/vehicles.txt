; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\vehicles.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\vehicles.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\vehicles.crf ..\PAL\vehicles\vehicles.c]
                          THUMB

                          AREA ||i.control_task||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  control_task PROC
;;;136    
;;;137    void control_task(void *unused)
000000  b086              SUB      sp,sp,#0x18
;;;138    {
;;;139        OS_ERR err;
;;;140        OS_MSG_SIZE size;
;;;141        CtrlMsg *ctrlMsg;
;;;142        uint8_t id;
;;;143        uint8_t val;
;;;144        uint32_t cmd_id;
;;;145    
;;;146        unused = unused;
;;;147        while(1) {
;;;148            //wait for queue post
;;;149            //wait for cmd to control the vehicle
;;;150            ctrlMsg = OSTaskQPend(
;;;151                    (OS_TICK)0,
;;;152                    (OS_OPT)OS_OPT_PEND_BLOCKING,
;;;153                    (OS_MSG_SIZE*)&size,
;;;154                    (CPU_TS*)0,
;;;155                    (OS_ERR*)&err
;;;156                    );
;;;157            logi("id = %d, cmd_id = %d, value = %d",
;;;158                    ctrlMsg->id,
;;;159                    ctrlMsg->cmd_id,
;;;160                    ctrlMsg->value);
;;;161            id = ctrlMsg->id;
;;;162            val = ctrlMsg->value;
;;;163            cmd_id = ctrlMsg->cmd_id;
;;;164            vehicle_lock();
;;;165            mIndex = BCM_DATA_START;
000002  f8df812c          LDR      r8,|L1.304|
;;;166            switch(id) {
;;;167                case CONTROL_WINDOW:
;;;168                    mVehicles.ctrlOps->control_window(val);
000006  f8dfb12c          LDR      r11,|L1.308|
00000a  4c4b              LDR      r4,|L1.312|
00000c  f10d0908          ADD      r9,sp,#8              ;150
000010  f04f0a23          MOV      r10,#0x23             ;165
                  |L1.20|
000014  2300              MOVS     r3,#0                 ;150
000016  aa03              ADD      r2,sp,#0xc            ;150
000018  4619              MOV      r1,r3                 ;150
00001a  4618              MOV      r0,r3                 ;150
00001c  f8cd9000          STR      r9,[sp,#0]            ;150
000020  f7fffffe          BL       OSTaskQPend
000024  4607              MOV      r7,r0                 ;150
000026  a804              ADD      r0,sp,#0x10           ;157
000028  f7fffffe          BL       OSTimeGet
00002c  7821              LDRB     r1,[r4,#0]            ;157  ; DEBUG_MODE
00002e  0789              LSLS     r1,r1,#30             ;157
000030  d510              BPL      |L1.84|
000032  f2413288          MOV      r2,#0x1388            ;157
000036  fbb0f1f2          UDIV     r1,r0,r2              ;157
00003a  fb020211          MLS      r2,r2,r1,r0           ;157
00003e  2005              MOVS     r0,#5                 ;157
000040  fbb2f2f0          UDIV     r2,r2,r0              ;157
000044  7a3b              LDRB     r3,[r7,#8]            ;157
000046  6878              LDR      r0,[r7,#4]            ;157
000048  e9cd0300          STRD     r0,r3,[sp,#0]         ;157
00004c  783b              LDRB     r3,[r7,#0]            ;157
00004e  a03b              ADR      r0,|L1.316|
000050  f7fffffe          BL       __2printf
                  |L1.84|
000054  783d              LDRB     r5,[r7,#0]            ;161
000056  7a3e              LDRB     r6,[r7,#8]            ;162
000058  687f              LDR      r7,[r7,#4]            ;163
00005a  f7fffffe          BL       vehicle_lock
00005e  f888a000          STRB     r10,[r8,#0]           ;165
000062  2d07              CMP      r5,#7                 ;166
000064  d24a              BCS      |L1.252|
000066  e8dff005          TBB      [pc,r5]               ;166
00006a  0408              DCB      0x04,0x08
00006c  0e12161a          DCB      0x0e,0x12,0x16,0x1a
000070  1e00              DCB      0x1e,0x00
000072  f8db0008          LDR      r0,[r11,#8]  ; mVehicles
;;;169                    break;
000076  6801              LDR      r1,[r0,#0]
000078  e002              B        |L1.128|
;;;170                case CONTROL_DOOR:
;;;171                    mVehicles.ctrlOps->control_door(val);
00007a  f8db0008          LDR      r0,[r11,#8]  ; mVehicles
00007e  6841              LDR      r1,[r0,#4]
                  |L1.128|
000080  4630              MOV      r0,r6                 ;168
000082  4788              BLX      r1                    ;168
000084  e04d              B        |L1.290|
;;;172                    break;
;;;173                case CONTROL_LIGHT:
;;;174                    mVehicles.ctrlOps->control_light(val);
000086  f8db0008          LDR      r0,[r11,#8]  ; mVehicles
;;;175                    break;
00008a  6881              LDR      r1,[r0,#8]
00008c  e7f8              B        |L1.128|
;;;176                case CONTROL_SUNROOF:
;;;177                    mVehicles.ctrlOps->control_sunroof(val);
00008e  f8db0008          LDR      r0,[r11,#8]  ; mVehicles
;;;178                    break;
000092  68c1              LDR      r1,[r0,#0xc]
000094  e7f4              B        |L1.128|
;;;179                case CONTROL_TRUNK:
;;;180                    mVehicles.ctrlOps->control_trunk(val);
000096  f8db0008          LDR      r0,[r11,#8]  ; mVehicles
;;;181                    break;
00009a  6901              LDR      r1,[r0,#0x10]
00009c  e7f0              B        |L1.128|
;;;182                case CONTROL_FINDCAR:
;;;183                    mVehicles.ctrlOps->control_findcar(val);
00009e  f8db0008          LDR      r0,[r11,#8]  ; mVehicles
;;;184                    break;
0000a2  6941              LDR      r1,[r0,#0x14]
0000a4  e7ec              B        |L1.128|
;;;185                case CONTROL_IMMOLOCK:
;;;186                    if(val) {
0000a6  b19e              CBZ      r6,|L1.208|
;;;187                        //rf_lock();
;;;188                        //save lock param
;;;189                        set_immo_data(0x38);
0000a8  2038              MOVS     r0,#0x38
0000aa  f7fffffe          BL       set_immo_data
;;;190                        logi("save lock");
0000ae  4668              MOV      r0,sp
0000b0  f7fffffe          BL       OSTimeGet
0000b4  7821              LDRB     r1,[r4,#0]  ; DEBUG_MODE
0000b6  0789              LSLS     r1,r1,#30
0000b8  d533              BPL      |L1.290|
0000ba  f2413288          MOV      r2,#0x1388
0000be  fbb0f1f2          UDIV     r1,r0,r2
0000c2  fb020211          MLS      r2,r2,r1,r0
0000c6  2005              MOVS     r0,#5
0000c8  fbb2f2f0          UDIV     r2,r2,r0
0000cc  a028              ADR      r0,|L1.368|
0000ce  e012              B        |L1.246|
                  |L1.208|
;;;191                    } else {
;;;192                        //rf_unlock();
;;;193                        //save unlock param
;;;194                        set_immo_data(0x00);
0000d0  2000              MOVS     r0,#0
0000d2  f7fffffe          BL       set_immo_data
;;;195                        logi("save unlock");
0000d6  4668              MOV      r0,sp
0000d8  f7fffffe          BL       OSTimeGet
0000dc  7821              LDRB     r1,[r4,#0]  ; DEBUG_MODE
0000de  0789              LSLS     r1,r1,#30
0000e0  d51f              BPL      |L1.290|
0000e2  f2413288          MOV      r2,#0x1388
0000e6  fbb0f1f2          UDIV     r1,r0,r2
0000ea  fb020211          MLS      r2,r2,r1,r0
0000ee  2005              MOVS     r0,#5
0000f0  fbb2f2f0          UDIV     r2,r2,r0
0000f4  a025              ADR      r0,|L1.396|
                  |L1.246|
0000f6  f7fffffe          BL       __2printf
0000fa  e012              B        |L1.290|
                  |L1.252|
;;;196                    }
;;;197                    break;
;;;198    
;;;199                default:
;;;200                    loge("%s: invalid id", __func__);
0000fc  4668              MOV      r0,sp
0000fe  f7fffffe          BL       OSTimeGet
000102  7821              LDRB     r1,[r4,#0]  ; DEBUG_MODE
000104  07c9              LSLS     r1,r1,#31
000106  d00c              BEQ      |L1.290|
000108  f2413288          MOV      r2,#0x1388
00010c  fbb0f1f2          UDIV     r1,r0,r2
000110  fb020211          MLS      r2,r2,r1,r0
000114  2005              MOVS     r0,#5
000116  fbb2f2f0          UDIV     r2,r2,r0
00011a  4b24              LDR      r3,|L1.428|
00011c  a024              ADR      r0,|L1.432|
00011e  f7fffffe          BL       __2printf
                  |L1.290|
;;;201                    break;
;;;202            }
;;;203            vehicle_unlock();
000122  f7fffffe          BL       vehicle_unlock
;;;204            transmit_control_rsp(cmd_id, id);
000126  4629              MOV      r1,r5
000128  4638              MOV      r0,r7
00012a  f7fffffe          BL       transmit_control_rsp
00012e  e771              B        |L1.20|
;;;205        }
;;;206    }
;;;207    
                          ENDP

                  |L1.304|
                          DCD      ||.data||
                  |L1.308|
                          DCD      ||.bss||+0x1998
                  |L1.312|
                          DCD      DEBUG_MODE
                  |L1.316|
00013c  5b253035          DCB      "[%05d.%03d/I]: id = %d, cmd_id = %d, value = %d\r\n",0
000140  642e2530
000144  33642f49
000148  5d3a2069
00014c  64203d20
000150  25642c20
000154  636d645f
000158  6964203d
00015c  2025642c
000160  2076616c
000164  7565203d
000168  2025640d
00016c  0a00    
00016e  00                DCB      0
00016f  00                DCB      0
                  |L1.368|
000170  5b253035          DCB      "[%05d.%03d/I]: save lock\r\n",0
000174  642e2530
000178  33642f49
00017c  5d3a2073
000180  61766520
000184  6c6f636b
000188  0d0a00  
00018b  00                DCB      0
                  |L1.396|
00018c  5b253035          DCB      "[%05d.%03d/I]: save unlock\r\n",0
000190  642e2530
000194  33642f49
000198  5d3a2073
00019c  61766520
0001a0  756e6c6f
0001a4  636b0d0a
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L1.428|
                          DCD      ||.constdata||
                  |L1.432|
0001b0  5b253035          DCB      "[%05d.%03d/E]: %s: invalid id\r\n",0
0001b4  642e2530
0001b8  33642f45
0001bc  5d3a2025
0001c0  733a2069
0001c4  6e76616c
0001c8  69642069
0001cc  640d0a00

                          AREA ||i.getTransmitType||, CODE, READONLY, ALIGN=2

                  getTransmitType PROC
;;;101    
;;;102    uint8_t getTransmitType(void)
000000  4809              LDR      r0,|L2.40|
;;;103    {
;;;104        if(mIndex >= ENG_DATA_START && mIndex <= ENG_DATA_END)
000002  7800              LDRB     r0,[r0,#0]  ; mIndex
000004  2820              CMP      r0,#0x20
000006  d90d              BLS      |L2.36|
;;;105            return TYPE_ENG;
;;;106        if(mIndex >= AT_DATA_START && mIndex <= AT_DATA_END)
000008  2821              CMP      r0,#0x21
00000a  d007              BEQ      |L2.28|
;;;107            return TYPE_AT;
;;;108        if(mIndex >= ABS_DATA_START && mIndex <= ABS_DATA_END)
00000c  2822              CMP      r0,#0x22
00000e  d007              BEQ      |L2.32|
;;;109            return TYPE_ABS;
;;;110        if(mIndex >= BCM_DATA_START && mIndex <= BCM_DATA_END)
000010  f1a00023          SUB      r0,r0,#0x23
000014  2811              CMP      r0,#0x11
000016  d805              BHI      |L2.36|
;;;111            return TYPE_BCM;
000018  2003              MOVS     r0,#3
;;;112        return TYPE_ENG;
;;;113    }
00001a  4770              BX       lr
                  |L2.28|
00001c  2001              MOVS     r0,#1                 ;107
00001e  4770              BX       lr
                  |L2.32|
000020  2002              MOVS     r0,#2                 ;109
000022  4770              BX       lr
                  |L2.36|
000024  2000              MOVS     r0,#0                 ;112
000026  4770              BX       lr
;;;114    
                          ENDP

                  |L2.40|
                          DCD      ||.data||

                          AREA ||i.keepalive_task||, CODE, READONLY, ALIGN=2

                  keepalive_task PROC
;;;114    
;;;115    void keepalive_task(void *unused)
000000  b50e              PUSH     {r1-r3,lr}
;;;116    {
;;;117        OS_ERR err;
;;;118    
;;;119        while(1) {
;;;120            OSTimeDlyHMSM(0, 0, KEEPALIVE_INTERVAL,
;;;121                    0, OS_OPT_TIME_HMSM_STRICT, &err);
;;;122            //send keepalive
;;;123            if(mVehicles.ctrlOps == NULL ||
000002  4c10              LDR      r4,|L3.68|
000004  2500              MOVS     r5,#0                 ;116
000006  ae02              ADD      r6,sp,#8              ;120
                  |L3.8|
000008  2300              MOVS     r3,#0                 ;120
00000a  e9cd5600          STRD     r5,r6,[sp,#0]         ;120
00000e  2202              MOVS     r2,#2                 ;120
000010  4619              MOV      r1,r3                 ;120
000012  4618              MOV      r0,r3                 ;120
000014  f7fffffe          BL       OSTimeDlyHMSM
000018  68a0              LDR      r0,[r4,#8]  ; mVehicles
00001a  2800              CMP      r0,#0
00001c  d0f4              BEQ      |L3.8|
;;;124                    mVehicles.dataOps == NULL ||
00001e  6860              LDR      r0,[r4,#4]  ; mVehicles
000020  2800              CMP      r0,#0
000022  d0f1              BEQ      |L3.8|
;;;125                    mVehicles.init == FALSE) {
000024  7820              LDRB     r0,[r4,#0]  ; mVehicles
000026  2800              CMP      r0,#0
000028  d0ee              BEQ      |L3.8|
;;;126                continue;
;;;127            }
;;;128            vehicle_lock();
00002a  f7fffffe          BL       vehicle_lock
;;;129            if(mVehicles.dataOps->keepalive != NULL) {
00002e  6860              LDR      r0,[r4,#4]  ; mVehicles
000030  6900              LDR      r0,[r0,#0x10]
000032  b120              CBZ      r0,|L3.62|
;;;130                //send keepalive
;;;131                mVehicles.dataOps->keepalive(getTransmitType());
000034  f7fffffe          BL       getTransmitType
000038  6861              LDR      r1,[r4,#4]  ; mVehicles
00003a  6909              LDR      r1,[r1,#0x10]
00003c  4788              BLX      r1
                  |L3.62|
;;;132            }
;;;133            vehicle_unlock();
00003e  f7fffffe          BL       vehicle_unlock
000042  e7e1              B        |L3.8|
;;;134        }
;;;135    }
;;;136    
                          ENDP

                  |L3.68|
                          DCD      ||.bss||+0x1998

                          AREA ||i.setVehiclesInterval||, CODE, READONLY, ALIGN=2

                  setVehiclesInterval PROC
;;;37     
;;;38     void setVehiclesInterval(uint16_t interval)
000000  4901              LDR      r1,|L4.8|
;;;39     {
;;;40         mVehiclesInterval = interval;
000002  8048              STRH     r0,[r1,#2]
;;;41     }
000004  4770              BX       lr
;;;42     
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||i.vehicle_check_engine||, CODE, READONLY, ALIGN=2

                  vehicle_check_engine PROC
;;;305    
;;;306    bool vehicle_check_engine(void)
000000  4801              LDR      r0,|L5.8|
;;;307    {
;;;308        return mEngineOn;
000002  7840              LDRB     r0,[r0,#1]  ; mEngineOn
;;;309    }
000004  4770              BX       lr
;;;310    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.vehicle_clear_code||, CODE, READONLY, ALIGN=2

                  vehicle_clear_code PROC
;;;320    
;;;321    void vehicle_clear_code(void)
000000  b510              PUSH     {r4,lr}
;;;322    {
;;;323        vehicle_lock();
000002  f7fffffe          BL       vehicle_lock
;;;324        mVehicles.ctrlOps->clear_fault_code();
000006  4804              LDR      r0,|L6.24|
000008  6880              LDR      r0,[r0,#8]  ; mVehicles
00000a  6980              LDR      r0,[r0,#0x18]
00000c  4780              BLX      r0
;;;325        vehicle_unlock();
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      vehicle_unlock
;;;326    }
;;;327    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      ||.bss||+0x1998

                          AREA ||i.vehicle_engine_on||, CODE, READONLY, ALIGN=2

                  vehicle_engine_on PROC
;;;295    
;;;296    bool vehicle_engine_on(void)
000000  b510              PUSH     {r4,lr}
;;;297    {
;;;298        bool ret;
;;;299        vehicle_lock();
000002  f7fffffe          BL       vehicle_lock
;;;300        ret = mVehicles.dataOps->is_engine_on();
000006  4805              LDR      r0,|L7.28|
000008  6840              LDR      r0,[r0,#4]  ; mVehicles
00000a  6800              LDR      r0,[r0,#0]
00000c  4780              BLX      r0
00000e  4604              MOV      r4,r0
;;;301        vehicle_unlock();
000010  f7fffffe          BL       vehicle_unlock
;;;302        mEngineOn = ret;
000014  4802              LDR      r0,|L7.32|
000016  7044              STRB     r4,[r0,#1]
;;;303        return ret;
000018  4620              MOV      r0,r4
;;;304    }
00001a  bd10              POP      {r4,pc}
;;;305    
                          ENDP

                  |L7.28|
                          DCD      ||.bss||+0x1998
                  |L7.32|
                          DCD      ||.data||

                          AREA ||i.vehicle_fault_code||, CODE, READONLY, ALIGN=2

                  vehicle_fault_code PROC
;;;310    
;;;311    uint32_t *vehicle_fault_code(uint8_t id, uint8_t *len)
000000  b570              PUSH     {r4-r6,lr}
;;;312    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;313        uint32_t *ret;
;;;314        vehicle_lock();
000006  f7fffffe          BL       vehicle_lock
;;;315        ret = mVehicles.dataOps->check_fault_code(id, len);
00000a  4805              LDR      r0,|L8.32|
00000c  4621              MOV      r1,r4
00000e  6840              LDR      r0,[r0,#4]  ; mVehicles
000010  6882              LDR      r2,[r0,#8]
000012  4628              MOV      r0,r5
000014  4790              BLX      r2
000016  4604              MOV      r4,r0
;;;316        vehicle_unlock();
000018  f7fffffe          BL       vehicle_unlock
;;;317    
;;;318        return ret;
00001c  4620              MOV      r0,r4
;;;319    }
00001e  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP

                  |L8.32|
                          DCD      ||.bss||+0x1998

                          AREA ||i.vehicle_lock||, CODE, READONLY, ALIGN=2

                  vehicle_lock PROC
;;;327    
;;;328    void vehicle_lock(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;329    {
;;;330        OS_ERR err;
;;;331    
;;;332    //    logi("+++%s+++", __func__);
;;;333        OSMutexPend(&mVehicleMutex, 0, OS_OPT_PEND_BLOCKING, 0, &err);
000002  a801              ADD      r0,sp,#4
000004  2300              MOVS     r3,#0
000006  9000              STR      r0,[sp,#0]
000008  461a              MOV      r2,r3
00000a  4619              MOV      r1,r3
00000c  4801              LDR      r0,|L9.20|
00000e  f7fffffe          BL       OSMutexPend
;;;334    }
000012  bd1c              POP      {r2-r4,pc}
;;;335    
                          ENDP

                  |L9.20|
                          DCD      ||.bss||+0x164c

                          AREA ||i.vehicle_setup||, CODE, READONLY, ALIGN=2

                  vehicle_setup PROC
;;;276    
;;;277    void vehicle_setup(uint8_t type)
000000  b150              CBZ      r0,|L10.24|
;;;278    {
;;;279        if(type == VEHICLE_TOYOTA) {
;;;280            toyota_setup(&mVehicles);
;;;281        } else if(type == VEHICLE_GM) {
000002  2801              CMP      r0,#1
000004  d00b              BEQ      |L10.30|
;;;282            gm_setup(&mVehicles);
;;;283        } else if(type == VEHICLE_VAG) {
000006  2802              CMP      r0,#2
000008  d00c              BEQ      |L10.36|
;;;284            vag_setup(&mVehicles);
;;;285        } else if(type == VEHICLE_PASSAT) {
00000a  2803              CMP      r0,#3
00000c  d00d              BEQ      |L10.42|
;;;286            passat_setup(&mVehicles);
;;;287        } else if(type == VEHICLE_HAVAL) {
00000e  2804              CMP      r0,#4
000010  d10e              BNE      |L10.48|
;;;288            haval_setup(&mVehicles);
000012  4808              LDR      r0,|L10.52|
000014  f7ffbffe          B.W      haval_setup
                  |L10.24|
000018  4806              LDR      r0,|L10.52|
00001a  f7ffbffe          B.W      toyota_setup
                  |L10.30|
00001e  4805              LDR      r0,|L10.52|
000020  f7ffbffe          B.W      gm_setup
                  |L10.36|
000024  4803              LDR      r0,|L10.52|
000026  f7ffbffe          B.W      vag_setup
                  |L10.42|
00002a  4802              LDR      r0,|L10.52|
00002c  f7ffbffe          B.W      passat_setup
                  |L10.48|
;;;289        }
;;;290        
;;;291        else if(type == VEHICLE_EOBD) {
;;;292            //eobd_setup(&mVehicles);
;;;293        }
;;;294    }
000030  4770              BX       lr
;;;295    
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      ||.bss||+0x1998

                          AREA ||i.vehicle_unlock||, CODE, READONLY, ALIGN=2

                  vehicle_unlock PROC
;;;335    
;;;336    void vehicle_unlock(void)
000000  b508              PUSH     {r3,lr}
;;;337    {
;;;338        OS_ERR err;
;;;339    
;;;340    //    logi("---%s---", __func__);
;;;341        OSMutexPost(&mVehicleMutex, OS_OPT_POST_NONE, &err);
000002  466a              MOV      r2,sp
000004  2100              MOVS     r1,#0
000006  4802              LDR      r0,|L11.16|
000008  f7fffffe          BL       OSMutexPost
;;;342    }
00000c  bd08              POP      {r3,pc}
;;;343    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      ||.bss||+0x164c

                          AREA ||i.vehicles_init||, CODE, READONLY, ALIGN=2

                  vehicles_init PROC
;;;207    
;;;208    void vehicles_init(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000004  b08a              SUB      sp,sp,#0x28
;;;210        OS_ERR err;
;;;211    
;;;212        OSMutexCreate(
000006  aa09              ADD      r2,sp,#0x24
000008  a127              ADR      r1,|L12.168|
00000a  482b              LDR      r0,|L12.184|
00000c  f7fffffe          BL       OSMutexCreate
;;;213                (OS_MUTEX *)&mVehicleMutex,
;;;214                (CPU_CHAR *)"VEHICLE_MUTEX",
;;;215                &err
;;;216                );
;;;217        //register the vehicles for your car
;;;218        OSTaskCreate((OS_TCB 	* )&VehiclesTaskTCB,		
000010  2400              MOVS     r4,#0
000012  2603              MOVS     r6,#3
000014  e9cd4606          STRD     r4,r6,[sp,#0x18]
000018  ad09              ADD      r5,sp,#0x24
00001a  f04f0833          MOV      r8,#0x33
00001e  4927              LDR      r1,|L12.188|
000020  9508              STR      r5,[sp,#0x20]
000022  9405              STR      r4,[sp,#0x14]
000024  201a              MOVS     r0,#0x1a
000026  e88d0103          STM      sp,{r0,r1,r8}
00002a  f44f7700          MOV      r7,#0x200
00002e  4823              LDR      r0,|L12.188|
000030  e9cd7403          STRD     r7,r4,[sp,#0xc]
000034  4623              MOV      r3,r4
000036  4a22              LDR      r2,|L12.192|
000038  a122              ADR      r1,|L12.196|
00003a  38c4              SUBS     r0,r0,#0xc4
00003c  f7fffffe          BL       OSTaskCreate
;;;219                (CPU_CHAR	* )"vehicles task", 		
;;;220                (OS_TASK_PTR )vehicles_task,	
;;;221                (void		* )0,					
;;;222                (OS_PRIO	  )VEHICLES_TASK_PRIO,     
;;;223                (CPU_STK   * )&VEHICLES_TASK_STK[0],	
;;;224                (CPU_STK_SIZE)VEHICLES_STK_SIZE/10,	
;;;225                (CPU_STK_SIZE)VEHICLES_STK_SIZE,		
;;;226                (OS_MSG_QTY  )0,					
;;;227                (OS_TICK	  )0,					
;;;228                (void   	* )0,					
;;;229                (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,
;;;230                (OS_ERR 	* )&err);				
;;;231        OSTaskCreate((OS_TCB 	* )&ControlTaskTCB,		
000040  2219              MOVS     r2,#0x19
000042  9202              STR      r2,[sp,#8]
000044  200a              MOVS     r0,#0xa
000046  1079              ASRS     r1,r7,#1
000048  9508              STR      r5,[sp,#0x20]
00004a  9405              STR      r4,[sp,#0x14]
00004c  e9cd1003          STRD     r1,r0,[sp,#0xc]
000050  4b20              LDR      r3,|L12.212|
000052  201b              MOVS     r0,#0x1b
000054  e9cd0300          STRD     r0,r3,[sp,#0]
000058  481e              LDR      r0,|L12.212|
00005a  e9cd4606          STRD     r4,r6,[sp,#0x18]
00005e  2300              MOVS     r3,#0
000060  4a1d              LDR      r2,|L12.216|
000062  a11e              ADR      r1,|L12.220|
000064  38c4              SUBS     r0,r0,#0xc4
000066  f7fffffe          BL       OSTaskCreate
;;;232                (CPU_CHAR	* )"control task", 		
;;;233                (OS_TASK_PTR )control_task,	
;;;234                (void		* )0,					
;;;235                (OS_PRIO	  )CONTROL_TASK_PRIO,     
;;;236                (CPU_STK   * )&CONTROL_TASK_STK[0],	
;;;237                (CPU_STK_SIZE)CONTROL_STK_SIZE/10,	
;;;238                (CPU_STK_SIZE)CONTROL_STK_SIZE,		
;;;239                (OS_MSG_QTY  )CONTROL_QUEUE_SIZE,	
;;;240                (OS_TICK	  )0,					
;;;241                (void   	* )0,					
;;;242                (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,
;;;243                (OS_ERR 	* )&err);				
;;;244        //keepalive thread
;;;245        OSTaskCreate((OS_TCB 	* )&KeepaliveTaskTCB,
00006a  e9cd4606          STRD     r4,r6,[sp,#0x18]
00006e  491f              LDR      r1,|L12.236|
000070  9508              STR      r5,[sp,#0x20]
000072  9405              STR      r4,[sp,#0x14]
000074  200f              MOVS     r0,#0xf
000076  e88d0103          STM      sp,{r0,r1,r8}
00007a  481c              LDR      r0,|L12.236|
00007c  e9cd7403          STRD     r7,r4,[sp,#0xc]
000080  2300              MOVS     r3,#0
000082  4a1b              LDR      r2,|L12.240|
000084  a11b              ADR      r1,|L12.244|
000086  38c4              SUBS     r0,r0,#0xc4
000088  f7fffffe          BL       OSTaskCreate
;;;246                (CPU_CHAR	* )"Keepalive task",
;;;247                (OS_TASK_PTR )keepalive_task,
;;;248                (void		* )0,
;;;249                (OS_PRIO	  )KEEPALIVE_TASK_PRIO,
;;;250                (CPU_STK   * )&KEEPALIVE_TASK_STK[0],
;;;251                (CPU_STK_SIZE)KEEPALIVE_STK_SIZE/10,
;;;252                (CPU_STK_SIZE)KEEPALIVE_STK_SIZE,
;;;253                (OS_MSG_QTY  )0,
;;;254                (OS_TICK	  )0,
;;;255                (void   	* )0,
;;;256                (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,
;;;257                (OS_ERR 	* )&err);
;;;258        memset(&mVehicles, 0x00, sizeof(Vehicles));
00008c  481d              LDR      r0,|L12.260|
00008e  6184              STR      r4,[r0,#0x18]  ; mVehicles
000090  61c4              STR      r4,[r0,#0x1c]  ; mVehicles
;;;259        flexcan_init(CAN_500K);
000092  6204              STR      r4,[r0,#0x20]  ; mVehicles
000094  2004              MOVS     r0,#4
000096  f7fffffe          BL       flexcan_init
;;;260        mVehicles.init = FALSE;
00009a  481a              LDR      r0,|L12.260|
00009c  3018              ADDS     r0,r0,#0x18
00009e  7004              STRB     r4,[r0,#0]
;;;261    #ifdef SERVER_IS_VEHICLE_UNION
;;;262    #ifdef VEHICLE_TYPE_EOBD
;;;263        eobd_setup(&mVehicles);
;;;264        flexcan_set_engine_id(0x7e8);
;;;265    #elif defined VEHICLE_TYPE_TOYOTA
;;;266        toyota_setup(&mVehicles);
;;;267        flexcan_set_engine_id(0x7e8);
;;;268    #elif defined VEHICLE_TYPE_GM
;;;269        gm_setup(&mVehicles);
;;;270        flexcan_set_engine_id(0x7e8);
;;;271    #elif defined VEHICLE_TYPE_VAG
;;;272        vag_setup(&mVehicles);
;;;273    #endif
;;;274    #endif
;;;275    }
0000a0  b00a              ADD      sp,sp,#0x28
0000a2  e8bd81f0          POP      {r4-r8,pc}
;;;276    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L12.168|
0000a8  56454849          DCB      "VEHICLE_MUTEX",0
0000ac  434c455f
0000b0  4d555445
0000b4  5800    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L12.184|
                          DCD      ||.bss||+0x164c
                  |L12.188|
                          DCD      ||.bss||+0xc4
                  |L12.192|
                          DCD      vehicles_task
                  |L12.196|
0000c4  76656869          DCB      "vehicles task",0
0000c8  636c6573
0000cc  20746173
0000d0  6b00    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L12.212|
                          DCD      ||.bss||+0x988
                  |L12.216|
                          DCD      control_task
                  |L12.220|
0000dc  636f6e74          DCB      "control task",0
0000e0  726f6c20
0000e4  7461736b
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L12.236|
                          DCD      ||.bss||+0xe4c
                  |L12.240|
                          DCD      keepalive_task
                  |L12.244|
0000f4  4b656570          DCB      "Keepalive task",0
0000f8  616c6976
0000fc  65207461
000100  736b00  
000103  00                DCB      0
                  |L12.260|
                          DCD      ||.bss||+0x1980

                          AREA ||i.vehicles_task||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vehicles_task PROC
;;;42     
;;;43     void vehicles_task(void *unused)
000000  b51f              PUSH     {r0-r4,lr}
;;;44     {
;;;45         uint8_t i, len, j;
;;;46         uint8_t *data;
;;;47         OS_ERR err;
;;;48         unused = unused;
;;;49     
;;;50         mVehiclesInterval = 30;
000002  4853              LDR      r0,|L13.336|
000004  211e              MOVS     r1,#0x1e
;;;51         while(1) {
;;;52     		OSTimeDlyHMSM(0, 0, mVehiclesInterval,
;;;53                     0, OS_OPT_TIME_HMSM_STRICT, &err);
;;;54             if(mVehicles.ctrlOps == NULL ||
;;;55                     mVehicles.dataOps == NULL ||
;;;56                     mVehicles.init == FALSE) {
;;;57                 loge("vehicle init failed");
000006  4f53              LDR      r7,|L13.340|
000008  4d53              LDR      r5,|L13.344|
00000a  8041              STRH     r1,[r0,#2]            ;50
00000c  f04f0900          MOV      r9,#0                 ;50
000010  f10d0a0c          ADD      r10,sp,#0xc           ;52
000014  4680              MOV      r8,r0                 ;50
000016  f2413b88          MOV      r11,#0x1388
                  |L13.26|
00001a  e9cd9a00          STRD     r9,r10,[sp,#0]        ;52
00001e  2300              MOVS     r3,#0                 ;52
000020  4646              MOV      r6,r8                 ;52
000022  f8b82002          LDRH     r2,[r8,#2]            ;52  ; mVehiclesInterval
000026  4619              MOV      r1,r3                 ;52
000028  4618              MOV      r0,r3                 ;52
00002a  f7fffffe          BL       OSTimeDlyHMSM
00002e  68a8              LDR      r0,[r5,#8]            ;54  ; mVehicles
000030  b1b0              CBZ      r0,|L13.96|
000032  6868              LDR      r0,[r5,#4]            ;55  ; mVehicles
000034  b1a0              CBZ      r0,|L13.96|
000036  7829              LDRB     r1,[r5,#0]            ;56  ; mVehicles
000038  b191              CBZ      r1,|L13.96|
;;;58                 continue;
;;;59             }
;;;60             //check engine is on
;;;61             if(mVehicles.dataOps->is_engine_on()) {
00003a  6800              LDR      r0,[r0,#0]
00003c  4780              BLX      r0
00003e  2800              CMP      r0,#0
;;;62                 //engine on
;;;63                 logi("engine on");
;;;64             } else {
;;;65                 //engine off
;;;66                 logi("engine off");
000040  4668              MOV      r0,sp
000042  d01e              BEQ      |L13.130|
000044  f7fffffe          BL       OSTimeGet
000048  7839              LDRB     r1,[r7,#0]            ;63  ; DEBUG_MODE
00004a  0789              LSLS     r1,r1,#30             ;63
00004c  d528              BPL      |L13.160|
00004e  fbb0f1fb          UDIV     r1,r0,r11             ;63
000052  fb0b0211          MLS      r2,r11,r1,r0          ;63
000056  2005              MOVS     r0,#5                 ;63
000058  fbb2f2f0          UDIV     r2,r2,r0              ;63
00005c  a03f              ADR      r0,|L13.348|
00005e  e01d              B        |L13.156|
                  |L13.96|
000060  4668              MOV      r0,sp                 ;57
000062  f7fffffe          BL       OSTimeGet
000066  7839              LDRB     r1,[r7,#0]            ;57  ; DEBUG_MODE
000068  07c9              LSLS     r1,r1,#31             ;57
00006a  d0d6              BEQ      |L13.26|
00006c  fbb0f1fb          UDIV     r1,r0,r11             ;57
000070  fb0b0211          MLS      r2,r11,r1,r0          ;57
000074  2005              MOVS     r0,#5                 ;57
000076  fbb2f2f0          UDIV     r2,r2,r0              ;57
00007a  a03f              ADR      r0,|L13.376|
00007c  f7fffffe          BL       __2printf
000080  e7cb              B        |L13.26|
                  |L13.130|
000082  f7fffffe          BL       OSTimeGet
000086  7839              LDRB     r1,[r7,#0]  ; DEBUG_MODE
000088  0789              LSLS     r1,r1,#30
00008a  d509              BPL      |L13.160|
00008c  fbb0f1fb          UDIV     r1,r0,r11
000090  fb0b0211          MLS      r2,r11,r1,r0
000094  2005              MOVS     r0,#5
000096  fbb2f2f0          UDIV     r2,r2,r0
00009a  a041              ADR      r0,|L13.416|
                  |L13.156|
00009c  f7fffffe          BL       __2printf
                  |L13.160|
;;;67             }
;;;68     
;;;69             for(i = 0; i < PID_SIZE; i++) {
0000a0  2400              MOVS     r4,#0
0000a2  46b0              MOV      r8,r6                 ;50
                  |L13.164|
;;;70                 xdelay(2);
0000a4  2002              MOVS     r0,#2
0000a6  f7fffffe          BL       xdelay
;;;71                 mIndex = i;
0000aa  f8884000          STRB     r4,[r8,#0]
;;;72                 vehicle_lock();
0000ae  f7fffffe          BL       vehicle_lock
;;;73                 if(mVehicles.dataOps->init != NULL) {
0000b2  6868              LDR      r0,[r5,#4]  ; mVehicles
0000b4  68c0              LDR      r0,[r0,#0xc]
0000b6  b120              CBZ      r0,|L13.194|
;;;74                     mVehicles.dataOps->init(getTransmitType());
0000b8  f7fffffe          BL       getTransmitType
0000bc  6869              LDR      r1,[r5,#4]  ; mVehicles
0000be  68c9              LDR      r1,[r1,#0xc]
0000c0  4788              BLX      r1
                  |L13.194|
;;;75                 }
;;;76                 if(mVehicles.dataOps->transfer_data_stream == NULL) {
0000c2  6868              LDR      r0,[r5,#4]  ; mVehicles
0000c4  6842              LDR      r2,[r0,#4]
0000c6  b1c2              CBZ      r2,|L13.250|
;;;77                     loge("transfer data stream function is null");
;;;78                     vehicle_unlock();
;;;79                     break;
;;;80                 }
;;;81                 data = mVehicles.dataOps->transfer_data_stream(i, &len);
0000c8  a902              ADD      r1,sp,#8
0000ca  4620              MOV      r0,r4
0000cc  4790              BLX      r2
0000ce  4606              MOV      r6,r0
;;;82                 if(mVehicles.dataOps->exit != NULL) {
0000d0  6868              LDR      r0,[r5,#4]  ; mVehicles
0000d2  6940              LDR      r0,[r0,#0x14]
0000d4  b120              CBZ      r0,|L13.224|
;;;83                     mVehicles.dataOps->exit(getTransmitType());
0000d6  f7fffffe          BL       getTransmitType
0000da  6869              LDR      r1,[r5,#4]  ; mVehicles
0000dc  6949              LDR      r1,[r1,#0x14]
0000de  4788              BLX      r1
                  |L13.224|
;;;84                 }
;;;85                 vehicle_unlock();
0000e0  f7fffffe          BL       vehicle_unlock
;;;86                 if(data == NULL) {
0000e4  b1e6              CBZ      r6,|L13.288|
;;;87                     if(len != UNSUPPORTED_LEN) {
;;;88                         i = (i < ENG_DATA_END) ? ENG_DATA_END : i;
;;;89                     }
;;;90                     continue;
;;;91                 }
;;;92                 //save data
;;;93                 mUpdateList[i].len = len;
0000e6  4835              LDR      r0,|L13.444|
0000e8  ebc401c4          RSB      r1,r4,r4,LSL #3
0000ec  eb000141          ADD      r1,r0,r1,LSL #1
0000f0  f89d2008          LDRB     r2,[sp,#8]
0000f4  724a              STRB     r2,[r1,#9]
;;;94                 for(j = 0; j < len; j++) {
0000f6  2000              MOVS     r0,#0
0000f8  e021              B        |L13.318|
                  |L13.250|
0000fa  4668              MOV      r0,sp                 ;77
0000fc  f7fffffe          BL       OSTimeGet
000100  7839              LDRB     r1,[r7,#0]            ;77  ; DEBUG_MODE
000102  07c9              LSLS     r1,r1,#31             ;77
000104  d009              BEQ      |L13.282|
000106  fbb0f1fb          UDIV     r1,r0,r11             ;77
00010a  fb0b0211          MLS      r2,r11,r1,r0          ;77
00010e  2005              MOVS     r0,#5                 ;77
000110  fbb2f2f0          UDIV     r2,r2,r0              ;77
000114  a02a              ADR      r0,|L13.448|
000116  f7fffffe          BL       __2printf
                  |L13.282|
00011a  f7fffffe          BL       vehicle_unlock
00011e  e77c              B        |L13.26|
                  |L13.288|
000120  f89d0008          LDRB     r0,[sp,#8]            ;87
000124  28ff              CMP      r0,#0xff              ;87
000126  d00e              BEQ      |L13.326|
000128  2c20              CMP      r4,#0x20              ;88
00012a  d20c              BCS      |L13.326|
00012c  2420              MOVS     r4,#0x20              ;88
00012e  e00a              B        |L13.326|
                  |L13.304|
;;;95                     mUpdateList[i].data[j] = data[j];
000130  5c33              LDRB     r3,[r6,r0]
000132  eb010c00          ADD      r12,r1,r0
000136  1c40              ADDS     r0,r0,#1              ;94
000138  f88c3001          STRB     r3,[r12,#1]
00013c  b2c0              UXTB     r0,r0                 ;94
                  |L13.318|
00013e  4290              CMP      r0,r2                 ;94
000140  d3f6              BCC      |L13.304|
;;;96                 }
;;;97                 mUpdateList[i].updated = TRUE;
000142  2001              MOVS     r0,#1
000144  7288              STRB     r0,[r1,#0xa]
                  |L13.326|
000146  1c64              ADDS     r4,r4,#1              ;69
000148  b2e4              UXTB     r4,r4                 ;69
00014a  2c39              CMP      r4,#0x39              ;69
00014c  d3aa              BCC      |L13.164|
00014e  e764              B        |L13.26|
;;;98             }
;;;99         }
;;;100    }
;;;101    
                          ENDP

                  |L13.336|
                          DCD      ||.data||
                  |L13.340|
                          DCD      DEBUG_MODE
                  |L13.344|
                          DCD      ||.bss||+0x1998
                  |L13.348|
00015c  5b253035          DCB      "[%05d.%03d/I]: engine on\r\n",0
000160  642e2530
000164  33642f49
000168  5d3a2065
00016c  6e67696e
000170  65206f6e
000174  0d0a00  
000177  00                DCB      0
                  |L13.376|
000178  5b253035          DCB      "[%05d.%03d/E]: vehicle init failed\r\n",0
00017c  642e2530
000180  33642f45
000184  5d3a2076
000188  65686963
00018c  6c652069
000190  6e697420
000194  6661696c
000198  65640d0a
00019c  00      
00019d  00                DCB      0
00019e  00                DCB      0
00019f  00                DCB      0
                  |L13.416|
0001a0  5b253035          DCB      "[%05d.%03d/I]: engine off\r\n",0
0001a4  642e2530
0001a8  33642f49
0001ac  5d3a2065
0001b0  6e67696e
0001b4  65206f66
0001b8  660d0a00
                  |L13.444|
                          DCD      ||.bss||+0x1678
                  |L13.448|
0001c0  5b253035          DCB      "[%05d.%03d/E]: transfer data stream function is null\r\n"
0001c4  642e2530
0001c8  33642f45
0001cc  5d3a2074
0001d0  72616e73
0001d4  66657220
0001d8  64617461
0001dc  20737472
0001e0  65616d20
0001e4  66756e63
0001e8  74696f6e
0001ec  20697320
0001f0  6e756c6c
0001f4  0d0a    
0001f6  00                DCB      0
0001f7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  VehiclesTaskTCB
                          %        196
                  VEHICLES_TASK_STK
                          %        2048
                  ControlTaskTCB
                          %        196
                  CONTROL_TASK_STK
                          %        1024
                  KeepaliveTaskTCB
                          %        196
                  KEEPALIVE_TASK_STK
                          %        2048
                  mVehicleMutex
                          %        44
                  mUpdateList
                          %        800
                  mVehicles
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  636f6e74          DCB      0x63,0x6f,0x6e,0x74
000004  726f6c5f          DCB      0x72,0x6f,0x6c,0x5f
000008  7461736b          DCB      0x74,0x61,0x73,0x6b
00000c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  mIndex
000000  00                DCB      0x00
                  mEngineOn
000001  00                DCB      0x00
                  mVehiclesInterval
000002  0000              DCB      0x00,0x00
