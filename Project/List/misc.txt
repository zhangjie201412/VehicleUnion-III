; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\misc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\misc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\misc.crf ..\STM32F10x_FWLib\src\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;113    {
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000002  210f              MOVS     r1,#0xf
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000004  78c4              LDRB     r4,[r0,#3]
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;125        tmppre = (0x4 - tmppriority);
;;;126        tmpsub = tmpsub >> tmppriority;
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;130        tmppriority = tmppriority << 0x04;
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000006  7802              LDRB     r2,[r0,#0]
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000008  2301              MOVS     r3,#1
00000a  f04f26e0          MOV      r6,#0xe000e000
00000e  b1dc              CBZ      r4,|L1.72|
000010  4c12              LDR      r4,|L1.92|
000012  6824              LDR      r4,[r4,#0]            ;124
000014  7845              LDRB     r5,[r0,#1]            ;128
000016  f40464e0          AND      r4,r4,#0x700          ;124
00001a  f5c464e0          RSB      r4,r4,#0x700          ;124
00001e  0a24              LSRS     r4,r4,#8              ;124
000020  f1c40704          RSB      r7,r4,#4              ;125
000024  40e1              LSRS     r1,r1,r4              ;126
000026  7884              LDRB     r4,[r0,#2]            ;129
000028  40bd              LSLS     r5,r5,r7              ;128
00002a  400c              ANDS     r4,r4,r1              ;129
00002c  432c              ORRS     r4,r4,r5              ;129
00002e  0121              LSLS     r1,r4,#4              ;129
000030  4c0b              LDR      r4,|L1.96|
000032  5511              STRB     r1,[r2,r4]            ;132
000034  7800              LDRB     r0,[r0,#0]
000036  f000011f          AND      r1,r0,#0x1f
00003a  408b              LSLS     r3,r3,r1
00003c  0940              LSRS     r0,r0,#5
00003e  eb060080          ADD      r0,r6,r0,LSL #2
000042  f8c03100          STR      r3,[r0,#0x100]
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
000046  bdf0              POP      {r4-r7,pc}
                  |L1.72|
000048  f002001f          AND      r0,r2,#0x1f           ;141
00004c  4083              LSLS     r3,r3,r0              ;141
00004e  0950              LSRS     r0,r2,#5              ;141
000050  eb060080          ADD      r0,r6,r0,LSL #2       ;141
000054  f8c03180          STR      r3,[r0,#0x180]        ;141
000058  bdf0              POP      {r4-r7,pc}
;;;145    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      0xe000ed0c
                  |L1.96|
                          DCD      0xe000e400

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4902              LDR      r1,|L2.12|
;;;97     {
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4308              ORRS     r0,r0,r1
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;103    }
000008  4770              BX       lr
;;;104    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x05fa0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;155      */
;;;156    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  4a02              LDR      r2,|L3.12|
;;;157    { 
;;;158      /* Check the parameters */
;;;159      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;160      assert_param(IS_NVIC_OFFSET(Offset));  
;;;161       
;;;162      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000002  4011              ANDS     r1,r1,r2
000004  4301              ORRS     r1,r1,r0
000006  4802              LDR      r0,|L3.16|
000008  6001              STR      r1,[r0,#0]
;;;163    }
00000a  4770              BX       lr
;;;164    
                          ENDP

                  |L3.12|
                          DCD      0x1fffff80
                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;174      */
;;;175    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;176    {
;;;177      /* Check the parameters */
;;;178      assert_param(IS_NVIC_LP(LowPowerMode));
;;;179      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;180      
;;;181      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;182      {
;;;183        SCB->SCR |= LowPowerMode;
;;;184      }
;;;185      else
;;;186      {
;;;187        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L4.12|
000008  4301              ORRS     r1,r1,r0              ;183
00000a  e000              B        |L4.14|
                  |L4.12|
00000c  4381              BICS     r1,r1,r0
                  |L4.14|
00000e  6011              STR      r1,[r2,#0]            ;183
;;;188      }
;;;189    }
000010  4770              BX       lr
;;;190    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;198      */
;;;199    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;203      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;204      {
;;;205        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;206      }
;;;207      else
;;;208      {
;;;209        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  d003              BEQ      |L5.18|
00000a  f0200004          BIC      r0,r0,#4
                  |L5.14|
00000e  6108              STR      r0,[r1,#0x10]         ;205
;;;210      }
;;;211    }
000010  4770              BX       lr
                  |L5.18|
000012  f0400004          ORR      r0,r0,#4              ;205
000016  e7fa              B        |L5.14|
;;;212    
                          ENDP

