; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\os_int.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\os_int.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\os_int.crf ..\UCOSIII\uCOS-III\Source\os_int.c]
                          THUMB

                          AREA ||i.OS_IntQPost||, CODE, READONLY, ALIGN=2

                  OS_IntQPost PROC
;;;90     
;;;91     void  OS_IntQPost (OS_OBJ_TYPE   type,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;92                        void         *p_obj,
;;;93                        void         *p_void,
;;;94                        OS_MSG_SIZE   msg_size,
;;;95                        OS_FLAGS      flags,
;;;96                        OS_OPT        opt,
;;;97                        CPU_TS        ts,
;;;98                        OS_ERR       *p_err)
;;;99     {
000004  461e              MOV      r6,r3
000006  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
00000a  4690              MOV      r8,r2
00000c  460f              MOV      r7,r1
00000e  4681              MOV      r9,r0
;;;100        CPU_SR_ALLOC();
;;;101    
;;;102    
;;;103    
;;;104    #ifdef OS_SAFETY_CRITICAL
;;;105        if (p_err == (OS_ERR *)0) {
;;;106            OS_SAFETY_CRITICAL_EXCEPTION();
;;;107            return;
;;;108        }
;;;109    #endif
;;;110    
;;;111        CPU_CRITICAL_ENTER();
000010  9c0d              LDR      r4,[sp,#0x34]
000012  f7fffffe          BL       CPU_SR_Save
000016  4605              MOV      r5,r0
;;;112        if (OSIntQNbrEntries < OSCfg_IntQSize) {                /* Make sure we haven't already filled the ISR queue      */
000018  481c              LDR      r0,|L1.140|
00001a  4a1d              LDR      r2,|L1.144|
00001c  8801              LDRH     r1,[r0,#0]  ; OSIntQNbrEntries
00001e  8812              LDRH     r2,[r2,#0]  ; OSCfg_IntQSize
000020  4291              CMP      r1,r2
000022  d22b              BCS      |L1.124|
;;;113            OSIntQNbrEntries++;
000024  1c49              ADDS     r1,r1,#1
000026  b289              UXTH     r1,r1
000028  8001              STRH     r1,[r0,#0]
;;;114    
;;;115            if (OSIntQNbrEntriesMax < OSIntQNbrEntries) {
00002a  481a              LDR      r0,|L1.148|
00002c  8802              LDRH     r2,[r0,#0]  ; OSIntQNbrEntriesMax
00002e  428a              CMP      r2,r1
000030  d200              BCS      |L1.52|
;;;116                OSIntQNbrEntriesMax = OSIntQNbrEntries;
000032  8001              STRH     r1,[r0,#0]
                  |L1.52|
;;;117            }
;;;118    
;;;119            OSIntQInPtr->Type       = type;                     /* Save object type being posted                          */
000034  4918              LDR      r1,|L1.152|
000036  6808              LDR      r0,[r1,#0]  ; OSIntQInPtr
000038  f8c09000          STR      r9,[r0,#0]
00003c  e9c07802          STRD     r7,r8,[r0,#8]
;;;120            OSIntQInPtr->ObjPtr     = p_obj;                    /* Save pointer to object being posted                    */
;;;121            OSIntQInPtr->MsgPtr     = p_void;                   /* Save pointer to message if posting to a message queue  */
;;;122            OSIntQInPtr->MsgSize    = msg_size;                 /* Save the message size   if posting to a message queue  */
000040  8206              STRH     r6,[r0,#0x10]
;;;123            OSIntQInPtr->Flags      = flags;                    /* Save the flags if posting to an event flag group       */
;;;124            OSIntQInPtr->Opt        = opt;                      /* Save post options                                      */
000042  f8c0a014          STR      r10,[r0,#0x14]
000046  f8a0b018          STRH     r11,[r0,#0x18]
;;;125            OSIntQInPtr->TS         = ts;                       /* Save time stamp                                        */
00004a  9a0c              LDR      r2,[sp,#0x30]
;;;126    
;;;127            OSIntQInPtr             =  OSIntQInPtr->NextPtr;    /* Point to the next interrupt handler queue entry        */
00004c  61c2              STR      r2,[r0,#0x1c]
00004e  6840              LDR      r0,[r0,#4]
;;;128    
;;;129            OSRdyList[0].NbrEntries = (OS_OBJ_QTY)1;            /* Make the interrupt handler task ready to run           */
000050  6008              STR      r0,[r1,#0]  ; OSIntQInPtr
000052  4812              LDR      r0,|L1.156|
000054  2101              MOVS     r1,#1
000056  8101              STRH     r1,[r0,#8]
;;;130            OSRdyList[0].HeadPtr    = &OSIntQTaskTCB;
000058  4911              LDR      r1,|L1.160|
;;;131            OSRdyList[0].TailPtr    = &OSIntQTaskTCB;
00005a  6001              STR      r1,[r0,#0]  ; OSRdyList
;;;132            OS_PrioInsert(0u);                                  /* Add task priority 0 in the priority table              */
00005c  6041              STR      r1,[r0,#4]  ; OSRdyList
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       OS_PrioInsert
;;;133            if (OSPrioCur != 0) {                               /* Chk if OSIntQTask is not running                       */
000064  480f              LDR      r0,|L1.164|
000066  7800              LDRB     r0,[r0,#0]  ; OSPrioCur
000068  b108              CBZ      r0,|L1.110|
;;;134                OSPrioSaved         = OSPrioCur;                /* Save current priority                                  */
00006a  490f              LDR      r1,|L1.168|
00006c  7008              STRB     r0,[r1,#0]
                  |L1.110|
;;;135            }
;;;136    
;;;137           *p_err                   = OS_ERR_NONE;
00006e  2000              MOVS     r0,#0
                  |L1.112|
;;;138        } else {
;;;139            OSIntQOvfCtr++;                                     /* Count the number of ISR queue overflows                */
;;;140           *p_err                   = OS_ERR_INT_Q_FULL;
000070  8020              STRH     r0,[r4,#0]
;;;141        }
;;;142        CPU_CRITICAL_EXIT();
000072  4628              MOV      r0,r5
000074  e8bd5ff0          POP      {r4-r12,lr}
000078  f7ffbffe          B.W      CPU_SR_Restore
                  |L1.124|
00007c  490b              LDR      r1,|L1.172|
00007e  8808              LDRH     r0,[r1,#0]            ;139  ; OSIntQOvfCtr
000080  1c40              ADDS     r0,r0,#1              ;139
000082  8008              STRH     r0,[r1,#0]            ;139
000084  f2446053          MOV      r0,#0x4653            ;140
000088  e7f2              B        |L1.112|
;;;143    }
;;;144    
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      OSIntQNbrEntries
                  |L1.144|
                          DCD      OSCfg_IntQSize
                  |L1.148|
                          DCD      OSIntQNbrEntriesMax
                  |L1.152|
                          DCD      OSIntQInPtr
                  |L1.156|
                          DCD      OSRdyList
                  |L1.160|
                          DCD      OSIntQTaskTCB
                  |L1.164|
                          DCD      OSPrioCur
                  |L1.168|
                          DCD      OSPrioSaved
                  |L1.172|
                          DCD      OSIntQOvfCtr

                          AREA ||i.OS_IntQRePost||, CODE, READONLY, ALIGN=2

                  OS_IntQRePost PROC
;;;158    
;;;159    void  OS_IntQRePost (void)
000000  b53e              PUSH     {r1-r5,lr}
;;;160    {
;;;161        CPU_TS  ts;
;;;162        OS_ERR  err;
;;;163    
;;;164    
;;;165        switch (OSIntQOutPtr->Type) {                           /* Re-post to task                                        */
000002  4c37              LDR      r4,|L2.224|
000004  4b37              LDR      r3,|L2.228|
;;;166            case OS_OBJ_TYPE_FLAG:
;;;167    #if OS_CFG_FLAG_EN > 0u
;;;168                 (void)OS_FlagPost((OS_FLAG_GRP *) OSIntQOutPtr->ObjPtr,
000006  a902              ADD      r1,sp,#8
000008  6820              LDR      r0,[r4,#0]            ;165  ; OSIntQOutPtr
00000a  6802              LDR      r2,[r0,#0]            ;165
00000c  1ad5              SUBS     r5,r2,r3              ;165
00000e  429a              CMP      r2,r3                 ;165
000010  d045              BEQ      |L2.158|
000012  dc15              BGT      |L2.64|
000014  4b34              LDR      r3,|L2.232|
000016  18d2              ADDS     r2,r2,r3              ;165
000018  d02d              BEQ      |L2.118|
00001a  4b34              LDR      r3,|L2.236|
00001c  18d2              ADDS     r2,r2,r3              ;165
00001e  d022              BEQ      |L2.102|
000020  4b33              LDR      r3,|L2.240|
000022  18d2              ADDS     r2,r2,r3              ;165
000024  d032              BEQ      |L2.140|
000026  4b33              LDR      r3,|L2.244|
000028  18d2              ADDS     r2,r2,r3              ;165
00002a  d108              BNE      |L2.62|
;;;169                                   (OS_FLAGS     ) OSIntQOutPtr->Flags,
;;;170                                   (OS_OPT       ) OSIntQOutPtr->Opt,
;;;171                                   (CPU_TS       ) OSIntQOutPtr->TS,
;;;172                                   (OS_ERR      *)&err);
;;;173    #endif
;;;174                 break;
;;;175    
;;;176            case OS_OBJ_TYPE_Q:
;;;177    #if OS_CFG_Q_EN > 0u
;;;178                 OS_QPost((OS_Q      *) OSIntQOutPtr->ObjPtr,
;;;179                          (void      *) OSIntQOutPtr->MsgPtr,
;;;180                          (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
;;;181                          (OS_OPT     ) OSIntQOutPtr->Opt,
;;;182                          (CPU_TS     ) OSIntQOutPtr->TS,
;;;183                          (OS_ERR    *)&err);
;;;184    #endif
;;;185                 break;
;;;186    
;;;187            case OS_OBJ_TYPE_SEM:
;;;188    #if OS_CFG_SEM_EN > 0u
;;;189                 (void)OS_SemPost((OS_SEM *) OSIntQOutPtr->ObjPtr,
;;;190                                  (OS_OPT  ) OSIntQOutPtr->Opt,
;;;191                                  (CPU_TS  ) OSIntQOutPtr->TS,
;;;192                                  (OS_ERR *)&err);
;;;193    #endif
;;;194                 break;
;;;195    
;;;196            case OS_OBJ_TYPE_TASK_MSG:
;;;197    #if OS_CFG_TASK_Q_EN > 0u
;;;198                 OS_TaskQPost((OS_TCB    *) OSIntQOutPtr->ObjPtr,
00002c  69c2              LDR      r2,[r0,#0x1c]
00002e  e9cd2100          STRD     r2,r1,[sp,#0]
000032  8b03              LDRH     r3,[r0,#0x18]
000034  8a02              LDRH     r2,[r0,#0x10]
000036  3008              ADDS     r0,r0,#8
000038  c803              LDM      r0,{r0,r1}
00003a  f7fffffe          BL       OS_TaskQPost
                  |L2.62|
;;;199                              (void      *) OSIntQOutPtr->MsgPtr,
;;;200                              (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
;;;201                              (OS_OPT     ) OSIntQOutPtr->Opt,
;;;202                              (CPU_TS     ) OSIntQOutPtr->TS,
;;;203                              (OS_ERR    *)&err);
;;;204    #endif
;;;205                 break;
;;;206    
;;;207            case OS_OBJ_TYPE_TASK_RESUME:
;;;208    #if OS_CFG_TASK_SUSPEND_EN > 0u
;;;209                 (void)OS_TaskResume((OS_TCB *) OSIntQOutPtr->ObjPtr,
;;;210                                     (OS_ERR *)&err);
;;;211    #endif
;;;212                 break;
;;;213    
;;;214            case OS_OBJ_TYPE_TASK_SIGNAL:
;;;215                 (void)OS_TaskSemPost((OS_TCB *) OSIntQOutPtr->ObjPtr,
;;;216                                      (OS_OPT  ) OSIntQOutPtr->Opt,
;;;217                                      (CPU_TS  ) OSIntQOutPtr->TS,
;;;218                                      (OS_ERR *)&err);
;;;219                 break;
;;;220    
;;;221            case OS_OBJ_TYPE_TASK_SUSPEND:
;;;222    #if OS_CFG_TASK_SUSPEND_EN > 0u
;;;223                 (void)OS_TaskSuspend((OS_TCB *) OSIntQOutPtr->ObjPtr,
;;;224                                      (OS_ERR *)&err);
;;;225    #endif
;;;226                 break;
;;;227    
;;;228            case OS_OBJ_TYPE_TICK:
;;;229    #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
;;;230                 OS_SchedRoundRobin(&OSRdyList[OSPrioSaved]);
;;;231    #endif
;;;232    
;;;233                 (void)OS_TaskSemPost((OS_TCB *)&OSTickTaskTCB,                /* Signal tick task                        */
;;;234                                      (OS_OPT  ) OS_OPT_POST_NONE,
;;;235                                      (CPU_TS  ) OSIntQOutPtr->TS,
;;;236                                      (OS_ERR *)&err);
;;;237    #if OS_CFG_TMR_EN > 0u
;;;238                 OSTmrUpdateCtr--;
;;;239                 if (OSTmrUpdateCtr == (OS_CTR)0u) {
;;;240                     OSTmrUpdateCtr = OSTmrUpdateCnt;
;;;241                     ts             = OS_TS_GET();                             /* Get timestamp                           */
;;;242                     (void)OS_TaskSemPost((OS_TCB *)&OSTmrTaskTCB,             /* Signal timer task                       */
;;;243                                          (OS_OPT  ) OS_OPT_POST_NONE,
;;;244                                          (CPU_TS  ) ts,
;;;245                                          (OS_ERR *)&err);
;;;246                 }
;;;247    #endif
;;;248                 break;
;;;249    
;;;250            default:
;;;251                 break;
;;;252        }
;;;253    }
00003e  bd3e              POP      {r1-r5,pc}
                  |L2.64|
000040  4a2d              LDR      r2,|L2.248|
000042  18aa              ADDS     r2,r5,r2              ;165
000044  d01e              BEQ      |L2.132|
000046  4b2d              LDR      r3,|L2.252|
000048  18d2              ADDS     r2,r2,r3              ;165
00004a  d024              BEQ      |L2.150|
00004c  4b2c              LDR      r3,|L2.256|
00004e  18d2              ADDS     r2,r2,r3              ;165
000050  d1f5              BNE      |L2.62|
000052  69c2              LDR      r2,[r0,#0x1c]         ;178
000054  e9cd2100          STRD     r2,r1,[sp,#0]         ;178
000058  8b03              LDRH     r3,[r0,#0x18]         ;178
00005a  8a02              LDRH     r2,[r0,#0x10]         ;178
00005c  3008              ADDS     r0,r0,#8              ;178
00005e  c803              LDM      r0,{r0,r1}            ;178
000060  f7fffffe          BL       OS_QPost
000064  bd3e              POP      {r1-r5,pc}
                  |L2.102|
000066  9100              STR      r1,[sp,#0]            ;168
000068  8b02              LDRH     r2,[r0,#0x18]         ;168
00006a  69c3              LDR      r3,[r0,#0x1c]         ;168
00006c  6941              LDR      r1,[r0,#0x14]         ;168
00006e  6880              LDR      r0,[r0,#8]            ;168
000070  f7fffffe          BL       OS_FlagPost
000074  bd3e              POP      {r1-r5,pc}
                  |L2.118|
000076  8b01              LDRH     r1,[r0,#0x18]         ;189
000078  69c2              LDR      r2,[r0,#0x1c]         ;189
00007a  6880              LDR      r0,[r0,#8]            ;189
00007c  ab02              ADD      r3,sp,#8              ;189
00007e  f7fffffe          BL       OS_SemPost
000082  bd3e              POP      {r1-r5,pc}
                  |L2.132|
000084  6880              LDR      r0,[r0,#8]            ;209
000086  f7fffffe          BL       OS_TaskResume
00008a  bd3e              POP      {r1-r5,pc}
                  |L2.140|
00008c  8b01              LDRH     r1,[r0,#0x18]         ;215
00008e  69c2              LDR      r2,[r0,#0x1c]         ;215
000090  6880              LDR      r0,[r0,#8]            ;215
000092  ab02              ADD      r3,sp,#8              ;215
000094  e021              B        |L2.218|
                  |L2.150|
000096  6880              LDR      r0,[r0,#8]            ;223
000098  f7fffffe          BL       OS_TaskSuspend
                  |L2.156|
00009c  bd3e              POP      {r1-r5,pc}
                  |L2.158|
00009e  4819              LDR      r0,|L2.260|
0000a0  4919              LDR      r1,|L2.264|
0000a2  7800              LDRB     r0,[r0,#0]            ;230  ; OSPrioSaved
0000a4  eb000040          ADD      r0,r0,r0,LSL #1       ;230
0000a8  eb010080          ADD      r0,r1,r0,LSL #2       ;230
0000ac  f7fffffe          BL       OS_SchedRoundRobin
0000b0  6820              LDR      r0,[r4,#0]            ;233  ; OSIntQOutPtr
0000b2  ab02              ADD      r3,sp,#8              ;233
0000b4  2100              MOVS     r1,#0                 ;233
0000b6  69c2              LDR      r2,[r0,#0x1c]         ;233
0000b8  4814              LDR      r0,|L2.268|
0000ba  f7fffffe          BL       OS_TaskSemPost
0000be  4814              LDR      r0,|L2.272|
0000c0  6801              LDR      r1,[r0,#0]            ;238  ; OSTmrUpdateCtr
0000c2  1e49              SUBS     r1,r1,#1              ;238
0000c4  6001              STR      r1,[r0,#0]            ;239  ; OSTmrUpdateCtr
0000c6  d1e9              BNE      |L2.156|
0000c8  4912              LDR      r1,|L2.276|
0000ca  6809              LDR      r1,[r1,#0]            ;240  ; OSTmrUpdateCnt
0000cc  6001              STR      r1,[r0,#0]            ;241  ; OSTmrUpdateCtr
0000ce  f7fffffe          BL       CPU_TS_TmrRd
0000d2  4602              MOV      r2,r0                 ;241
0000d4  ab02              ADD      r3,sp,#8              ;242
0000d6  2100              MOVS     r1,#0                 ;242
0000d8  480f              LDR      r0,|L2.280|
                  |L2.218|
0000da  f7fffffe          BL       OS_TaskSemPost
0000de  bd3e              POP      {r1-r5,pc}
;;;254    
                          ENDP

                  |L2.224|
                          DCD      OSIntQOutPtr
                  |L2.228|
                          DCD      0x4b434954
                  |L2.232|
                          DCD      0xbeb2baad
                  |L2.236|
                          DCD      0xfa0bf90d
                  |L2.240|
                          DCD      0xfff7f8f2
                  |L2.244|
                          DCD      0xfff60600
                  |L2.248|
                          DCD      0xf7fdf700
                  |L2.252|
                          DCD      0xffefff00
                  |L2.256|
                          DCD      0xfe0ffe03
                  |L2.260|
                          DCD      OSPrioSaved
                  |L2.264|
                          DCD      OSRdyList
                  |L2.268|
                          DCD      OSTickTaskTCB
                  |L2.272|
                          DCD      OSTmrUpdateCtr
                  |L2.276|
                          DCD      OSTmrUpdateCnt
                  |L2.280|
                          DCD      OSTmrTaskTCB

                          AREA ||i.OS_IntQTask||, CODE, READONLY, ALIGN=2

                  OS_IntQTask PROC
;;;268    
;;;269    void  OS_IntQTask (void  *p_arg)
000000  4d1a              LDR      r5,|L3.108|
;;;270    {
;;;271        CPU_BOOLEAN  done;
;;;272        CPU_TS       ts_start;
;;;273        CPU_TS       ts_end;
;;;274        CPU_SR_ALLOC();
;;;275    
;;;276    
;;;277    
;;;278        p_arg = p_arg;                                          /* Not using 'p_arg', prevent compiler warning            */
;;;279        while (DEF_ON) {
;;;280            done = DEF_FALSE;
;;;281            while (done == DEF_FALSE) {
;;;282                CPU_CRITICAL_ENTER();
;;;283                if (OSIntQNbrEntries == (OS_OBJ_QTY)0u) {
000002  4c1b              LDR      r4,|L3.112|
                  |L3.4|
;;;284                    OSRdyList[0].NbrEntries = (OS_OBJ_QTY)0u;   /* Remove from ready list                                 */
;;;285                    OSRdyList[0].HeadPtr    = (OS_TCB   *)0;
;;;286                    OSRdyList[0].TailPtr    = (OS_TCB   *)0;
;;;287                    OS_PrioRemove(0u);                          /* Remove from the priority table                         */
;;;288                    CPU_CRITICAL_EXIT();
;;;289                    OSSched();
;;;290                    done = DEF_TRUE;                            /* No more entries in the queue, we are done              */
;;;291                } else {
;;;292                    CPU_CRITICAL_EXIT();
;;;293                    ts_start = OS_TS_GET();
;;;294                    OS_IntQRePost();
;;;295                    ts_end   = OS_TS_GET() - ts_start;          /* Measure execution time of tick task                    */
;;;296                    if (OSIntQTaskTimeMax < ts_end) {
;;;297                        OSIntQTaskTimeMax = ts_end;
;;;298                    }
;;;299                    CPU_CRITICAL_ENTER();
;;;300                    OSIntQOutPtr = OSIntQOutPtr->NextPtr;       /* Point to next item in the ISR queue                    */
000004  f8df806c          LDR      r8,|L3.116|
000008  2700              MOVS     r7,#0                 ;280
00000a  bf00              NOP                            ;282
                  |L3.12|
00000c  f7fffffe          BL       CPU_SR_Save
000010  4606              MOV      r6,r0                 ;282
000012  8820              LDRH     r0,[r4,#0]            ;283  ; OSIntQNbrEntries
000014  b1e8              CBZ      r0,|L3.82|
000016  4630              MOV      r0,r6                 ;292
000018  f7fffffe          BL       CPU_SR_Restore
00001c  f7fffffe          BL       CPU_TS_TmrRd
000020  4606              MOV      r6,r0                 ;293
000022  f7fffffe          BL       OS_IntQRePost
000026  f7fffffe          BL       CPU_TS_TmrRd
00002a  6829              LDR      r1,[r5,#0]            ;296  ; OSIntQTaskTimeMax
00002c  1b80              SUBS     r0,r0,r6              ;295
00002e  4281              CMP      r1,r0                 ;296
000030  d200              BCS      |L3.52|
000032  6028              STR      r0,[r5,#0]            ;297  ; OSIntQTaskTimeMax
                  |L3.52|
000034  f7fffffe          BL       CPU_SR_Save
000038  f8d82000          LDR      r2,[r8,#0]  ; OSIntQOutPtr
00003c  6852              LDR      r2,[r2,#4]
;;;301                    OSIntQNbrEntries--;
00003e  f8c82000          STR      r2,[r8,#0]  ; OSIntQOutPtr
000042  8821              LDRH     r1,[r4,#0]  ; OSIntQNbrEntries
000044  1e49              SUBS     r1,r1,#1
000046  8021              STRH     r1,[r4,#0]
;;;302                    CPU_CRITICAL_EXIT();
000048  f7fffffe          BL       CPU_SR_Restore
00004c  2f00              CMP      r7,#0
00004e  d0dd              BEQ      |L3.12|
000050  e7d8              B        |L3.4|
                  |L3.82|
000052  4909              LDR      r1,|L3.120|
000054  2000              MOVS     r0,#0                 ;284
000056  8108              STRH     r0,[r1,#8]            ;284
000058  6008              STR      r0,[r1,#0]            ;286  ; OSRdyList
00005a  6048              STR      r0,[r1,#4]            ;287  ; OSRdyList
00005c  f7fffffe          BL       OS_PrioRemove
000060  4630              MOV      r0,r6                 ;288
000062  f7fffffe          BL       CPU_SR_Restore
000066  f7fffffe          BL       OSSched
00006a  e7cb              B        |L3.4|
;;;303                }
;;;304            }
;;;305        }
;;;306    }
;;;307    
                          ENDP

                  |L3.108|
                          DCD      OSIntQTaskTimeMax
                  |L3.112|
                          DCD      OSIntQNbrEntries
                  |L3.116|
                          DCD      OSIntQOutPtr
                  |L3.120|
                          DCD      OSRdyList

                          AREA ||i.OS_IntQTaskInit||, CODE, READONLY, ALIGN=2

                  OS_IntQTaskInit PROC
;;;330    
;;;331    void  OS_IntQTaskInit (OS_ERR  *p_err)
000000  b5f0              PUSH     {r4-r7,lr}
;;;332    {
;;;333        OS_INT_Q      *p_int_q;
;;;334        OS_INT_Q      *p_int_q_next;
;;;335        OS_OBJ_QTY     i;
;;;336    
;;;337    
;;;338    
;;;339    #ifdef OS_SAFETY_CRITICAL
;;;340        if (p_err == (OS_ERR *)0) {
;;;341            OS_SAFETY_CRITICAL_EXCEPTION();
;;;342            return;
;;;343        }
;;;344    #endif
;;;345    
;;;346        OSIntQOvfCtr = (OS_QTY)0u;                              /* Clear the ISR queue overflow counter                   */
000002  492c              LDR      r1,|L4.180|
;;;347    
;;;348        if (OSCfg_IntQBasePtr == (OS_INT_Q *)0) {
000004  4d2c              LDR      r5,|L4.184|
000006  b089              SUB      sp,sp,#0x24           ;332
000008  2200              MOVS     r2,#0                 ;346
00000a  800a              STRH     r2,[r1,#0]            ;346
00000c  6829              LDR      r1,[r5,#0]            ;332  ; OSCfg_IntQBasePtr
00000e  b131              CBZ      r1,|L4.30|
;;;349           *p_err = OS_ERR_INT_Q;
;;;350            return;
;;;351        }
;;;352    
;;;353        if (OSCfg_IntQSize < (OS_OBJ_QTY)2u) {
000010  4e2a              LDR      r6,|L4.188|
000012  8831              LDRH     r1,[r6,#0]  ; OSCfg_IntQSize
000014  2902              CMP      r1,#2
000016  d205              BCS      |L4.36|
;;;354           *p_err = OS_ERR_INT_Q_SIZE;
000018  f2446154          MOV      r1,#0x4654
;;;355            return;
00001c  e02f              B        |L4.126|
                  |L4.30|
00001e  f2446152          MOV      r1,#0x4652            ;349
000022  e02c              B        |L4.126|
                  |L4.36|
;;;356        }
;;;357    
;;;358        OSIntQTaskTimeMax = (CPU_TS)0;
000024  4926              LDR      r1,|L4.192|
;;;359    
;;;360        p_int_q           = OSCfg_IntQBasePtr;                  /* Initialize the circular ISR queue                      */
;;;361        p_int_q_next      = p_int_q;
;;;362        p_int_q_next++;
;;;363        for (i = 0u; i < OSCfg_IntQSize; i++) {
000026  2300              MOVS     r3,#0
;;;364            p_int_q->Type    =  OS_OBJ_TYPE_NONE;
000028  4f26              LDR      r7,|L4.196|
00002a  600a              STR      r2,[r1,#0]            ;360  ; OSIntQTaskTimeMax
00002c  6829              LDR      r1,[r5,#0]            ;362  ; OSCfg_IntQBasePtr
00002e  f1010420          ADD      r4,r1,#0x20           ;362
000032  e00a              B        |L4.74|
                  |L4.52|
;;;365            p_int_q->ObjPtr  = (void      *)0;
;;;366            p_int_q->MsgPtr  = (void      *)0;
000034  608a              STR      r2,[r1,#8]
;;;367            p_int_q->MsgSize = (OS_MSG_SIZE)0u;
000036  600f              STR      r7,[r1,#0]
000038  60ca              STR      r2,[r1,#0xc]
00003a  820a              STRH     r2,[r1,#0x10]
;;;368            p_int_q->Flags   = (OS_FLAGS   )0u;
;;;369            p_int_q->Opt     = (OS_OPT     )0u;
00003c  614a              STR      r2,[r1,#0x14]
00003e  830a              STRH     r2,[r1,#0x18]
;;;370            p_int_q->NextPtr = p_int_q_next;
;;;371            p_int_q++;
000040  604c              STR      r4,[r1,#4]
000042  3120              ADDS     r1,r1,#0x20
;;;372            p_int_q_next++;
000044  3420              ADDS     r4,r4,#0x20
000046  1c5b              ADDS     r3,r3,#1              ;363
000048  b29b              UXTH     r3,r3                 ;363
                  |L4.74|
00004a  f8b6c000          LDRH     r12,[r6,#0]           ;363  ; OSCfg_IntQSize
00004e  4563              CMP      r3,r12                ;363
000050  d3f0              BCC      |L4.52|
;;;373        }
;;;374        p_int_q--;
;;;375        p_int_q_next        = OSCfg_IntQBasePtr;
;;;376        p_int_q->NextPtr    = p_int_q_next;
000052  682b              LDR      r3,[r5,#0]  ; OSCfg_IntQBasePtr
000054  f8413c1c          STR      r3,[r1,#-0x1c]
;;;377        OSIntQInPtr         = p_int_q_next;
000058  491b              LDR      r1,|L4.200|
;;;378        OSIntQOutPtr        = p_int_q_next;
00005a  600b              STR      r3,[r1,#0]  ; OSIntQInPtr
00005c  491b              LDR      r1,|L4.204|
;;;379        OSIntQNbrEntries    = (OS_OBJ_QTY)0u;
00005e  600b              STR      r3,[r1,#0]  ; OSIntQOutPtr
000060  491b              LDR      r1,|L4.208|
000062  800a              STRH     r2,[r1,#0]
;;;380        OSIntQNbrEntriesMax = (OS_OBJ_QTY)0u;
000064  491b              LDR      r1,|L4.212|
000066  800a              STRH     r2,[r1,#0]
;;;381    
;;;382                                                                /* -------------- CREATE THE ISR QUEUE TASK ------------- */
;;;383        if (OSCfg_IntQTaskStkBasePtr == (CPU_STK *)0) {
000068  491b              LDR      r1,|L4.216|
00006a  680b              LDR      r3,[r1,#0]  ; OSCfg_IntQTaskStkBasePtr
00006c  b153              CBZ      r3,|L4.132|
;;;384           *p_err = OS_ERR_INT_Q_STK_INVALID;
;;;385            return;
;;;386        }
;;;387    
;;;388        if (OSCfg_IntQTaskStkSize < OSCfg_StkSizeMin) {
00006e  4b1b              LDR      r3,|L4.220|
000070  4d1b              LDR      r5,|L4.224|
000072  681c              LDR      r4,[r3,#0]  ; OSCfg_IntQTaskStkSize
000074  682d              LDR      r5,[r5,#0]  ; OSCfg_StkSizeMin
000076  42ac              CMP      r4,r5
000078  d207              BCS      |L4.138|
;;;389           *p_err = OS_ERR_INT_Q_STK_SIZE_INVALID;
00007a  f2446156          MOV      r1,#0x4656
                  |L4.126|
00007e  8001              STRH     r1,[r0,#0]
                  |L4.128|
;;;390            return;
;;;391        }
;;;392    
;;;393        OSTaskCreate((OS_TCB     *)&OSIntQTaskTCB,
;;;394                     (CPU_CHAR   *)((void *)"uC/OS-III ISR Queue Task"),
;;;395                     (OS_TASK_PTR )OS_IntQTask,
;;;396                     (void       *)0,
;;;397                     (OS_PRIO     )0u,                          /* This task is ALWAYS at priority '0' (i.e. highest)     */
;;;398                     (CPU_STK    *)OSCfg_IntQTaskStkBasePtr,
;;;399                     (CPU_STK_SIZE)OSCfg_IntQTaskStkLimit,
;;;400                     (CPU_STK_SIZE)OSCfg_IntQTaskStkSize,
;;;401                     (OS_MSG_QTY  )0u,
;;;402                     (OS_TICK     )0u,
;;;403                     (void       *)0,
;;;404                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;405                     (OS_ERR     *)p_err);
;;;406    }
000080  b009              ADD      sp,sp,#0x24
000082  bdf0              POP      {r4-r7,pc}
                  |L4.132|
000084  f2446155          MOV      r1,#0x4655            ;384
000088  e7f9              B        |L4.126|
                  |L4.138|
00008a  2403              MOVS     r4,#3                 ;393
00008c  9205              STR      r2,[sp,#0x14]         ;393
00008e  9206              STR      r2,[sp,#0x18]         ;393
000090  e9cd4007          STRD     r4,r0,[sp,#0x1c]      ;393
000094  6818              LDR      r0,[r3,#0]            ;393  ; OSCfg_IntQTaskStkSize
000096  4b13              LDR      r3,|L4.228|
000098  6809              LDR      r1,[r1,#0]            ;393  ; OSCfg_IntQTaskStkBasePtr
00009a  681b              LDR      r3,[r3,#0]            ;393  ; OSCfg_IntQTaskStkLimit
00009c  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;393
0000a0  9200              STR      r2,[sp,#0]            ;393
0000a2  e9cd1301          STRD     r1,r3,[sp,#4]         ;393
0000a6  2300              MOVS     r3,#0                 ;393
0000a8  4a0f              LDR      r2,|L4.232|
0000aa  a110              ADR      r1,|L4.236|
0000ac  4816              LDR      r0,|L4.264|
0000ae  f7fffffe          BL       OSTaskCreate
0000b2  e7e5              B        |L4.128|
;;;407    
                          ENDP

                  |L4.180|
                          DCD      OSIntQOvfCtr
                  |L4.184|
                          DCD      OSCfg_IntQBasePtr
                  |L4.188|
                          DCD      OSCfg_IntQSize
                  |L4.192|
                          DCD      OSIntQTaskTimeMax
                  |L4.196|
                          DCD      0x454e4f4e
                  |L4.200|
                          DCD      OSIntQInPtr
                  |L4.204|
                          DCD      OSIntQOutPtr
                  |L4.208|
                          DCD      OSIntQNbrEntries
                  |L4.212|
                          DCD      OSIntQNbrEntriesMax
                  |L4.216|
                          DCD      OSCfg_IntQTaskStkBasePtr
                  |L4.220|
                          DCD      OSCfg_IntQTaskStkSize
                  |L4.224|
                          DCD      OSCfg_StkSizeMin
                  |L4.228|
                          DCD      OSCfg_IntQTaskStkLimit
                  |L4.232|
                          DCD      OS_IntQTask
                  |L4.236|
0000ec  75432f4f          DCB      "uC/OS-III ISR Queue Task",0
0000f0  532d4949
0000f4  49204953
0000f8  52205175
0000fc  65756520
000100  5461736b
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0
                  |L4.264|
                          DCD      OSIntQTaskTCB
