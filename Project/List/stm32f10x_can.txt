; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\stm32f10x_can.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_can.crf ..\STM32F10x_FWLib\src\stm32f10x_can.c]
                          THUMB

                          AREA ||i.CAN_CancelTransmit||, CODE, READONLY, ALIGN=1

                  CAN_CancelTransmit PROC
;;;642      */
;;;643    void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
000000  b141              CBZ      r1,|L1.20|
;;;644    {
;;;645      /* Check the parameters */
;;;646      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;647      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;648      /* abort transmission */
;;;649      switch (Mailbox)
000002  2901              CMP      r1,#1
000004  d00a              BEQ      |L1.28|
000006  2902              CMP      r1,#2
000008  d103              BNE      |L1.18|
;;;650      {
;;;651        case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
;;;652          break;
;;;653        case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
;;;654          break;
;;;655        case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
00000a  6881              LDR      r1,[r0,#8]
00000c  f4410100          ORR      r1,r1,#0x800000
                  |L1.16|
000010  6081              STR      r1,[r0,#8]
                  |L1.18|
;;;656          break;
;;;657        default:
;;;658          break;
;;;659      }
;;;660    }
000012  4770              BX       lr
                  |L1.20|
000014  6881              LDR      r1,[r0,#8]            ;651
000016  f0410180          ORR      r1,r1,#0x80           ;651
00001a  e7f9              B        |L1.16|
                  |L1.28|
00001c  6881              LDR      r1,[r0,#8]            ;653
00001e  f4414100          ORR      r1,r1,#0x8000         ;653
000022  e7f5              B        |L1.16|
;;;661    
                          ENDP


                          AREA ||i.CAN_ClearFlag||, CODE, READONLY, ALIGN=2

                  CAN_ClearFlag PROC
;;;1142     */
;;;1143   void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  4a0a              LDR      r2,|L2.44|
;;;1144   {
;;;1145     uint32_t flagtmp=0;
;;;1146     /* Check the parameters */
;;;1147     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1148     assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
;;;1149     
;;;1150     if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
000002  4291              CMP      r1,r2
000004  d102              BNE      |L2.12|
;;;1151     {
;;;1152       /* Clear the selected CAN flags */
;;;1153       CANx->ESR = (uint32_t)RESET;
000006  2100              MOVS     r1,#0
000008  6181              STR      r1,[r0,#0x18]
;;;1154     }
;;;1155     else /* MSR or TSR or RF0R or RF1R */
;;;1156     {
;;;1157       flagtmp = CAN_FLAG & 0x000FFFFF;
;;;1158   
;;;1159       if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
;;;1160       {
;;;1161         /* Receive Flags */
;;;1162         CANx->RF0R = (uint32_t)(flagtmp);
;;;1163       }
;;;1164       else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
;;;1165       {
;;;1166         /* Receive Flags */
;;;1167         CANx->RF1R = (uint32_t)(flagtmp);
;;;1168       }
;;;1169       else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
;;;1170       {
;;;1171         /* Transmit Flags */
;;;1172         CANx->TSR = (uint32_t)(flagtmp);
;;;1173       }
;;;1174       else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
;;;1175       {
;;;1176         /* Operating mode Flags */
;;;1177         CANx->MSR = (uint32_t)(flagtmp);
;;;1178       }
;;;1179     }
;;;1180   }
00000a  4770              BX       lr
                  |L2.12|
00000c  f3c10213          UBFX     r2,r1,#0,#20          ;1157
000010  018b              LSLS     r3,r1,#6              ;1159
000012  d501              BPL      |L2.24|
000014  60c2              STR      r2,[r0,#0xc]          ;1162
000016  4770              BX       lr
                  |L2.24|
000018  014b              LSLS     r3,r1,#5              ;1164
00001a  d501              BPL      |L2.32|
00001c  6102              STR      r2,[r0,#0x10]         ;1167
00001e  4770              BX       lr
                  |L2.32|
000020  0109              LSLS     r1,r1,#4              ;1169
000022  d501              BPL      |L2.40|
000024  6082              STR      r2,[r0,#8]            ;1172
000026  4770              BX       lr
                  |L2.40|
000028  6042              STR      r2,[r0,#4]            ;1177
00002a  4770              BX       lr
;;;1181   
                          ENDP

                  |L2.44|
                          DCD      0x30f00070

                          AREA ||i.CAN_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  CAN_ClearITPendingBit PROC
;;;1305     */
;;;1306   void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  b530              PUSH     {r4,r5,lr}
;;;1307   {
;;;1308     /* Check the parameters */
;;;1309     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1310     assert_param(IS_CAN_CLEAR_IT(CAN_IT));
;;;1311   
;;;1312     switch (CAN_IT)
;;;1313     {
;;;1314         case CAN_IT_TME:
;;;1315                 /* Clear CAN_TSR_RQCPx (rc_w1)*/
;;;1316   	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
;;;1317   	      break;
;;;1318         case CAN_IT_FF0:
;;;1319                 /* Clear CAN_RF0R_FULL0 (rc_w1)*/
;;;1320   	      CANx->RF0R = CAN_RF0R_FULL0; 
000002  2308              MOVS     r3,#8
;;;1321   	      break;
;;;1322         case CAN_IT_FOV0:
;;;1323                 /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
;;;1324   	      CANx->RF0R = CAN_RF0R_FOVR0; 
000004  2410              MOVS     r4,#0x10
;;;1325   	      break;
;;;1326         case CAN_IT_FF1:
;;;1327                 /* Clear CAN_RF1R_FULL1 (rc_w1)*/
;;;1328   	      CANx->RF1R = CAN_RF1R_FULL1;  
;;;1329   	      break;
;;;1330         case CAN_IT_FOV1:
;;;1331                 /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
;;;1332   	      CANx->RF1R = CAN_RF1R_FOVR1; 
;;;1333   	      break;
;;;1334         case CAN_IT_WKU:
;;;1335                 /* Clear CAN_MSR_WKUI (rc_w1)*/
;;;1336   	      CANx->MSR = CAN_MSR_WKUI;  
;;;1337   	      break;
;;;1338         case CAN_IT_SLK:
;;;1339                 /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
;;;1340   	      CANx->MSR = CAN_MSR_SLAKI;   
;;;1341   	      break;
;;;1342         case CAN_IT_EWG:
;;;1343                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1344   	      CANx->MSR = CAN_MSR_ERRI;
000006  2204              MOVS     r2,#4
000008  f5b17f00          CMP      r1,#0x200             ;1312
00000c  d01d              BEQ      |L3.74|
00000e  dc10              BGT      |L3.50|
000010  2920              CMP      r1,#0x20              ;1312
000012  d029              BEQ      |L3.104|
000014  dc07              BGT      |L3.38|
000016  2901              CMP      r1,#1                 ;1312
000018  d021              BEQ      |L3.94|
00001a  2904              CMP      r1,#4                 ;1312
00001c  d022              BEQ      |L3.100|
00001e  2908              CMP      r1,#8                 ;1312
000020  d100              BNE      |L3.36|
000022  60c4              STR      r4,[r0,#0xc]          ;1324
                  |L3.36|
;;;1345                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1346                           of the CAN Bus status*/ 
;;;1347   	      break;
;;;1348         case CAN_IT_EPV:
;;;1349                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1350   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1351                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1352                           of the CAN Bus status*/
;;;1353   	      break;
;;;1354         case CAN_IT_BOF:
;;;1355                 /* Clear CAN_MSR_ERRI (rc_w1) */ 
;;;1356   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1357                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1358                           of the CAN Bus status*/
;;;1359   	      break;
;;;1360         case CAN_IT_LEC:
;;;1361                 /*  Clear LEC bits */
;;;1362   	      CANx->ESR = RESET; 
;;;1363                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1364   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1365   	      break;
;;;1366         case CAN_IT_ERR:
;;;1367                 /*Clear LEC bits */
;;;1368   	      CANx->ESR = RESET; 
;;;1369                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1370   	      CANx->MSR = CAN_MSR_ERRI; 
;;;1371   	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
;;;1372                     of the CAN Bus status*/
;;;1373   	      break;
;;;1374         default :
;;;1375   	      break;
;;;1376      }
;;;1377   }
000024  bd30              POP      {r4,r5,pc}
                  |L3.38|
000026  2940              CMP      r1,#0x40              ;1312
000028  d020              BEQ      |L3.108|
00002a  f5b17f80          CMP      r1,#0x100             ;1312
00002e  d1f9              BNE      |L3.36|
000030  e00b              B        |L3.74|
                  |L3.50|
000032  2500              MOVS     r5,#0                 ;1312
000034  f5b14f00          CMP      r1,#0x8000            ;1312
000038  d006              BEQ      |L3.72|
00003a  dc08              BGT      |L3.78|
00003c  f5b16f80          CMP      r1,#0x400             ;1312
000040  d003              BEQ      |L3.74|
000042  f5b16f00          CMP      r1,#0x800             ;1312
000046  d1ed              BNE      |L3.36|
                  |L3.72|
000048  6185              STR      r5,[r0,#0x18]         ;1368
                  |L3.74|
00004a  6042              STR      r2,[r0,#4]            ;1356
                  |L3.76|
00004c  bd30              POP      {r4,r5,pc}
                  |L3.78|
00004e  f5b13f80          CMP      r1,#0x10000           ;1312
000052  d00d              BEQ      |L3.112|
000054  f5b13f00          CMP      r1,#0x20000           ;1312
000058  d1f8              BNE      |L3.76|
00005a  6044              STR      r4,[r0,#4]            ;1340
00005c  bd30              POP      {r4,r5,pc}
                  |L3.94|
00005e  4905              LDR      r1,|L3.116|
000060  6081              STR      r1,[r0,#8]            ;1316
000062  bd30              POP      {r4,r5,pc}
                  |L3.100|
000064  60c3              STR      r3,[r0,#0xc]          ;1320
000066  bd30              POP      {r4,r5,pc}
                  |L3.104|
000068  6103              STR      r3,[r0,#0x10]         ;1328
00006a  bd30              POP      {r4,r5,pc}
                  |L3.108|
00006c  6104              STR      r4,[r0,#0x10]         ;1332
00006e  bd30              POP      {r4,r5,pc}
                  |L3.112|
000070  6043              STR      r3,[r0,#4]            ;1336
000072  bd30              POP      {r4,r5,pc}
;;;1378   
                          ENDP

                  |L3.116|
                          DCD      0x00010101

                          AREA ||i.CAN_DBGFreeze||, CODE, READONLY, ALIGN=1

                  CAN_DBGFreeze PROC
;;;450      */
;;;451    void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;452    {
;;;453      /* Check the parameters */
;;;454      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;455      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;456      
;;;457      if (NewState != DISABLE)
;;;458      {
;;;459        /* Enable Debug Freeze  */
;;;460        CANx->MCR |= MCR_DBF;
;;;461      }
;;;462      else
;;;463      {
;;;464        /* Disable Debug Freeze */
;;;465        CANx->MCR &= ~MCR_DBF;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L4.12|
000006  f4413180          ORR      r1,r1,#0x10000        ;460
00000a  e001              B        |L4.16|
                  |L4.12|
00000c  f4213180          BIC      r1,r1,#0x10000
                  |L4.16|
000010  6001              STR      r1,[r0,#0]            ;460
;;;466      }
;;;467    }
000012  4770              BX       lr
;;;468    
                          ENDP


                          AREA ||i.CAN_DeInit||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;121      */
;;;122    void CAN_DeInit(CAN_TypeDef* CANx)
000000  4909              LDR      r1,|L5.40|
;;;123    {
000002  b510              PUSH     {r4,lr}
;;;124      /* Check the parameters */
;;;125      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;126     
;;;127      if (CANx == CAN1)
000004  4288              CMP      r0,r1
;;;128      {
;;;129        /* Enable CAN1 reset state */
;;;130        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
;;;131        /* Release CAN1 from reset state */
;;;132        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
;;;133      }
;;;134      else
;;;135      {  
;;;136        /* Enable CAN2 reset state */
;;;137        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
000006  f04f0101          MOV      r1,#1
00000a  d101              BNE      |L5.16|
00000c  064c              LSLS     r4,r1,#25             ;130
00000e  e001              B        |L5.20|
                  |L5.16|
000010  f04f6480          MOV      r4,#0x4000000
                  |L5.20|
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;138        /* Release CAN2 from reset state */
;;;139        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
00001a  4620              MOV      r0,r4
00001c  e8bd4010          POP      {r4,lr}
000020  2100              MOVS     r1,#0
000022  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;140      }
;;;141    }
;;;142    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      0x40006400

                          AREA ||i.CAN_FIFORelease||, CODE, READONLY, ALIGN=1

                  CAN_FIFORelease PROC
;;;719      */
;;;720    void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  b121              CBZ      r1,|L6.12|
;;;721    {
;;;722      /* Check the parameters */
;;;723      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;724      assert_param(IS_CAN_FIFO(FIFONumber));
;;;725      /* Release FIFO0 */
;;;726      if (FIFONumber == CAN_FIFO0)
;;;727      {
;;;728        CANx->RF0R |= CAN_RF0R_RFOM0;
;;;729      }
;;;730      /* Release FIFO1 */
;;;731      else /* FIFONumber == CAN_FIFO1 */
;;;732      {
;;;733        CANx->RF1R |= CAN_RF1R_RFOM1;
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410120          ORR      r1,r1,#0x20
000008  6101              STR      r1,[r0,#0x10]
;;;734      }
;;;735    }
00000a  4770              BX       lr
                  |L6.12|
00000c  68c1              LDR      r1,[r0,#0xc]          ;728
00000e  f0410120          ORR      r1,r1,#0x20           ;728
000012  60c1              STR      r1,[r0,#0xc]          ;728
000014  4770              BX       lr
;;;736    
                          ENDP


                          AREA ||i.CAN_FilterInit||, CODE, READONLY, ALIGN=2

                  CAN_FilterInit PROC
;;;291      */
;;;292    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;293    {
;;;294      uint32_t filter_number_bit_pos = 0;
;;;295      /* Check the parameters */
;;;296      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;297      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;298      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;299      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;300      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;301    
;;;302      filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
000002  7a82              LDRB     r2,[r0,#0xa]
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
;;;303    
;;;304      /* Initialisation mode for the filter */
;;;305      CAN1->FMR |= FMR_FINIT;
000008  4a2d              LDR      r2,|L7.192|
00000a  6813              LDR      r3,[r2,#0]
00000c  f0430301          ORR      r3,r3,#1
000010  6013              STR      r3,[r2,#0]
;;;306    
;;;307      /* Filter Deactivation */
;;;308      CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
000012  4b2b              LDR      r3,|L7.192|
000014  331c              ADDS     r3,r3,#0x1c
000016  681c              LDR      r4,[r3,#0]
000018  438c              BICS     r4,r4,r1
00001a  601c              STR      r4,[r3,#0]
;;;309    
;;;310      /* Filter Scale */
;;;311      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
;;;312      {
;;;313        /* 16-bit scale for the filter */
;;;314        CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
00001c  4c28              LDR      r4,|L7.192|
;;;315    
;;;316        /* First 16-bit identifier and First 16-bit mask */
;;;317        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;318        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
00001e  4d28              LDR      r5,|L7.192|
000020  7b07              LDRB     r7,[r0,#0xc]          ;311
000022  340c              ADDS     r4,r4,#0xc            ;314
000024  3540              ADDS     r5,r5,#0x40
;;;319        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;320            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;321    
;;;322        /* Second 16-bit identifier and Second 16-bit mask */
;;;323        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;324        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000026  1d2e              ADDS     r6,r5,#4
000028  b9a7              CBNZ     r7,|L7.84|
00002a  6827              LDR      r7,[r4,#0]            ;314
00002c  438f              BICS     r7,r7,r1              ;314
00002e  6027              STR      r7,[r4,#0]            ;314
000030  8847              LDRH     r7,[r0,#2]            ;318
000032  f8b0c006          LDRH     r12,[r0,#6]           ;318
000036  ea47470c          ORR      r7,r7,r12,LSL #16     ;318
00003a  f890c00a          LDRB     r12,[r0,#0xa]         ;318
00003e  f845703c          STR      r7,[r5,r12,LSL #3]    ;318
000042  8807              LDRH     r7,[r0,#0]
000044  f8b0c004          LDRH     r12,[r0,#4]
000048  ea47470c          ORR      r7,r7,r12,LSL #16
00004c  f890c00a          LDRB     r12,[r0,#0xa]
000050  f846703c          STR      r7,[r6,r12,LSL #3]
                  |L7.84|
;;;325        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;326            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;327      }
;;;328    
;;;329      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
000054  7b07              LDRB     r7,[r0,#0xc]
000056  2f01              CMP      r7,#1
000058  d10e              BNE      |L7.120|
;;;330      {
;;;331        /* 32-bit scale for the filter */
;;;332        CAN1->FS1R |= filter_number_bit_pos;
00005a  6827              LDR      r7,[r4,#0]
00005c  430f              ORRS     r7,r7,r1
00005e  6027              STR      r7,[r4,#0]
;;;333        /* 32-bit identifier or First 32-bit identifier */
;;;334        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000060  6804              LDR      r4,[r0,#0]
000062  7a87              LDRB     r7,[r0,#0xa]
000064  ea4f4434          ROR      r4,r4,#16
000068  f8454037          STR      r4,[r5,r7,LSL #3]
;;;335        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;336            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;337        /* 32-bit mask or Second 32-bit identifier */
;;;338        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
00006c  6844              LDR      r4,[r0,#4]
00006e  7a85              LDRB     r5,[r0,#0xa]
000070  ea4f4434          ROR      r4,r4,#16
000074  f8464035          STR      r4,[r6,r5,LSL #3]
                  |L7.120|
;;;339        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;340            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;341      }
;;;342    
;;;343      /* Filter Mode */
;;;344      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
;;;345      {
;;;346        /*Id/Mask mode for the filter*/
;;;347        CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
000078  4c11              LDR      r4,|L7.192|
00007a  7ac5              LDRB     r5,[r0,#0xb]          ;344
00007c  1d24              ADDS     r4,r4,#4
00007e  2d00              CMP      r5,#0                 ;344
;;;348      }
;;;349      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;350      {
;;;351        /*Identifier list mode for the filter*/
;;;352        CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
000080  6825              LDR      r5,[r4,#0]
000082  d006              BEQ      |L7.146|
000084  430d              ORRS     r5,r5,r1
                  |L7.134|
000086  6025              STR      r5,[r4,#0]
;;;353      }
;;;354    
;;;355      /* Filter FIFO assignment */
;;;356      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
;;;357      {
;;;358        /* FIFO 0 assignation for the filter */
;;;359        CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
000088  4c0d              LDR      r4,|L7.192|
00008a  8905              LDRH     r5,[r0,#8]            ;356
00008c  3414              ADDS     r4,r4,#0x14
00008e  b115              CBZ      r5,|L7.150|
000090  e004              B        |L7.156|
                  |L7.146|
000092  438d              BICS     r5,r5,r1              ;347
000094  e7f7              B        |L7.134|
                  |L7.150|
000096  6825              LDR      r5,[r4,#0]
000098  438d              BICS     r5,r5,r1
00009a  6025              STR      r5,[r4,#0]
                  |L7.156|
;;;360      }
;;;361    
;;;362      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
00009c  8905              LDRH     r5,[r0,#8]
00009e  2d01              CMP      r5,#1
0000a0  d102              BNE      |L7.168|
;;;363      {
;;;364        /* FIFO 1 assignation for the filter */
;;;365        CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
0000a2  6825              LDR      r5,[r4,#0]
0000a4  430d              ORRS     r5,r5,r1
0000a6  6025              STR      r5,[r4,#0]
                  |L7.168|
;;;366      }
;;;367      
;;;368      /* Filter activation */
;;;369      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
0000a8  7b40              LDRB     r0,[r0,#0xd]
0000aa  2801              CMP      r0,#1
0000ac  d102              BNE      |L7.180|
;;;370      {
;;;371        CAN1->FA1R |= filter_number_bit_pos;
0000ae  6818              LDR      r0,[r3,#0]
0000b0  4308              ORRS     r0,r0,r1
0000b2  6018              STR      r0,[r3,#0]
                  |L7.180|
;;;372      }
;;;373    
;;;374      /* Leave the initialisation mode for the filter */
;;;375      CAN1->FMR &= ~FMR_FINIT;
0000b4  6810              LDR      r0,[r2,#0]
0000b6  f0200001          BIC      r0,r0,#1
0000ba  6010              STR      r0,[r2,#0]
;;;376    }
0000bc  bdf0              POP      {r4-r7,pc}
;;;377    
                          ENDP

0000be  0000              DCW      0x0000
                  |L7.192|
                          DCD      0x40006600

                          AREA ||i.CAN_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  CAN_GetFlagStatus PROC
;;;1042     */
;;;1043   FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  4602              MOV      r2,r0
;;;1044   {
;;;1045     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1046     
;;;1047     /* Check the parameters */
;;;1048     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1049     assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
;;;1050     
;;;1051   
;;;1052     if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
000004  f4110f70          TST      r1,#0xf00000
000008  d003              BEQ      |L8.18|
;;;1053     { 
;;;1054       /* Check the status of the specified CAN flag */
;;;1055       if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
00000a  6992              LDR      r2,[r2,#0x18]
00000c  e004              B        |L8.24|
                  |L8.14|
;;;1056       { 
;;;1057         /* CAN_FLAG is set */
;;;1058         bitstatus = SET;
00000e  2001              MOVS     r0,#1
;;;1059       }
;;;1060       else
;;;1061       { 
;;;1062         /* CAN_FLAG is reset */
;;;1063         bitstatus = RESET;
;;;1064       }
;;;1065     }
;;;1066     else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
;;;1067     { 
;;;1068       /* Check the status of the specified CAN flag */
;;;1069       if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1070       { 
;;;1071         /* CAN_FLAG is set */
;;;1072         bitstatus = SET;
;;;1073       }
;;;1074       else
;;;1075       { 
;;;1076         /* CAN_FLAG is reset */
;;;1077         bitstatus = RESET;
;;;1078       }
;;;1079     }
;;;1080     else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
;;;1081     { 
;;;1082       /* Check the status of the specified CAN flag */
;;;1083       if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1084       { 
;;;1085         /* CAN_FLAG is set */
;;;1086         bitstatus = SET;
;;;1087       }
;;;1088       else
;;;1089       { 
;;;1090         /* CAN_FLAG is reset */
;;;1091         bitstatus = RESET;
;;;1092       }
;;;1093     }
;;;1094     else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
;;;1095     { 
;;;1096       /* Check the status of the specified CAN flag */
;;;1097       if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1098       { 
;;;1099         /* CAN_FLAG is set */
;;;1100         bitstatus = SET;
;;;1101       }
;;;1102       else
;;;1103       { 
;;;1104         /* CAN_FLAG is reset */
;;;1105         bitstatus = RESET;
;;;1106       }
;;;1107     }
;;;1108     else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
;;;1109     { 
;;;1110       /* Check the status of the specified CAN flag */
;;;1111       if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
;;;1112       { 
;;;1113         /* CAN_FLAG is set */
;;;1114         bitstatus = SET;
;;;1115       }
;;;1116       else
;;;1117       { 
;;;1118         /* CAN_FLAG is reset */
;;;1119         bitstatus = RESET;
;;;1120       }
;;;1121     }
;;;1122     /* Return the CAN_FLAG status */
;;;1123     return  bitstatus;
;;;1124   }
000010  4770              BX       lr
                  |L8.18|
000012  01cb              LSLS     r3,r1,#7              ;1066
000014  d504              BPL      |L8.32|
000016  6852              LDR      r2,[r2,#4]            ;1069
                  |L8.24|
000018  400a              ANDS     r2,r2,r1              ;1055
00001a  0311              LSLS     r1,r2,#12             ;1055
00001c  d1f7              BNE      |L8.14|
00001e  4770              BX       lr
                  |L8.32|
000020  010b              LSLS     r3,r1,#4
000022  d501              BPL      |L8.40|
000024  6892              LDR      r2,[r2,#8]            ;1083
000026  e7f7              B        |L8.24|
                  |L8.40|
000028  018b              LSLS     r3,r1,#6              ;1094
00002a  d501              BPL      |L8.48|
00002c  68d2              LDR      r2,[r2,#0xc]          ;1097
00002e  e7f3              B        |L8.24|
                  |L8.48|
000030  6912              LDR      r2,[r2,#0x10]         ;1111
000032  e7f1              B        |L8.24|
;;;1125   
                          ENDP


                          AREA ||i.CAN_GetITStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetITStatus PROC
;;;1202     */
;;;1203   ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  4602              MOV      r2,r0
;;;1204   {
;;;1205     ITStatus itstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1206     /* Check the parameters */
;;;1207     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1208     assert_param(IS_CAN_IT(CAN_IT));
;;;1209     
;;;1210     /* check the enable interrupt bit */
;;;1211    if((CANx->IER & CAN_IT) != RESET)
000004  6953              LDR      r3,[r2,#0x14]
000006  420b              TST      r3,r1
000008  d04a              BEQ      |L9.160|
;;;1212    {
;;;1213      /* in case the Interrupt is enabled, .... */
;;;1214       switch (CAN_IT)
00000a  f5b17f80          CMP      r1,#0x100
00000e  d03b              BEQ      |L9.136|
000010  dc13              BGT      |L9.58|
000012  2908              CMP      r1,#8
000014  d02e              BEQ      |L9.116|
000016  dc07              BGT      |L9.40|
000018  2901              CMP      r1,#1
00001a  d026              BEQ      |L9.106|
00001c  2902              CMP      r1,#2
00001e  d027              BEQ      |L9.112|
000020  2904              CMP      r1,#4
000022  d13d              BNE      |L9.160|
;;;1215       {
;;;1216         case CAN_IT_TME:
;;;1217                  /* Check CAN_TSR_RQCPx bits */
;;;1218   	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
;;;1219   	      break;
;;;1220         case CAN_IT_FMP0:
;;;1221                  /* Check CAN_RF0R_FMP0 bit */
;;;1222   	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
;;;1223   	      break;
;;;1224         case CAN_IT_FF0:
;;;1225                  /* Check CAN_RF0R_FULL0 bit */
;;;1226                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
000024  68d0              LDR      r0,[r2,#0xc]
;;;1227   	      break;
000026  e02b              B        |L9.128|
                  |L9.40|
000028  2910              CMP      r1,#0x10              ;1214
00002a  d025              BEQ      |L9.120|
00002c  2920              CMP      r1,#0x20              ;1214
00002e  d026              BEQ      |L9.126|
000030  2940              CMP      r1,#0x40              ;1214
000032  d135              BNE      |L9.160|
;;;1228         case CAN_IT_FOV0:
;;;1229                  /* Check CAN_RF0R_FOVR0 bit */
;;;1230                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
;;;1231   	      break;
;;;1232         case CAN_IT_FMP1:
;;;1233                  /* Check CAN_RF1R_FMP1 bit */
;;;1234                  itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
;;;1235   	      break;
;;;1236         case CAN_IT_FF1:
;;;1237                  /* Check CAN_RF1R_FULL1 bit */
;;;1238   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
;;;1239   	      break;
;;;1240         case CAN_IT_FOV1:
;;;1241                  /* Check CAN_RF1R_FOVR1 bit */
;;;1242   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
000034  6910              LDR      r0,[r2,#0x10]
                  |L9.54|
000036  2110              MOVS     r1,#0x10              ;1230
000038  e030              B        |L9.156|
                  |L9.58|
00003a  f5b14f00          CMP      r1,#0x8000            ;1214
00003e  d02b              BEQ      |L9.152|
000040  dc0b              BGT      |L9.90|
000042  f5b17f00          CMP      r1,#0x200             ;1214
000046  d022              BEQ      |L9.142|
000048  f5b16f80          CMP      r1,#0x400             ;1214
00004c  d022              BEQ      |L9.148|
00004e  f5b16f00          CMP      r1,#0x800             ;1214
000052  d125              BNE      |L9.160|
;;;1243   	      break;
;;;1244         case CAN_IT_WKU:
;;;1245                  /* Check CAN_MSR_WKUI bit */
;;;1246                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
;;;1247   	      break;
;;;1248         case CAN_IT_SLK:
;;;1249                  /* Check CAN_MSR_SLAKI bit */
;;;1250   	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
;;;1251   	      break;
;;;1252         case CAN_IT_EWG:
;;;1253                  /* Check CAN_ESR_EWGF bit */
;;;1254   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
;;;1255   	      break;
;;;1256         case CAN_IT_EPV:
;;;1257                  /* Check CAN_ESR_EPVF bit */
;;;1258   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
;;;1259   	      break;
;;;1260         case CAN_IT_BOF:
;;;1261                  /* Check CAN_ESR_BOFF bit */
;;;1262   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
;;;1263   	      break;
;;;1264         case CAN_IT_LEC:
;;;1265                  /* Check CAN_ESR_LEC bit */
;;;1266   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
000054  6990              LDR      r0,[r2,#0x18]
000056  2170              MOVS     r1,#0x70
;;;1267   	      break;
000058  e020              B        |L9.156|
                  |L9.90|
00005a  f5b13f80          CMP      r1,#0x10000           ;1214
00005e  d011              BEQ      |L9.132|
000060  f5b13f00          CMP      r1,#0x20000           ;1214
000064  d11c              BNE      |L9.160|
000066  6850              LDR      r0,[r2,#4]            ;1250
000068  e7e5              B        |L9.54|
                  |L9.106|
00006a  6890              LDR      r0,[r2,#8]            ;1218
00006c  490d              LDR      r1,|L9.164|
00006e  e015              B        |L9.156|
                  |L9.112|
000070  68d0              LDR      r0,[r2,#0xc]          ;1222
000072  e002              B        |L9.122|
                  |L9.116|
000074  68d0              LDR      r0,[r2,#0xc]          ;1230
000076  e7de              B        |L9.54|
                  |L9.120|
000078  6910              LDR      r0,[r2,#0x10]         ;1234
                  |L9.122|
00007a  2103              MOVS     r1,#3                 ;1222
00007c  e00e              B        |L9.156|
                  |L9.126|
00007e  6910              LDR      r0,[r2,#0x10]         ;1238
                  |L9.128|
000080  2108              MOVS     r1,#8                 ;1226
000082  e00b              B        |L9.156|
                  |L9.132|
000084  6850              LDR      r0,[r2,#4]            ;1246
000086  e7fb              B        |L9.128|
                  |L9.136|
000088  6990              LDR      r0,[r2,#0x18]         ;1254
00008a  2101              MOVS     r1,#1                 ;1254
00008c  e006              B        |L9.156|
                  |L9.142|
00008e  6990              LDR      r0,[r2,#0x18]         ;1258
000090  2102              MOVS     r1,#2                 ;1258
000092  e003              B        |L9.156|
                  |L9.148|
000094  6990              LDR      r0,[r2,#0x18]         ;1262
000096  e000              B        |L9.154|
                  |L9.152|
;;;1268         case CAN_IT_ERR:
;;;1269                  /* Check CAN_MSR_ERRI bit */ 
;;;1270                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
000098  6850              LDR      r0,[r2,#4]
                  |L9.154|
00009a  2104              MOVS     r1,#4                 ;1262
                  |L9.156|
00009c  f7ffbffe          B.W      CheckITStatus
                  |L9.160|
;;;1271   	      break;
;;;1272         default :
;;;1273                  /* in case of error, return RESET */
;;;1274                 itstatus = RESET;
;;;1275                 break;
;;;1276       }
;;;1277     }
;;;1278     else
;;;1279     {
;;;1280      /* in case the Interrupt is not enabled, return RESET */
;;;1281       itstatus  = RESET;
;;;1282     }
;;;1283     
;;;1284     /* Return the CAN_IT status */
;;;1285     return  itstatus;
;;;1286   }
0000a0  4770              BX       lr
;;;1287   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L9.164|
                          DCD      0x00010101

                          AREA ||i.CAN_GetLSBTransmitErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetLSBTransmitErrorCounter PROC
;;;965      */
;;;966    uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
000000  6980              LDR      r0,[r0,#0x18]
;;;967    {
;;;968      uint8_t counter=0;
;;;969      
;;;970      /* Check the parameters */
;;;971      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;972      
;;;973      /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;974      counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
000002  f3c04007          UBFX     r0,r0,#16,#8
;;;975      
;;;976      /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;977      return counter;
;;;978    }
000006  4770              BX       lr
;;;979    
                          ENDP


                          AREA ||i.CAN_GetLastErrorCode||, CODE, READONLY, ALIGN=1

                  CAN_GetLastErrorCode PROC
;;;921     
;;;922    uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
000000  6980              LDR      r0,[r0,#0x18]
;;;923    {
;;;924      uint8_t errorcode=0;
;;;925      
;;;926      /* Check the parameters */
;;;927      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;928      
;;;929      /* Get the error code*/
;;;930      errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
000002  f3c01002          UBFX     r0,r0,#4,#3
000006  0100              LSLS     r0,r0,#4
;;;931      
;;;932      /* Return the error code*/
;;;933      return errorcode;
;;;934    }
000008  4770              BX       lr
;;;935    /**
                          ENDP


                          AREA ||i.CAN_GetReceiveErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetReceiveErrorCounter PROC
;;;945      */
;;;946    uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
000000  6980              LDR      r0,[r0,#0x18]
;;;947    {
;;;948      uint8_t counter=0;
;;;949      
;;;950      /* Check the parameters */
;;;951      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;952      
;;;953      /* Get the Receive Error Counter*/
;;;954      counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
000002  0e00              LSRS     r0,r0,#24
;;;955      
;;;956      /* Return the Receive Error Counter*/
;;;957      return counter;
;;;958    }
000004  4770              BX       lr
;;;959    
                          ENDP


                          AREA ||i.CAN_ITConfig||, CODE, READONLY, ALIGN=1

                  CAN_ITConfig PROC
;;;1002     */
;;;1003   void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;1004   {
;;;1005     /* Check the parameters */
;;;1006     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1007     assert_param(IS_CAN_IT(CAN_IT));
;;;1008     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1009   
;;;1010     if (NewState != DISABLE)
;;;1011     {
;;;1012       /* Enable the selected CANx interrupt */
;;;1013       CANx->IER |= CAN_IT;
;;;1014     }
;;;1015     else
;;;1016     {
;;;1017       /* Disable the selected CANx interrupt */
;;;1018       CANx->IER &= ~CAN_IT;
000002  6942              LDR      r2,[r0,#0x14]
000004  d001              BEQ      |L13.10|
000006  430a              ORRS     r2,r2,r1              ;1013
000008  e000              B        |L13.12|
                  |L13.10|
00000a  438a              BICS     r2,r2,r1
                  |L13.12|
00000c  6142              STR      r2,[r0,#0x14]         ;1013
;;;1019     }
;;;1020   }
00000e  4770              BX       lr
;;;1021   /**
                          ENDP


                          AREA ||i.CAN_Init||, CODE, READONLY, ALIGN=1

                  CAN_Init PROC
;;;153      */
;;;154    uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156      uint8_t InitStatus = CAN_InitStatus_Failed;
;;;157      uint32_t wait_ack = 0x00000000;
;;;158      /* Check the parameters */
;;;159      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;160      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;161      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;162      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;163      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;164      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;165      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;166      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;167      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;168      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;169      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;170      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;171    
;;;172      /* Exit from sleep mode */
;;;173      CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
000002  6803              LDR      r3,[r0,#0]
000004  2200              MOVS     r2,#0                 ;157
000006  f0230302          BIC      r3,r3,#2
00000a  6003              STR      r3,[r0,#0]
;;;174    
;;;175      /* Request initialisation */
;;;176      CANx->MCR |= CAN_MCR_INRQ ;
00000c  6803              LDR      r3,[r0,#0]
00000e  f0430301          ORR      r3,r3,#1
000012  6003              STR      r3,[r0,#0]
;;;177    
;;;178      /* Wait the acknowledge */
;;;179      while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
000014  f64f73ff          MOV      r3,#0xffff
000018  e000              B        |L14.28|
                  |L14.26|
;;;180      {
;;;181        wait_ack++;
00001a  1c52              ADDS     r2,r2,#1
                  |L14.28|
00001c  6844              LDR      r4,[r0,#4]            ;179
00001e  07e4              LSLS     r4,r4,#31             ;179
000020  d101              BNE      |L14.38|
000022  429a              CMP      r2,r3                 ;179
000024  d1f9              BNE      |L14.26|
                  |L14.38|
;;;182      }
;;;183    
;;;184      /* Check acknowledge */
;;;185      if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
000026  6842              LDR      r2,[r0,#4]
000028  07d2              LSLS     r2,r2,#31
00002a  d03e              BEQ      |L14.170|
;;;186      {
;;;187        InitStatus = CAN_InitStatus_Failed;
;;;188      }
;;;189      else 
;;;190      {
;;;191        /* Set the time triggered communication mode */
;;;192        if (CAN_InitStruct->CAN_TTCM == ENABLE)
00002c  798a              LDRB     r2,[r1,#6]
00002e  2a01              CMP      r2,#1
;;;193        {
;;;194          CANx->MCR |= CAN_MCR_TTCM;
;;;195        }
;;;196        else
;;;197        {
;;;198          CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
000030  6802              LDR      r2,[r0,#0]
000032  d03c              BEQ      |L14.174|
000034  f0220280          BIC      r2,r2,#0x80
                  |L14.56|
000038  6002              STR      r2,[r0,#0]
;;;199        }
;;;200    
;;;201        /* Set the automatic bus-off management */
;;;202        if (CAN_InitStruct->CAN_ABOM == ENABLE)
00003a  79ca              LDRB     r2,[r1,#7]
00003c  2a01              CMP      r2,#1
;;;203        {
;;;204          CANx->MCR |= CAN_MCR_ABOM;
;;;205        }
;;;206        else
;;;207        {
;;;208          CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
00003e  6802              LDR      r2,[r0,#0]
000040  d038              BEQ      |L14.180|
000042  f0220240          BIC      r2,r2,#0x40
                  |L14.70|
000046  6002              STR      r2,[r0,#0]
;;;209        }
;;;210    
;;;211        /* Set the automatic wake-up mode */
;;;212        if (CAN_InitStruct->CAN_AWUM == ENABLE)
000048  7a0a              LDRB     r2,[r1,#8]
00004a  2a01              CMP      r2,#1
;;;213        {
;;;214          CANx->MCR |= CAN_MCR_AWUM;
;;;215        }
;;;216        else
;;;217        {
;;;218          CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
00004c  6802              LDR      r2,[r0,#0]
00004e  d034              BEQ      |L14.186|
000050  f0220220          BIC      r2,r2,#0x20
                  |L14.84|
000054  6002              STR      r2,[r0,#0]
;;;219        }
;;;220    
;;;221        /* Set the no automatic retransmission */
;;;222        if (CAN_InitStruct->CAN_NART == ENABLE)
000056  7a4a              LDRB     r2,[r1,#9]
000058  2a01              CMP      r2,#1
;;;223        {
;;;224          CANx->MCR |= CAN_MCR_NART;
;;;225        }
;;;226        else
;;;227        {
;;;228          CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
00005a  6802              LDR      r2,[r0,#0]
00005c  d030              BEQ      |L14.192|
00005e  f0220210          BIC      r2,r2,#0x10
                  |L14.98|
000062  6002              STR      r2,[r0,#0]
;;;229        }
;;;230    
;;;231        /* Set the receive FIFO locked mode */
;;;232        if (CAN_InitStruct->CAN_RFLM == ENABLE)
000064  7a8a              LDRB     r2,[r1,#0xa]
000066  2a01              CMP      r2,#1
;;;233        {
;;;234          CANx->MCR |= CAN_MCR_RFLM;
;;;235        }
;;;236        else
;;;237        {
;;;238          CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
000068  6802              LDR      r2,[r0,#0]
00006a  d02c              BEQ      |L14.198|
00006c  f0220208          BIC      r2,r2,#8
                  |L14.112|
000070  6002              STR      r2,[r0,#0]
;;;239        }
;;;240    
;;;241        /* Set the transmit FIFO priority */
;;;242        if (CAN_InitStruct->CAN_TXFP == ENABLE)
000072  7aca              LDRB     r2,[r1,#0xb]
000074  2a01              CMP      r2,#1
;;;243        {
;;;244          CANx->MCR |= CAN_MCR_TXFP;
;;;245        }
;;;246        else
;;;247        {
;;;248          CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
000076  6802              LDR      r2,[r0,#0]
000078  d028              BEQ      |L14.204|
00007a  f0220204          BIC      r2,r2,#4
                  |L14.126|
00007e  6002              STR      r2,[r0,#0]
;;;249        }
;;;250    
;;;251        /* Set the bit timing register */
;;;252        CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
000080  788a              LDRB     r2,[r1,#2]
000082  78cc              LDRB     r4,[r1,#3]
000084  0792              LSLS     r2,r2,#30
000086  ea426204          ORR      r2,r2,r4,LSL #24
00008a  790c              LDRB     r4,[r1,#4]
00008c  ea424204          ORR      r2,r2,r4,LSL #16
000090  794c              LDRB     r4,[r1,#5]
000092  8809              LDRH     r1,[r1,#0]
000094  ea425204          ORR      r2,r2,r4,LSL #20
000098  1e49              SUBS     r1,r1,#1
00009a  430a              ORRS     r2,r2,r1
00009c  61c2              STR      r2,[r0,#0x1c]
;;;253                    ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
;;;254                    ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
;;;255                    ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
;;;256                   ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
;;;257    
;;;258        /* Request leave initialisation */
;;;259        CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
00009e  6801              LDR      r1,[r0,#0]
0000a0  f0210101          BIC      r1,r1,#1
0000a4  6001              STR      r1,[r0,#0]
;;;260    
;;;261       /* Wait the acknowledge */
;;;262       wait_ack = 0;
0000a6  2100              MOVS     r1,#0
0000a8  e014              B        |L14.212|
                  |L14.170|
0000aa  2000              MOVS     r0,#0                 ;187
;;;263    
;;;264       while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
;;;265       {
;;;266         wait_ack++;
;;;267       }
;;;268    
;;;269        /* ...and check acknowledged */
;;;270        if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
;;;271        {
;;;272          InitStatus = CAN_InitStatus_Failed;
;;;273        }
;;;274        else
;;;275        {
;;;276          InitStatus = CAN_InitStatus_Success ;
;;;277        }
;;;278      }
;;;279    
;;;280      /* At this step, return the status of initialization */
;;;281      return InitStatus;
;;;282    }
0000ac  bd10              POP      {r4,pc}
                  |L14.174|
0000ae  f0420280          ORR      r2,r2,#0x80           ;194
0000b2  e7c1              B        |L14.56|
                  |L14.180|
0000b4  f0420240          ORR      r2,r2,#0x40           ;204
0000b8  e7c5              B        |L14.70|
                  |L14.186|
0000ba  f0420220          ORR      r2,r2,#0x20           ;214
0000be  e7c9              B        |L14.84|
                  |L14.192|
0000c0  f0420210          ORR      r2,r2,#0x10           ;224
0000c4  e7cd              B        |L14.98|
                  |L14.198|
0000c6  f0420208          ORR      r2,r2,#8              ;234
0000ca  e7d1              B        |L14.112|
                  |L14.204|
0000cc  f0420204          ORR      r2,r2,#4              ;244
0000d0  e7d5              B        |L14.126|
                  |L14.210|
0000d2  1c49              ADDS     r1,r1,#1              ;266
                  |L14.212|
0000d4  6842              LDR      r2,[r0,#4]            ;264
0000d6  07d2              LSLS     r2,r2,#31             ;264
0000d8  d001              BEQ      |L14.222|
0000da  4299              CMP      r1,r3                 ;264
0000dc  d1f9              BNE      |L14.210|
                  |L14.222|
0000de  6840              LDR      r0,[r0,#4]            ;270
0000e0  07c0              LSLS     r0,r0,#31             ;270
0000e2  d1e2              BNE      |L14.170|
0000e4  2001              MOVS     r0,#1                 ;276
0000e6  bd10              POP      {r4,pc}
;;;283    
                          ENDP


                          AREA ||i.CAN_MessagePending||, CODE, READONLY, ALIGN=1

                  CAN_MessagePending PROC
;;;742      */
;;;743    uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  4602              MOV      r2,r0
;;;744    {
;;;745      uint8_t message_pending=0;
000002  2000              MOVS     r0,#0
000004  b129              CBZ      r1,|L15.18|
;;;746      /* Check the parameters */
;;;747      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;748      assert_param(IS_CAN_FIFO(FIFONumber));
;;;749      if (FIFONumber == CAN_FIFO0)
;;;750      {
;;;751        message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
;;;752      }
;;;753      else if (FIFONumber == CAN_FIFO1)
000006  2901              CMP      r1,#1
000008  d102              BNE      |L15.16|
;;;754      {
;;;755        message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
00000a  6910              LDR      r0,[r2,#0x10]
                  |L15.12|
00000c  f0000003          AND      r0,r0,#3              ;751
                  |L15.16|
;;;756      }
;;;757      else
;;;758      {
;;;759        message_pending = 0;
;;;760      }
;;;761      return message_pending;
;;;762    }
000010  4770              BX       lr
                  |L15.18|
000012  68d0              LDR      r0,[r2,#0xc]          ;751
000014  e7fa              B        |L15.12|
;;;763    
                          ENDP


                          AREA ||i.CAN_OperatingModeRequest||, CODE, READONLY, ALIGN=1

                  CAN_OperatingModeRequest PROC
;;;773      */
;;;774    uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
000000  2300              MOVS     r3,#0
;;;775    {
;;;776      uint8_t status = CAN_ModeStatus_Failed;
;;;777      
;;;778      /* Timeout for INAK or also for SLAK bits*/
;;;779      uint32_t timeout = INAK_TIMEOUT; 
000002  f64f72ff          MOV      r2,#0xffff
000006  b121              CBZ      r1,|L16.18|
;;;780    
;;;781      /* Check the parameters */
;;;782      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;783      assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
;;;784    
;;;785      if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
;;;786      {
;;;787        /* Request initialisation */
;;;788        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
;;;789    
;;;790        /* Wait the acknowledge */
;;;791        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
;;;792        {
;;;793          timeout--;
;;;794        }
;;;795        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
;;;796        {
;;;797          status = CAN_ModeStatus_Failed;
;;;798        }
;;;799        else
;;;800        {
;;;801          status = CAN_ModeStatus_Success;
;;;802        }
;;;803      }
;;;804      else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
000008  2901              CMP      r1,#1
00000a  d017              BEQ      |L16.60|
;;;805      {
;;;806        /* Request leave initialisation and sleep mode  and enter Normal mode */
;;;807        CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
;;;808    
;;;809        /* Wait the acknowledge */
;;;810        while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
;;;811        {
;;;812          timeout--;
;;;813        }
;;;814        if ((CANx->MSR & CAN_MODE_MASK) != 0)
;;;815        {
;;;816          status = CAN_ModeStatus_Failed;
;;;817        }
;;;818        else
;;;819        {
;;;820          status = CAN_ModeStatus_Success;
;;;821        }
;;;822      }
;;;823      else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
00000c  2902              CMP      r1,#2
00000e  d024              BEQ      |L16.90|
000010  e03a              B        |L16.136|
                  |L16.18|
000012  6801              LDR      r1,[r0,#0]            ;788
000014  f0210102          BIC      r1,r1,#2              ;788
000018  f0410101          ORR      r1,r1,#1              ;788
00001c  6001              STR      r1,[r0,#0]            ;788
00001e  e000              B        |L16.34|
                  |L16.32|
000020  1e52              SUBS     r2,r2,#1              ;793
                  |L16.34|
000022  6841              LDR      r1,[r0,#4]            ;791
000024  f0010103          AND      r1,r1,#3              ;791
000028  2901              CMP      r1,#1                 ;791
00002a  d001              BEQ      |L16.48|
00002c  2a00              CMP      r2,#0                 ;791
00002e  d1f7              BNE      |L16.32|
                  |L16.48|
000030  6840              LDR      r0,[r0,#4]            ;795
000032  f0000003          AND      r0,r0,#3              ;795
000036  2801              CMP      r0,#1                 ;795
000038  d123              BNE      |L16.130|
00003a  e024              B        |L16.134|
                  |L16.60|
00003c  6801              LDR      r1,[r0,#0]            ;807
00003e  f0210103          BIC      r1,r1,#3              ;807
000042  6001              STR      r1,[r0,#0]            ;807
000044  e000              B        |L16.72|
                  |L16.70|
000046  1e52              SUBS     r2,r2,#1              ;812
                  |L16.72|
000048  6841              LDR      r1,[r0,#4]            ;810
00004a  0789              LSLS     r1,r1,#30             ;810
00004c  d001              BEQ      |L16.82|
00004e  2a00              CMP      r2,#0                 ;810
000050  d1f9              BNE      |L16.70|
                  |L16.82|
000052  6840              LDR      r0,[r0,#4]            ;814
000054  0780              LSLS     r0,r0,#30             ;814
000056  d114              BNE      |L16.130|
000058  e015              B        |L16.134|
                  |L16.90|
;;;824      {
;;;825        /* Request Sleep mode */
;;;826        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
00005a  6801              LDR      r1,[r0,#0]
00005c  f0210101          BIC      r1,r1,#1
000060  f0410102          ORR      r1,r1,#2
000064  6001              STR      r1,[r0,#0]
;;;827    
;;;828        /* Wait the acknowledge */
;;;829        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
000066  e000              B        |L16.106|
                  |L16.104|
;;;830        {
;;;831          timeout--;
000068  1e52              SUBS     r2,r2,#1
                  |L16.106|
00006a  6841              LDR      r1,[r0,#4]            ;829
00006c  f0010103          AND      r1,r1,#3              ;829
000070  2902              CMP      r1,#2                 ;829
000072  d001              BEQ      |L16.120|
000074  2a00              CMP      r2,#0                 ;829
000076  d1f7              BNE      |L16.104|
                  |L16.120|
;;;832        }
;;;833        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
000078  6840              LDR      r0,[r0,#4]
00007a  f0000003          AND      r0,r0,#3
00007e  2802              CMP      r0,#2
000080  d001              BEQ      |L16.134|
                  |L16.130|
;;;834        {
;;;835          status = CAN_ModeStatus_Failed;
000082  2300              MOVS     r3,#0
000084  e000              B        |L16.136|
                  |L16.134|
;;;836        }
;;;837        else
;;;838        {
;;;839          status = CAN_ModeStatus_Success;
000086  2301              MOVS     r3,#1
                  |L16.136|
;;;840        }
;;;841      }
;;;842      else
;;;843      {
;;;844        status = CAN_ModeStatus_Failed;
;;;845      }
;;;846    
;;;847      return  (uint8_t) status;
000088  4618              MOV      r0,r3
;;;848    }
00008a  4770              BX       lr
;;;849    
                          ENDP


                          AREA ||i.CAN_Receive||, CODE, READONLY, ALIGN=2

                  CAN_Receive PROC
;;;670      */
;;;671    void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
000000  b510              PUSH     {r4,lr}
;;;672    {
;;;673      /* Check the parameters */
;;;674      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;675      assert_param(IS_CAN_FIFO(FIFONumber));
;;;676      /* Get the Id */
;;;677      RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
000002  eb001301          ADD      r3,r0,r1,LSL #4
000006  f8d341b0          LDR      r4,[r3,#0x1b0]
00000a  f0140404          ANDS     r4,r4,#4
00000e  7214              STRB     r4,[r2,#8]
;;;678      if (RxMessage->IDE == CAN_Id_Standard)
;;;679      {
;;;680        RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
;;;681      }
;;;682      else
;;;683      {
;;;684        RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
000010  f8d341b0          LDR      r4,[r3,#0x1b0]
000014  d02b              BEQ      |L17.110|
000016  08e4              LSRS     r4,r4,#3
000018  f8c24004          STR.W    r4,[r2,#4]
                  |L17.28|
00001c  f50373d8          ADD      r3,r3,#0x1b0
;;;685      }
;;;686      
;;;687      RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
000020  681c              LDR      r4,[r3,#0]
000022  f0040402          AND      r4,r4,#2
000026  7254              STRB     r4,[r2,#9]
;;;688      /* Get the DLC */
;;;689      RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
000028  685c              LDR      r4,[r3,#4]
00002a  f004040f          AND      r4,r4,#0xf
00002e  7294              STRB     r4,[r2,#0xa]
;;;690      /* Get the FMI */
;;;691      RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
000030  685c              LDR      r4,[r3,#4]
000032  0a24              LSRS     r4,r4,#8
000034  74d4              STRB     r4,[r2,#0x13]
;;;692      /* Get the data field */
;;;693      RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
000036  689c              LDR      r4,[r3,#8]
000038  72d4              STRB     r4,[r2,#0xb]
;;;694      RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
00003a  689c              LDR      r4,[r3,#8]
00003c  0a24              LSRS     r4,r4,#8
00003e  7314              STRB     r4,[r2,#0xc]
;;;695      RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
000040  689c              LDR      r4,[r3,#8]
000042  0c24              LSRS     r4,r4,#16
000044  7354              STRB     r4,[r2,#0xd]
;;;696      RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
000046  689c              LDR      r4,[r3,#8]
000048  0e24              LSRS     r4,r4,#24
00004a  7394              STRB     r4,[r2,#0xe]
;;;697      RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
00004c  68dc              LDR      r4,[r3,#0xc]
00004e  73d4              STRB     r4,[r2,#0xf]
;;;698      RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
000050  68dc              LDR      r4,[r3,#0xc]
000052  0a24              LSRS     r4,r4,#8
000054  7414              STRB     r4,[r2,#0x10]
;;;699      RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
000056  68dc              LDR      r4,[r3,#0xc]
000058  0c24              LSRS     r4,r4,#16
00005a  7454              STRB     r4,[r2,#0x11]
;;;700      RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
00005c  68db              LDR      r3,[r3,#0xc]
00005e  0e1b              LSRS     r3,r3,#24
000060  7493              STRB     r3,[r2,#0x12]
;;;701      /* Release the FIFO */
;;;702      /* Release FIFO0 */
;;;703      if (FIFONumber == CAN_FIFO0)
000062  b139              CBZ      r1,|L17.116|
;;;704      {
;;;705        CANx->RF0R |= CAN_RF0R_RFOM0;
;;;706      }
;;;707      /* Release FIFO1 */
;;;708      else /* FIFONumber == CAN_FIFO1 */
;;;709      {
;;;710        CANx->RF1R |= CAN_RF1R_RFOM1;
000064  6901              LDR      r1,[r0,#0x10]
000066  f0410120          ORR      r1,r1,#0x20
00006a  6101              STR      r1,[r0,#0x10]
;;;711      }
;;;712    }
00006c  bd10              POP      {r4,pc}
                  |L17.110|
00006e  0d64              LSRS     r4,r4,#21             ;680
000070  6014              STR      r4,[r2,#0]            ;680
000072  e7d3              B        |L17.28|
                  |L17.116|
000074  68c1              LDR      r1,[r0,#0xc]          ;705
000076  f0410120          ORR      r1,r1,#0x20           ;705
00007a  60c1              STR      r1,[r0,#0xc]          ;705
00007c  bd10              POP      {r4,pc}
;;;713    
                          ENDP


                          AREA ||i.CAN_SlaveStartBank||, CODE, READONLY, ALIGN=2

                  CAN_SlaveStartBank PROC
;;;427      */
;;;428    void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
000000  4909              LDR      r1,|L18.40|
;;;429    {
;;;430      /* Check the parameters */
;;;431      assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
;;;432      
;;;433      /* Enter Initialisation mode for the filter */
;;;434      CAN1->FMR |= FMR_FINIT;
000002  680a              LDR      r2,[r1,#0]
000004  f0420201          ORR      r2,r2,#1
000008  600a              STR      r2,[r1,#0]
;;;435      
;;;436      /* Select the start slave bank */
;;;437      CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
00000a  680a              LDR      r2,[r1,#0]
00000c  f643730e          MOV      r3,#0x3f0e
000010  439a              BICS     r2,r2,r3
000012  600a              STR      r2,[r1,#0]
;;;438      CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
000014  680a              LDR      r2,[r1,#0]
000016  ea422000          ORR      r0,r2,r0,LSL #8
00001a  6008              STR      r0,[r1,#0]
;;;439      
;;;440      /* Leave Initialisation mode for the filter */
;;;441      CAN1->FMR &= ~FMR_FINIT;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0200001          BIC      r0,r0,#1
000022  6008              STR      r0,[r1,#0]
;;;442    }
000024  4770              BX       lr
;;;443    
                          ENDP

000026  0000              DCW      0x0000
                  |L18.40|
                          DCD      0x40006600

                          AREA ||i.CAN_Sleep||, CODE, READONLY, ALIGN=1

                  CAN_Sleep PROC
;;;855      */
;;;856    uint8_t CAN_Sleep(CAN_TypeDef* CANx)
000000  6802              LDR      r2,[r0,#0]
;;;857    {
;;;858      uint8_t sleepstatus = CAN_Sleep_Failed;
000002  2100              MOVS     r1,#0
;;;859      
;;;860      /* Check the parameters */
;;;861      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;862        
;;;863      /* Request Sleep mode */
;;;864       CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
000004  f0220201          BIC      r2,r2,#1
000008  f0420202          ORR      r2,r2,#2
00000c  6002              STR      r2,[r0,#0]
;;;865       
;;;866      /* Sleep mode status */
;;;867      if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
00000e  6840              LDR      r0,[r0,#4]
000010  f0000003          AND      r0,r0,#3
000014  2802              CMP      r0,#2
000016  d100              BNE      |L19.26|
;;;868      {
;;;869        /* Sleep mode not entered */
;;;870        sleepstatus =  CAN_Sleep_Ok;
000018  2101              MOVS     r1,#1
                  |L19.26|
;;;871      }
;;;872      /* return sleep mode status */
;;;873       return (uint8_t)sleepstatus;
00001a  4608              MOV      r0,r1
;;;874    }
00001c  4770              BX       lr
;;;875    
                          ENDP


                          AREA ||i.CAN_StructInit||, CODE, READONLY, ALIGN=1

                  CAN_StructInit PROC
;;;383      */
;;;384    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000000  2100              MOVS     r1,#0
;;;385    {
;;;386      /* Reset CAN init structure parameters values */
;;;387      
;;;388      /* Initialize the time triggered communication mode */
;;;389      CAN_InitStruct->CAN_TTCM = DISABLE;
000002  7181              STRB     r1,[r0,#6]
;;;390      
;;;391      /* Initialize the automatic bus-off management */
;;;392      CAN_InitStruct->CAN_ABOM = DISABLE;
000004  71c1              STRB     r1,[r0,#7]
;;;393      
;;;394      /* Initialize the automatic wake-up mode */
;;;395      CAN_InitStruct->CAN_AWUM = DISABLE;
000006  7201              STRB     r1,[r0,#8]
;;;396      
;;;397      /* Initialize the no automatic retransmission */
;;;398      CAN_InitStruct->CAN_NART = DISABLE;
000008  7241              STRB     r1,[r0,#9]
;;;399      
;;;400      /* Initialize the receive FIFO locked mode */
;;;401      CAN_InitStruct->CAN_RFLM = DISABLE;
00000a  7281              STRB     r1,[r0,#0xa]
;;;402      
;;;403      /* Initialize the transmit FIFO priority */
;;;404      CAN_InitStruct->CAN_TXFP = DISABLE;
00000c  72c1              STRB     r1,[r0,#0xb]
;;;405      
;;;406      /* Initialize the CAN_Mode member */
;;;407      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
00000e  7081              STRB     r1,[r0,#2]
;;;408      
;;;409      /* Initialize the CAN_SJW member */
;;;410      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000010  70c1              STRB     r1,[r0,#3]
;;;411      
;;;412      /* Initialize the CAN_BS1 member */
;;;413      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
000012  2103              MOVS     r1,#3
000014  7101              STRB     r1,[r0,#4]
;;;414      
;;;415      /* Initialize the CAN_BS2 member */
;;;416      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
000016  2102              MOVS     r1,#2
000018  7141              STRB     r1,[r0,#5]
;;;417      
;;;418      /* Initialize the CAN_Prescaler member */
;;;419      CAN_InitStruct->CAN_Prescaler = 1;
00001a  2101              MOVS     r1,#1
00001c  8001              STRH     r1,[r0,#0]
;;;420    }
00001e  4770              BX       lr
;;;421    
                          ENDP


                          AREA ||i.CAN_TTComModeCmd||, CODE, READONLY, ALIGN=1

                  CAN_TTComModeCmd PROC
;;;480      */
;;;481    void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;485      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;486      if (NewState != DISABLE)
;;;487      {
;;;488        /* Enable the TTCM mode */
;;;489        CANx->MCR |= CAN_MCR_TTCM;
;;;490    
;;;491        /* Set TGT bits */
;;;492        CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
;;;493        CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
;;;494        CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
;;;495      }
;;;496      else
;;;497      {
;;;498        /* Disable the TTCM mode */
;;;499        CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
000002  6801              LDR      r1,[r0,#0]
000004  d013              BEQ      |L21.46|
000006  f0410180          ORR      r1,r1,#0x80           ;489
00000a  6001              STR      r1,[r0,#0]            ;489
00000c  f8d01184          LDR      r1,[r0,#0x184]        ;492
000010  f4417180          ORR      r1,r1,#0x100          ;492
000014  f8c01184          STR      r1,[r0,#0x184]        ;492
000018  f8d01194          LDR      r1,[r0,#0x194]        ;493
00001c  f4417180          ORR      r1,r1,#0x100          ;493
000020  f8c01194          STR      r1,[r0,#0x194]        ;493
000024  f8d011a4          LDR      r1,[r0,#0x1a4]        ;494
000028  f4417180          ORR      r1,r1,#0x100          ;494
00002c  e012              B        |L21.84|
                  |L21.46|
00002e  f0210180          BIC      r1,r1,#0x80
000032  6001              STR      r1,[r0,#0]
;;;500    
;;;501        /* Reset TGT bits */
;;;502        CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
000034  f8d01184          LDR      r1,[r0,#0x184]
000038  f4217180          BIC      r1,r1,#0x100
00003c  f8c01184          STR      r1,[r0,#0x184]
;;;503        CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
000040  f8d01194          LDR      r1,[r0,#0x194]
000044  f4217180          BIC      r1,r1,#0x100
000048  f8c01194          STR      r1,[r0,#0x194]
;;;504        CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
00004c  f8d011a4          LDR      r1,[r0,#0x1a4]
000050  f4217180          BIC      r1,r1,#0x100
                  |L21.84|
000054  f8c011a4          STR      r1,[r0,#0x1a4]        ;494
;;;505      }
;;;506    }
000058  4770              BX       lr
;;;507    /**
                          ENDP


                          AREA ||i.CAN_Transmit||, CODE, READONLY, ALIGN=1

                  CAN_Transmit PROC
;;;514      */
;;;515    uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
000000  b530              PUSH     {r4,r5,lr}
;;;516    {
000002  4602              MOV      r2,r0
;;;517      uint8_t transmit_mailbox = 0;
000004  2000              MOVS     r0,#0
;;;518      /* Check the parameters */
;;;519      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;520      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;521      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;522      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;523    
;;;524      /* Select one empty transmit mailbox */
;;;525      if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
000006  6893              LDR      r3,[r2,#8]
000008  015b              LSLS     r3,r3,#5
00000a  d408              BMI      |L22.30|
;;;526      {
;;;527        transmit_mailbox = 0;
;;;528      }
;;;529      else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
00000c  6890              LDR      r0,[r2,#8]
00000e  0100              LSLS     r0,r0,#4
000010  d501              BPL      |L22.22|
;;;530      {
;;;531        transmit_mailbox = 1;
000012  2001              MOVS     r0,#1
000014  e003              B        |L22.30|
                  |L22.22|
;;;532      }
;;;533      else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
000016  6890              LDR      r0,[r2,#8]
000018  00c0              LSLS     r0,r0,#3
00001a  d531              BPL      |L22.128|
;;;534      {
;;;535        transmit_mailbox = 2;
00001c  2002              MOVS     r0,#2
                  |L22.30|
;;;536      }
;;;537      else
;;;538      {
;;;539        transmit_mailbox = CAN_TxStatus_NoMailBox;
;;;540      }
;;;541    
;;;542      if (transmit_mailbox != CAN_TxStatus_NoMailBox)
;;;543      {
;;;544        /* Set up the Id */
;;;545        CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
00001e  eb021200          ADD      r2,r2,r0,LSL #4
000022  f8d23180          LDR      r3,[r2,#0x180]
000026  f0030301          AND      r3,r3,#1
00002a  f8c23180          STR      r3,[r2,#0x180]
;;;546        if (TxMessage->IDE == CAN_Id_Standard)
00002e  7a0b              LDRB     r3,[r1,#8]
000030  b343              CBZ      r3,|L22.132|
;;;547        {
;;;548          assert_param(IS_CAN_STDID(TxMessage->StdId));  
;;;549          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
;;;550                                                      TxMessage->RTR);
;;;551        }
;;;552        else
;;;553        {
;;;554          assert_param(IS_CAN_EXTID(TxMessage->ExtId));
;;;555          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
000032  f8d24180          LDR      r4,[r2,#0x180]
000036  684d              LDR      r5,[r1,#4]
000038  431c              ORRS     r4,r4,r3
00003a  7a4b              LDRB     r3,[r1,#9]
00003c  ea4303c5          ORR      r3,r3,r5,LSL #3
000040  431c              ORRS     r4,r4,r3
000042  f8c24180          STR      r4,[r2,#0x180]
                  |L22.70|
;;;556                                                      TxMessage->IDE | \
;;;557                                                      TxMessage->RTR);
;;;558        }
;;;559        
;;;560        /* Set up the DLC */
;;;561        TxMessage->DLC &= (uint8_t)0x0000000F;
000046  7a8b              LDRB     r3,[r1,#0xa]
000048  f50272c0          ADD      r2,r2,#0x180
00004c  f003030f          AND      r3,r3,#0xf
000050  728b              STRB     r3,[r1,#0xa]
;;;562        CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
000052  6853              LDR      r3,[r2,#4]
000054  f023030f          BIC      r3,r3,#0xf
000058  6053              STR      r3,[r2,#4]
;;;563        CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
00005a  6853              LDR      r3,[r2,#4]
00005c  7a8c              LDRB     r4,[r1,#0xa]
00005e  4323              ORRS     r3,r3,r4
000060  6053              STR      r3,[r2,#4]
;;;564    
;;;565        /* Set up the data field */
;;;566        CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
000062  7acb              LDRB     r3,[r1,#0xb]
000064  68cc              LDR      r4,[r1,#0xc]
000066  ea432304          ORR      r3,r3,r4,LSL #8
00006a  6093              STR      r3,[r2,#8]
;;;567                                                 ((uint32_t)TxMessage->Data[2] << 16) |
;;;568                                                 ((uint32_t)TxMessage->Data[1] << 8) | 
;;;569                                                 ((uint32_t)TxMessage->Data[0]));
;;;570        CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
00006c  7bcb              LDRB     r3,[r1,#0xf]
00006e  6909              LDR      r1,[r1,#0x10]
000070  ea432101          ORR      r1,r3,r1,LSL #8
000074  60d1              STR      r1,[r2,#0xc]
;;;571                                                 ((uint32_t)TxMessage->Data[6] << 16) |
;;;572                                                 ((uint32_t)TxMessage->Data[5] << 8) |
;;;573                                                 ((uint32_t)TxMessage->Data[4]));
;;;574        /* Request transmission */
;;;575        CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
000076  6811              LDR      r1,[r2,#0]
000078  f0410101          ORR      r1,r1,#1
00007c  6011              STR      r1,[r2,#0]
;;;576      }
;;;577      return transmit_mailbox;
;;;578    }
00007e  bd30              POP      {r4,r5,pc}
                  |L22.128|
000080  2004              MOVS     r0,#4                 ;539
000082  bd30              POP      {r4,r5,pc}
                  |L22.132|
000084  f8d23180          LDR      r3,[r2,#0x180]        ;549
000088  7a4c              LDRB     r4,[r1,#9]            ;549
00008a  4323              ORRS     r3,r3,r4              ;549
00008c  880c              LDRH     r4,[r1,#0]            ;549
00008e  ea435344          ORR      r3,r3,r4,LSL #21      ;549
000092  f8c23180          STR      r3,[r2,#0x180]        ;549
000096  e7d6              B        |L22.70|
;;;579    
                          ENDP


                          AREA ||i.CAN_TransmitStatus||, CODE, READONLY, ALIGN=2

                  CAN_TransmitStatus PROC
;;;588      */
;;;589    uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
000000  2200              MOVS     r2,#0
;;;590    {
000002  b121              CBZ      r1,|L23.14|
;;;591      uint32_t state = 0;
;;;592    
;;;593      /* Check the parameters */
;;;594      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;595      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;596     
;;;597      switch (TransmitMailbox)
000004  2901              CMP      r1,#1
000006  d005              BEQ      |L23.20|
000008  2902              CMP      r1,#2
00000a  d106              BNE      |L23.26|
00000c  e012              B        |L23.52|
                  |L23.14|
;;;598      {
;;;599        case (CAN_TXMAILBOX_0): 
;;;600          state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
00000e  6882              LDR      r2,[r0,#8]
000010  4812              LDR      r0,|L23.92|
;;;601          break;
000012  e001              B        |L23.24|
                  |L23.20|
;;;602        case (CAN_TXMAILBOX_1): 
;;;603          state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
000014  6882              LDR      r2,[r0,#8]
000016  4812              LDR      r0,|L23.96|
                  |L23.24|
000018  4002              ANDS     r2,r2,r0              ;600
                  |L23.26|
;;;604          break;
;;;605        case (CAN_TXMAILBOX_2): 
;;;606          state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
;;;607          break;
;;;608        default:
;;;609          state = CAN_TxStatus_Failed;
;;;610          break;
;;;611      }
;;;612      switch (state)
00001a  4912              LDR      r1,|L23.100|
00001c  1a50              SUBS     r0,r2,r1
00001e  428a              CMP      r2,r1
000020  d014              BEQ      |L23.76|
000022  dc0a              BGT      |L23.58|
000024  b1a2              CBZ      r2,|L23.80|
000026  f06f6080          MVN      r0,#0x4000000
00002a  1810              ADDS     r0,r2,r0
00002c  d013              BEQ      |L23.86|
00002e  2802              CMP      r0,#2
000030  d10c              BNE      |L23.76|
000032  e00f              B        |L23.84|
                  |L23.52|
000034  6882              LDR      r2,[r0,#8]            ;606
000036  480c              LDR      r0,|L23.104|
000038  e7ee              B        |L23.24|
                  |L23.58|
00003a  f5b07f00          CMP      r0,#0x200
00003e  d009              BEQ      |L23.84|
000040  490a              LDR      r1,|L23.108|
000042  1840              ADDS     r0,r0,r1
000044  d007              BEQ      |L23.86|
000046  f5b03f00          CMP      r0,#0x20000
00004a  d003              BEQ      |L23.84|
                  |L23.76|
;;;613      {
;;;614          /* transmit pending  */
;;;615        case (0x0): state = CAN_TxStatus_Pending;
;;;616          break;
;;;617          /* transmit failed  */
;;;618         case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
;;;619          break;
;;;620         case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
00004c  2000              MOVS     r0,#0
;;;621          break;
00004e  e002              B        |L23.86|
                  |L23.80|
000050  2002              MOVS     r0,#2                 ;615
000052  e000              B        |L23.86|
                  |L23.84|
;;;622         case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
;;;623          break;
;;;624          /* transmit succeeded  */
;;;625        case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
000054  2001              MOVS     r0,#1
                  |L23.86|
;;;626          break;
;;;627        case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
;;;628          break;
;;;629        case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
;;;630          break;
;;;631        default: state = CAN_TxStatus_Failed;
;;;632          break;
;;;633      }
;;;634      return (uint8_t) state;
000056  b2c0              UXTB     r0,r0
;;;635    }
000058  4770              BX       lr
;;;636    
                          ENDP

00005a  0000              DCW      0x0000
                  |L23.92|
                          DCD      0x04000003
                  |L23.96|
                          DCD      0x08000300
                  |L23.100|
                          DCD      0x08000100
                  |L23.104|
                          DCD      0x10030000
                  |L23.108|
                          DCD      0xf7ff0100

                          AREA ||i.CAN_WakeUp||, CODE, READONLY, ALIGN=1

                  CAN_WakeUp PROC
;;;881      */
;;;882    uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
000000  6803              LDR      r3,[r0,#0]
;;;883    {
;;;884      uint32_t wait_slak = SLAK_TIMEOUT;
000002  f64f71ff          MOV      r1,#0xffff
;;;885      uint8_t wakeupstatus = CAN_WakeUp_Failed;
000006  2200              MOVS     r2,#0
;;;886      
;;;887      /* Check the parameters */
;;;888      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;889        
;;;890      /* Wake up request */
;;;891      CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
000008  f0230302          BIC      r3,r3,#2
00000c  6003              STR      r3,[r0,#0]
00000e  e001              B        |L24.20|
                  |L24.16|
;;;892        
;;;893      /* Sleep mode status */
;;;894      while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
;;;895      {
;;;896       wait_slak--;
000010  f1a10101          SUB      r1,r1,#1
                  |L24.20|
000014  6843              LDR      r3,[r0,#4]            ;894
000016  079b              LSLS     r3,r3,#30             ;894
000018  d501              BPL      |L24.30|
00001a  2900              CMP      r1,#0                 ;894
00001c  d1f8              BNE      |L24.16|
                  |L24.30|
;;;897      }
;;;898      if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
00001e  6840              LDR      r0,[r0,#4]
000020  0780              LSLS     r0,r0,#30
000022  d400              BMI      |L24.38|
;;;899      {
;;;900       /* wake up done : Sleep mode exited */
;;;901        wakeupstatus = CAN_WakeUp_Ok;
000024  2201              MOVS     r2,#1
                  |L24.38|
;;;902      }
;;;903      /* return wakeup status */
;;;904      return (uint8_t)wakeupstatus;
000026  4610              MOV      r0,r2
;;;905    }
000028  4770              BX       lr
;;;906    
                          ENDP


                          AREA ||i.CheckITStatus||, CODE, READONLY, ALIGN=1

                  CheckITStatus PROC
;;;1384     */
;;;1385   static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
000000  4602              MOV      r2,r0
;;;1386   {
;;;1387     ITStatus pendingbitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1388     
;;;1389     if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
000004  420a              TST      r2,r1
000006  d000              BEQ      |L25.10|
;;;1390     {
;;;1391       /* CAN_IT is set */
;;;1392       pendingbitstatus = SET;
000008  2001              MOVS     r0,#1
                  |L25.10|
;;;1393     }
;;;1394     else
;;;1395     {
;;;1396       /* CAN_IT is reset */
;;;1397       pendingbitstatus = RESET;
;;;1398     }
;;;1399     return pendingbitstatus;
;;;1400   }
00000a  4770              BX       lr
;;;1401   
                          ENDP

