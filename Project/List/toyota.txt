; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\toyota.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\toyota.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\toyota.crf ..\PAL\vehicles\toyota.c]
                          THUMB

                          AREA ||i.get_real_offset||, CODE, READONLY, ALIGN=2

                  get_real_offset PROC
;;;1015   
;;;1016   uint8_t get_real_offset(uint8_t id, uint8_t offset)
000000  b570              PUSH     {r4-r6,lr}
;;;1017   {
000002  4604              MOV      r4,r0
;;;1018       uint8_t i, j;
;;;1019       uint8_t off = 0;
000004  2000              MOVS     r0,#0
;;;1020   
;;;1021       for(i = 0; i < SUPPORT_MAX_ITEMS; i++) {
;;;1022           if(id == mToyotaSupportList.items[i].sub_id) {
000006  4d0d              LDR      r5,|L1.60|
000008  4602              MOV      r2,r0                 ;1021
00000a  bf00              NOP      
                  |L1.12|
00000c  eb021342          ADD      r3,r2,r2,LSL #5
000010  eb050343          ADD      r3,r5,r3,LSL #1
000014  785e              LDRB     r6,[r3,#1]
000016  42a6              CMP      r6,r4
000018  d10b              BNE      |L1.50|
;;;1023               for(j = 0; j < offset; j++) {
00001a  2200              MOVS     r2,#0
00001c  e006              B        |L1.44|
                  |L1.30|
;;;1024                   if(mToyotaSupportList.items[i].support_raw_bytes[j] == 0x00)
00001e  189c              ADDS     r4,r3,r2
000020  78e4              LDRB     r4,[r4,#3]
000022  b90c              CBNZ     r4,|L1.40|
;;;1025                       off ++;
000024  1c40              ADDS     r0,r0,#1
000026  b2c0              UXTB     r0,r0
                  |L1.40|
000028  1c52              ADDS     r2,r2,#1              ;1023
00002a  b2d2              UXTB     r2,r2                 ;1023
                  |L1.44|
00002c  428a              CMP      r2,r1                 ;1023
00002e  d3f6              BCC      |L1.30|
;;;1026               }
;;;1027               break;
;;;1028           }
;;;1029       }
;;;1030   
;;;1031       return off;
;;;1032   }
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  1c52              ADDS     r2,r2,#1              ;1021
000034  b2d2              UXTB     r2,r2                 ;1021
000036  2a20              CMP      r2,#0x20              ;1021
000038  d3e8              BCC      |L1.12|
00003a  bd70              POP      {r4-r6,pc}
;;;1033   
                          ENDP

                  |L1.60|
                          DCD      ||.bss||+0x140

                          AREA ||i.toyota_check_fault_code||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  toyota_check_fault_code PROC
;;;1375   
;;;1376   uint32_t *toyota_check_fault_code(uint8_t id, uint8_t *len)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1377   {
000004  460e              MOV      r6,r1
000006  4604              MOV      r4,r0
;;;1378       uint8_t i, j;
;;;1379       int8_t ret;
;;;1380       uint8_t valid_len;
;;;1381       uint8_t valid_index = 0;
;;;1382       uint8_t data_type;
;;;1383       uint8_t offset;
;;;1384       uint8_t l_bytes = 0;
;;;1385       uint8_t l_packages = 0;
;;;1386       uint8_t sub_cmd = 0;
;;;1387       uint16_t rxId;
;;;1388       uint8_t hasSubCmd = FALSE;
000008  2500              MOVS     r5,#0
;;;1389       uint8_t shift = 3;
00000a  2703              MOVS     r7,#3
;;;1390   
;;;1391       CanRxMsg *rxMsg;
;;;1392   
;;;1393       memset(toyota_fault_data, 0x00, 100);
00000c  2164              MOVS     r1,#0x64
00000e  484d              LDR      r0,|L2.324|
000010  f7fffffe          BL       __aeabi_memclr4
;;;1394       memset(toyota_code_val, 0x00, FAULT_CODE_MAX_SIZE);
000014  484b              LDR      r0,|L2.324|
000016  210a              MOVS     r1,#0xa
000018  3828              SUBS     r0,r0,#0x28
00001a  f7fffffe          BL       __aeabi_memclr4
;;;1395   
;;;1396       rxId = toyota_fault_code[id].StdId + 8;
00001e  484a              LDR      r0,|L2.328|
000020  eb040184          ADD      r1,r4,r4,LSL #2
000024  f8302021          LDRH     r2,[r0,r1,LSL #2]
;;;1397       if(toyota_fault_code[id].Data[0] > 0x10) {
000028  eb000181          ADD      r1,r0,r1,LSL #2
00002c  3208              ADDS     r2,r2,#8              ;1396
00002e  7ac8              LDRB     r0,[r1,#0xb]
000030  b292              UXTH     r2,r2                 ;1396
000032  4691              MOV      r9,r2                 ;1396
000034  2810              CMP      r0,#0x10
000036  d900              BLS      |L2.58|
;;;1398           hasSubCmd = TRUE;
000038  2501              MOVS     r5,#1
                  |L2.58|
;;;1399       }
;;;1400       //printf("%s: txId = 0x%04x, rxId = 0x%04x\r\n", __func__,
;;;1401       //        toyota_fault_code[id].StdId, rxId);
;;;1402       ret = flexcan_ioctl(DIR_BI, &toyota_fault_code[id], rxId, 1);
00003a  2301              MOVS     r3,#1
00003c  2003              MOVS     r0,#3
00003e  f7fffffe          BL       flexcan_ioctl
000042  f04f0800          MOV      r8,#0
;;;1403       if(ret > 0) {
000046  2800              CMP      r0,#0
000048  dd54              BLE      |L2.244|
;;;1404           rxMsg = flexcan_dump();
00004a  f7fffffe          BL       flexcan_dump
;;;1405           //check if the receive msg type is needed
;;;1406           //check if this recv package is a long package
;;;1407           if(rxMsg->Data[0] == 0x10) {
00004e  7ac1              LDRB     r1,[r0,#0xb]
000050  4c3c              LDR      r4,|L2.324|
000052  2910              CMP      r1,#0x10
000054  d003              BEQ      |L2.94|
;;;1408               l_bytes = rxMsg->Data[1];
;;;1409               l_packages = 0;
;;;1410               l_packages = (l_bytes - 6) / 7;
;;;1411               if((l_bytes - 6) % 7 > 0) {
;;;1412                   l_packages += 1;
;;;1413               }
;;;1414               for(i = 3; i < 8; i++) {
;;;1415                   toyota_fault_data[i - 3] = rxMsg->Data[i];
;;;1416               }
;;;1417               //send continue package
;;;1418               ret = flexcan_ioctl(DIR_BI, &toyota_continue_package,
;;;1419                       rxId, l_packages);
;;;1420               if(ret == l_packages) {
;;;1421                   for(i = 0;i < ret; i++) {
;;;1422                       rxMsg = flexcan_dump();
;;;1423                       for(j = 0; j < 7; j++) {
;;;1424                           toyota_fault_data[5 + i * 7 + j] = rxMsg->Data[j + 1];
;;;1425                       }
;;;1426                   }
;;;1427               } else {
;;;1428                   loge("error: ret = %d\r\n", ret);
;;;1429                   *len = 0;
;;;1430                   return NULL;
;;;1431               }
;;;1432           }
;;;1433           //short package
;;;1434           else {
;;;1435               if(hasSubCmd) {
000056  2d00              CMP      r5,#0
000058  d051              BEQ      |L2.254|
;;;1436                   shift = 3;
;;;1437               } else {
;;;1438                   shift = 2;
;;;1439               }
;;;1440               //shift the valid data to head
;;;1441               for(i = shift; i < 8; i++) {
00005a  463d              MOV      r5,r7
00005c  e051              B        |L2.258|
                  |L2.94|
00005e  7b01              LDRB     r1,[r0,#0xc]          ;1408
000060  2207              MOVS     r2,#7                 ;1410
000062  1f89              SUBS     r1,r1,#6              ;1410
000064  fb91f3f2          SDIV     r3,r1,r2              ;1410
000068  fb021113          MLS      r1,r2,r3,r1           ;1411
00006c  b2dd              UXTB     r5,r3                 ;1410
00006e  2900              CMP      r1,#0                 ;1411
000070  dd01              BLE      |L2.118|
000072  1c6d              ADDS     r5,r5,#1              ;1412
000074  b2ed              UXTB     r5,r5                 ;1412
                  |L2.118|
000076  2103              MOVS     r1,#3                 ;1414
                  |L2.120|
000078  1842              ADDS     r2,r0,r1              ;1415
00007a  1863              ADDS     r3,r4,r1              ;1415
00007c  7ad2              LDRB     r2,[r2,#0xb]          ;1415
00007e  f8032c03          STRB     r2,[r3,#-3]           ;1415
000082  1c49              ADDS     r1,r1,#1              ;1414
000084  b2c9              UXTB     r1,r1                 ;1414
000086  2908              CMP      r1,#8                 ;1414
000088  d3f6              BCC      |L2.120|
00008a  462b              MOV      r3,r5                 ;1418
00008c  464a              MOV      r2,r9                 ;1418
00008e  492f              LDR      r1,|L2.332|
000090  2003              MOVS     r0,#3                 ;1418
000092  f7fffffe          BL       flexcan_ioctl
000096  4607              MOV      r7,r0                 ;1418
000098  42a8              CMP      r0,r5                 ;1420
00009a  d117              BNE      |L2.204|
00009c  2500              MOVS     r5,#0                 ;1421
00009e  e012              B        |L2.198|
                  |L2.160|
0000a0  f7fffffe          BL       flexcan_dump
0000a4  4601              MOV      r1,r0                 ;1422
0000a6  2000              MOVS     r0,#0                 ;1423
0000a8  ebc502c5          RSB      r2,r5,r5,LSL #3       ;1424
                  |L2.172|
0000ac  180b              ADDS     r3,r1,r0              ;1424
0000ae  eb020c00          ADD      r12,r2,r0             ;1424
0000b2  44a4              ADD      r12,r12,r4            ;1424
0000b4  7b1b              LDRB     r3,[r3,#0xc]          ;1424
0000b6  f88c3005          STRB     r3,[r12,#5]           ;1424
0000ba  1c40              ADDS     r0,r0,#1              ;1423
0000bc  b2c0              UXTB     r0,r0                 ;1423
0000be  2807              CMP      r0,#7                 ;1423
0000c0  d3f4              BCC      |L2.172|
0000c2  1c6d              ADDS     r5,r5,#1              ;1421
0000c4  b2ed              UXTB     r5,r5                 ;1421
                  |L2.198|
0000c6  42bd              CMP      r5,r7                 ;1421
0000c8  dbea              BLT      |L2.160|
0000ca  e022              B        |L2.274|
                  |L2.204|
0000cc  4668              MOV      r0,sp                 ;1428
0000ce  f7fffffe          BL       OSTimeGet
0000d2  491f              LDR      r1,|L2.336|
0000d4  7809              LDRB     r1,[r1,#0]            ;1428  ; DEBUG_MODE
0000d6  07c9              LSLS     r1,r1,#31             ;1428
0000d8  d00c              BEQ      |L2.244|
0000da  f2413288          MOV      r2,#0x1388            ;1428
0000de  fbb0f1f2          UDIV     r1,r0,r2              ;1428
0000e2  fb020011          MLS      r0,r2,r1,r0           ;1428
0000e6  2205              MOVS     r2,#5                 ;1428
0000e8  fbb0f2f2          UDIV     r2,r0,r2              ;1428
0000ec  463b              MOV      r3,r7                 ;1428
0000ee  a019              ADR      r0,|L2.340|
0000f0  f7fffffe          BL       __2printf
                  |L2.244|
;;;1442                   toyota_fault_data[i - shift] = rxMsg->Data[i];
;;;1443               }
;;;1444           }
;;;1445           //parse fault code
;;;1446           *len = toyota_fault_data[0];
;;;1447           for(i = 0; i < *len; i++) {
;;;1448               toyota_code_val[i] =
;;;1449                   (toyota_fault_data[i * 3 + 1] << 8) | (toyota_fault_data[i * 3 + 2]);
;;;1450           }
;;;1451           return toyota_code_val;
;;;1452       } else {
;;;1453           *len = 0;
0000f4  f8868000          STRB     r8,[r6,#0]
;;;1454           return NULL;
0000f8  2000              MOVS     r0,#0
                  |L2.250|
;;;1455       }
;;;1456   }
0000fa  e8bd83f8          POP      {r3-r9,pc}
                  |L2.254|
0000fe  2502              MOVS     r5,#2                 ;1438
000100  462f              MOV      r7,r5                 ;1438
                  |L2.258|
000102  1941              ADDS     r1,r0,r5              ;1442
000104  1bea              SUBS     r2,r5,r7              ;1442
000106  7ac9              LDRB     r1,[r1,#0xb]          ;1442
000108  54a1              STRB     r1,[r4,r2]            ;1442
00010a  1c6d              ADDS     r5,r5,#1              ;1441
00010c  b2ed              UXTB     r5,r5                 ;1441
00010e  2d08              CMP      r5,#8                 ;1441
000110  d3f7              BCC      |L2.258|
                  |L2.274|
000112  7820              LDRB     r0,[r4,#0]            ;1446  ; toyota_fault_data
000114  7030              STRB     r0,[r6,#0]            ;1446
000116  4a0b              LDR      r2,|L2.324|
000118  2000              MOVS     r0,#0                 ;1447
00011a  3a28              SUBS     r2,r2,#0x28           ;1394
00011c  e00b              B        |L2.310|
00011e  bf00              NOP                            ;1448
                  |L2.288|
000120  eb000140          ADD      r1,r0,r0,LSL #1       ;1448
000124  4421              ADD      r1,r1,r4              ;1448
000126  788b              LDRB     r3,[r1,#2]            ;1448
000128  7849              LDRB     r1,[r1,#1]            ;1448
00012a  ea432101          ORR      r1,r3,r1,LSL #8       ;1448
00012e  f8421020          STR      r1,[r2,r0,LSL #2]     ;1448
000132  1c40              ADDS     r0,r0,#1              ;1447
000134  b2c0              UXTB     r0,r0                 ;1447
                  |L2.310|
000136  7831              LDRB     r1,[r6,#0]            ;1447
000138  4281              CMP      r1,r0                 ;1447
00013a  d8f1              BHI      |L2.288|
00013c  4801              LDR      r0,|L2.324|
00013e  3828              SUBS     r0,r0,#0x28           ;1451
000140  e7db              B        |L2.250|
                          ENDP

000142  0000              DCW      0x0000
                  |L2.324|
                          DCD      ||.bss||+0xdc
                  |L2.328|
                          DCD      ||.data||+0x604
                  |L2.332|
                          DCD      ||.data||+0x168
                  |L2.336|
                          DCD      DEBUG_MODE
                  |L2.340|
000154  5b253035          DCB      "[%05d.%03d/E]: error: ret = %d\r\n\r\n",0
000158  642e2530
00015c  33642f45
000160  5d3a2065
000164  72726f72
000168  3a207265
00016c  74203d20
000170  25640d0a
000174  0d0a00  
000177  00                DCB      0

                          AREA ||i.toyota_clear_fault_code||, CODE, READONLY, ALIGN=2

                  toyota_clear_fault_code PROC
;;;1364   
;;;1365   void toyota_clear_fault_code(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1366   {
;;;1367       uint8_t i;
;;;1368   
;;;1369       for(i = 0; i < FAULT_CODE_MAX_SIZE; i++) {
;;;1370           flexcan_send_frame(&toyota_clear_fault[i]);
000002  4d08              LDR      r5,|L3.36|
000004  2400              MOVS     r4,#0                 ;1369
000006  bf00              NOP      
                  |L3.8|
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  eb050080          ADD      r0,r5,r0,LSL #2
000010  f7fffffe          BL       flexcan_send_frame
;;;1371           xdelay(200);
000014  20c8              MOVS     r0,#0xc8
000016  f7fffffe          BL       xdelay
00001a  1c64              ADDS     r4,r4,#1              ;1369
00001c  b2e4              UXTB     r4,r4                 ;1369
00001e  2c0a              CMP      r4,#0xa               ;1369
000020  d3f2              BCC      |L3.8|
;;;1372       }
;;;1373   }
000022  bd70              POP      {r4-r6,pc}
;;;1374   
                          ENDP

                  |L3.36|
                          DCD      ||.data||+0x6cc

                          AREA ||i.toyota_ctrl_door||, CODE, READONLY, ALIGN=2

                  toyota_ctrl_door PROC
;;;1264   
;;;1265   void toyota_ctrl_door(uint8_t state)
000000  b570              PUSH     {r4-r6,lr}
;;;1266   {
;;;1267       uint8_t i;
;;;1268   
;;;1269       for(i = 0; i < 2; i++) {
;;;1270           flexcan_send_frame(&toyota_wakeup[i]);
000002  4e0c              LDR      r6,|L4.52|
000004  4605              MOV      r5,r0                 ;1266
000006  2400              MOVS     r4,#0                 ;1269
                  |L4.8|
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  eb060080          ADD      r0,r6,r0,LSL #2
000010  f7fffffe          BL       flexcan_send_frame
;;;1271           xdelay_ms(200);
000014  20c8              MOVS     r0,#0xc8
000016  f7fffffe          BL       xdelay_ms
00001a  1c64              ADDS     r4,r4,#1              ;1269
00001c  b2e4              UXTB     r4,r4                 ;1269
00001e  2c02              CMP      r4,#2                 ;1269
000020  d3f2              BCC      |L4.8|
;;;1272       }
;;;1273   
;;;1274       if(state) {
000022  b10d              CBZ      r5,|L4.40|
;;;1275           flexcan_send_frame(&toyota_door_on);
000024  4804              LDR      r0,|L4.56|
000026  e001              B        |L4.44|
                  |L4.40|
;;;1276       } else {
;;;1277           flexcan_send_frame(&toyota_door_off);
000028  4803              LDR      r0,|L4.56|
00002a  3014              ADDS     r0,r0,#0x14
                  |L4.44|
00002c  e8bd4070          POP      {r4-r6,lr}
000030  f7ffbffe          B.W      flexcan_send_frame
;;;1278       }
;;;1279   }
;;;1280   
                          ENDP

                  |L4.52|
                          DCD      ||.data||+0x7e4
                  |L4.56|
                          DCD      ||.data||+0x28

                          AREA ||i.toyota_ctrl_findcar||, CODE, READONLY, ALIGN=2

                  toyota_ctrl_findcar PROC
;;;1346   
;;;1347   void toyota_ctrl_findcar(uint8_t state)
000000  b570              PUSH     {r4-r6,lr}
;;;1348   {
;;;1349       uint8_t i = 0;
;;;1350       for(i = 0; i < 2; i++) {
;;;1351           flexcan_send_frame(&toyota_wakeup[i]);
000002  4d16              LDR      r5,|L5.92|
000004  2400              MOVS     r4,#0                 ;1349
000006  bf00              NOP      
                  |L5.8|
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  eb050080          ADD      r0,r5,r0,LSL #2
000010  f7fffffe          BL       flexcan_send_frame
;;;1352           xdelay_ms(200);
000014  20c8              MOVS     r0,#0xc8
000016  f7fffffe          BL       xdelay_ms
00001a  1c64              ADDS     r4,r4,#1              ;1350
00001c  b2e4              UXTB     r4,r4                 ;1350
00001e  2c02              CMP      r4,#2                 ;1350
000020  d3f2              BCC      |L5.8|
;;;1353       }
;;;1354   
;;;1355       flexcan_send_frame(&toyota_findcar[0]);
000022  480f              LDR      r0,|L5.96|
000024  f7fffffe          BL       flexcan_send_frame
;;;1356       xdelay_ms(100);
000028  2064              MOVS     r0,#0x64
00002a  f7fffffe          BL       xdelay_ms
;;;1357       flexcan_send_frame(&toyota_lamp_on);
00002e  480d              LDR      r0,|L5.100|
000030  f7fffffe          BL       flexcan_send_frame
;;;1358       xdelay(3);
000034  2003              MOVS     r0,#3
000036  f7fffffe          BL       xdelay
;;;1359       flexcan_send_frame(&toyota_findcar[1]);
00003a  4809              LDR      r0,|L5.96|
00003c  3014              ADDS     r0,r0,#0x14
00003e  f7fffffe          BL       flexcan_send_frame
;;;1360       xdelay_ms(100);
000042  2064              MOVS     r0,#0x64
000044  f7fffffe          BL       xdelay_ms
;;;1361       flexcan_send_frame(&toyota_lamp_off);
000048  4806              LDR      r0,|L5.100|
00004a  3014              ADDS     r0,r0,#0x14
00004c  f7fffffe          BL       flexcan_send_frame
;;;1362       xdelay(3);
000050  e8bd4070          POP      {r4-r6,lr}
000054  2003              MOVS     r0,#3
000056  f7ffbffe          B.W      xdelay
;;;1363   }
;;;1364   
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      ||.data||+0x7e4
                  |L5.96|
                          DCD      ||.data||+0x140
                  |L5.100|
                          DCD      ||.data||

                          AREA ||i.toyota_ctrl_light||, CODE, READONLY, ALIGN=2

                  toyota_ctrl_light PROC
;;;1280   
;;;1281   void toyota_ctrl_light(uint8_t state)
000000  b570              PUSH     {r4-r6,lr}
;;;1282   {
;;;1283       uint8_t i;
;;;1284   
;;;1285       for(i = 0; i < 2; i++) {
;;;1286           flexcan_send_frame(&toyota_wakeup[i]);
000002  4e0c              LDR      r6,|L6.52|
000004  4605              MOV      r5,r0                 ;1282
000006  2400              MOVS     r4,#0                 ;1285
                  |L6.8|
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  eb060080          ADD      r0,r6,r0,LSL #2
000010  f7fffffe          BL       flexcan_send_frame
;;;1287           xdelay_ms(200);
000014  20c8              MOVS     r0,#0xc8
000016  f7fffffe          BL       xdelay_ms
00001a  1c64              ADDS     r4,r4,#1              ;1285
00001c  b2e4              UXTB     r4,r4                 ;1285
00001e  2c02              CMP      r4,#2                 ;1285
000020  d3f2              BCC      |L6.8|
;;;1288       }
;;;1289       if(state) {
000022  b10d              CBZ      r5,|L6.40|
;;;1290           flexcan_send_frame(&toyota_lamp_on);
000024  4804              LDR      r0,|L6.56|
000026  e001              B        |L6.44|
                  |L6.40|
;;;1291       } else {
;;;1292           flexcan_send_frame(&toyota_lamp_off);
000028  4803              LDR      r0,|L6.56|
00002a  3014              ADDS     r0,r0,#0x14
                  |L6.44|
00002c  e8bd4070          POP      {r4-r6,lr}
000030  f7ffbffe          B.W      flexcan_send_frame
;;;1293       }
;;;1294   }
;;;1295   
                          ENDP

                  |L6.52|
                          DCD      ||.data||+0x7e4
                  |L6.56|
                          DCD      ||.data||

                          AREA ||i.toyota_ctrl_sunroof||, CODE, READONLY, ALIGN=2

                  toyota_ctrl_sunroof PROC
;;;1295   
;;;1296   void toyota_ctrl_sunroof(uint8_t state)
000000  b570              PUSH     {r4-r6,lr}
;;;1297   {
;;;1298       uint8_t i;
;;;1299   
;;;1300       for(i = 0; i < 2; i++) {
;;;1301           flexcan_send_frame(&toyota_wakeup[i]);
000002  4e2d              LDR      r6,|L7.184|
000004  4605              MOV      r5,r0                 ;1297
000006  2400              MOVS     r4,#0                 ;1300
                  |L7.8|
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  eb060080          ADD      r0,r6,r0,LSL #2
000010  f7fffffe          BL       flexcan_send_frame
;;;1302           xdelay_ms(200);
000014  20c8              MOVS     r0,#0xc8
000016  f7fffffe          BL       xdelay_ms
00001a  1c64              ADDS     r4,r4,#1              ;1300
00001c  b2e4              UXTB     r4,r4                 ;1300
00001e  2c02              CMP      r4,#2                 ;1300
000020  d3f2              BCC      |L7.8|
;;;1303       }
;;;1304       if(state) {
000022  b1fd              CBZ      r5,|L7.100|
;;;1305           flexcan_send_frame(&toyota_sunroof_on);
000024  4825              LDR      r0,|L7.188|
000026  f7fffffe          BL       flexcan_send_frame
;;;1306           xdelay(1);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       xdelay
;;;1307           flexcan_send_frame(&toyota_sunroof_on);
000030  4822              LDR      r0,|L7.188|
000032  f7fffffe          BL       flexcan_send_frame
;;;1308           xdelay(1);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       xdelay
;;;1309           flexcan_send_frame(&toyota_sunroof_on);
00003c  481f              LDR      r0,|L7.188|
00003e  f7fffffe          BL       flexcan_send_frame
;;;1310           xdelay(1);
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       xdelay
;;;1311           flexcan_send_frame(&toyota_sunroof_on);
000048  481c              LDR      r0,|L7.188|
00004a  f7fffffe          BL       flexcan_send_frame
;;;1312           xdelay(1);
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       xdelay
;;;1313           flexcan_send_frame(&toyota_sunroof_on);
000054  4819              LDR      r0,|L7.188|
000056  f7fffffe          BL       flexcan_send_frame
;;;1314           xdelay(1);
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       xdelay
;;;1315           flexcan_send_frame(&toyota_sunroof_on);
000060  4816              LDR      r0,|L7.188|
000062  e024              B        |L7.174|
                  |L7.100|
;;;1316       } else {
;;;1317           flexcan_send_frame(&toyota_sunroof_off);
000064  4815              LDR      r0,|L7.188|
000066  3014              ADDS     r0,r0,#0x14
000068  f7fffffe          BL       flexcan_send_frame
;;;1318           xdelay(1);
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       xdelay
;;;1319           flexcan_send_frame(&toyota_sunroof_off);
000072  4812              LDR      r0,|L7.188|
000074  3014              ADDS     r0,r0,#0x14
000076  f7fffffe          BL       flexcan_send_frame
;;;1320           xdelay(1);
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       xdelay
;;;1321           flexcan_send_frame(&toyota_sunroof_off);
000080  480e              LDR      r0,|L7.188|
000082  3014              ADDS     r0,r0,#0x14
000084  f7fffffe          BL       flexcan_send_frame
;;;1322           xdelay(1);
000088  2001              MOVS     r0,#1
00008a  f7fffffe          BL       xdelay
;;;1323           flexcan_send_frame(&toyota_sunroof_off);
00008e  480b              LDR      r0,|L7.188|
000090  3014              ADDS     r0,r0,#0x14
000092  f7fffffe          BL       flexcan_send_frame
;;;1324           xdelay(1);
000096  2001              MOVS     r0,#1
000098  f7fffffe          BL       xdelay
;;;1325           flexcan_send_frame(&toyota_sunroof_off);
00009c  4807              LDR      r0,|L7.188|
00009e  3014              ADDS     r0,r0,#0x14
0000a0  f7fffffe          BL       flexcan_send_frame
;;;1326           xdelay(1);
0000a4  2001              MOVS     r0,#1
0000a6  f7fffffe          BL       xdelay
;;;1327           flexcan_send_frame(&toyota_sunroof_off);
0000aa  4804              LDR      r0,|L7.188|
0000ac  3014              ADDS     r0,r0,#0x14
                  |L7.174|
0000ae  e8bd4070          POP      {r4-r6,lr}
0000b2  f7ffbffe          B.W      flexcan_send_frame
;;;1328       }
;;;1329   }
;;;1330   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L7.184|
                          DCD      ||.data||+0x7e4
                  |L7.188|
                          DCD      ||.data||+0x78

                          AREA ||i.toyota_ctrl_trunk||, CODE, READONLY, ALIGN=2

                  toyota_ctrl_trunk PROC
;;;1330   
;;;1331   void toyota_ctrl_trunk(uint8_t state)
000000  b570              PUSH     {r4-r6,lr}
;;;1332   {
;;;1333       uint8_t i;
;;;1334   
;;;1335       for(i = 0; i < 2; i++) {
;;;1336           flexcan_send_frame(&toyota_wakeup[i]);
000002  4e0c              LDR      r6,|L8.52|
000004  4605              MOV      r5,r0                 ;1332
000006  2400              MOVS     r4,#0                 ;1335
                  |L8.8|
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  eb060080          ADD      r0,r6,r0,LSL #2
000010  f7fffffe          BL       flexcan_send_frame
;;;1337           xdelay_ms(200);
000014  20c8              MOVS     r0,#0xc8
000016  f7fffffe          BL       xdelay_ms
00001a  1c64              ADDS     r4,r4,#1              ;1335
00001c  b2e4              UXTB     r4,r4                 ;1335
00001e  2c02              CMP      r4,#2                 ;1335
000020  d3f2              BCC      |L8.8|
;;;1338       }
;;;1339       if(state) {
000022  b10d              CBZ      r5,|L8.40|
;;;1340           flexcan_send_frame(&toyota_trunk_on);
000024  4804              LDR      r0,|L8.56|
000026  e001              B        |L8.44|
                  |L8.40|
;;;1341       } else {
;;;1342           flexcan_send_frame(&toyota_trunk_off);
000028  4803              LDR      r0,|L8.56|
00002a  3014              ADDS     r0,r0,#0x14
                  |L8.44|
00002c  e8bd4070          POP      {r4-r6,lr}
000030  f7ffbffe          B.W      flexcan_send_frame
;;;1343       }
;;;1344   
;;;1345   }
;;;1346   
                          ENDP

                  |L8.52|
                          DCD      ||.data||+0x7e4
                  |L8.56|
                          DCD      ||.data||+0x50

                          AREA ||i.toyota_ctrl_window||, CODE, READONLY, ALIGN=2

                  toyota_ctrl_window PROC
;;;1243   
;;;1244   void toyota_ctrl_window(uint8_t state)
000000  b570              PUSH     {r4-r6,lr}
;;;1245   {
;;;1246       uint8_t i = 0;
;;;1247   
;;;1248       for(i = 0; i < 2; i++) {
;;;1249           flexcan_send_frame(&toyota_wakeup[i]);
000002  4d1a              LDR      r5,|L9.108|
000004  4606              MOV      r6,r0                 ;1245
000006  2400              MOVS     r4,#0                 ;1246
                  |L9.8|
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  eb050080          ADD      r0,r5,r0,LSL #2
000010  f7fffffe          BL       flexcan_send_frame
;;;1250           xdelay_ms(200);
000014  20c8              MOVS     r0,#0xc8
000016  f7fffffe          BL       xdelay_ms
00001a  1c64              ADDS     r4,r4,#1              ;1248
00001c  b2e4              UXTB     r4,r4                 ;1248
00001e  2c02              CMP      r4,#2                 ;1248
000020  d3f2              BCC      |L9.8|
;;;1251       }
;;;1252       if(state) {
;;;1253           for(i = 0; i < 4; i++) {
;;;1254               flexcan_send_frame(&toyota_window_on[i]);
;;;1255               xdelay_ms(500);
000022  f44f75fa          MOV      r5,#0x1f4
;;;1256           }
;;;1257       } else {
;;;1258           for(i = 0; i < 4; i++) {
000026  f04f0400          MOV      r4,#0
00002a  b17e              CBZ      r6,|L9.76|
00002c  4e10              LDR      r6,|L9.112|
00002e  bf00              NOP                            ;1254
                  |L9.48|
000030  eb040084          ADD      r0,r4,r4,LSL #2       ;1254
000034  eb060080          ADD      r0,r6,r0,LSL #2       ;1254
000038  f7fffffe          BL       flexcan_send_frame
00003c  4628              MOV      r0,r5                 ;1255
00003e  f7fffffe          BL       xdelay_ms
000042  1c64              ADDS     r4,r4,#1              ;1253
000044  b2e4              UXTB     r4,r4                 ;1253
000046  2c04              CMP      r4,#4                 ;1253
000048  d3f2              BCC      |L9.48|
;;;1259               flexcan_send_frame(&toyota_window_off[i]);
;;;1260               xdelay_ms(500);
;;;1261           }
;;;1262       }
;;;1263   }
00004a  bd70              POP      {r4-r6,pc}
                  |L9.76|
00004c  4e08              LDR      r6,|L9.112|
00004e  3650              ADDS     r6,r6,#0x50           ;1259
                  |L9.80|
000050  eb040084          ADD      r0,r4,r4,LSL #2       ;1259
000054  eb060080          ADD      r0,r6,r0,LSL #2       ;1259
000058  f7fffffe          BL       flexcan_send_frame
00005c  4628              MOV      r0,r5                 ;1260
00005e  f7fffffe          BL       xdelay_ms
000062  1c64              ADDS     r4,r4,#1              ;1258
000064  b2e4              UXTB     r4,r4                 ;1258
000066  2c04              CMP      r4,#4                 ;1258
000068  d3f2              BCC      |L9.80|
00006a  bd70              POP      {r4-r6,pc}
;;;1264   
                          ENDP

                  |L9.108|
                          DCD      ||.data||+0x7e4
                  |L9.112|
                          DCD      ||.data||+0xa0

                          AREA ||i.toyota_data_stream||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  toyota_data_stream PROC
;;;1033   
;;;1034   uint8_t* toyota_data_stream(uint8_t pid, uint8_t *len)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1035   {
000004  4605              MOV      r5,r0
;;;1036       uint8_t i, j;
;;;1037       int8_t ret;
;;;1038       uint8_t valid_len;
;;;1039       uint8_t valid_index = 0;
;;;1040       uint8_t data_type;
;;;1041       uint8_t offset;
;;;1042       uint8_t l_bytes = 0;
;;;1043       uint8_t l_packages = 0;
;;;1044       uint8_t sub_cmd = 0;
;;;1045   
;;;1046       CanTxMsg txMsg;
;;;1047       CanRxMsg *rxMsg;
;;;1048   
;;;1049       //check if this pid supported
;;;1050       if(toyotaSupportItems[pid].support != SUPPORTED) {
000006  488b              LDR      r0,|L10.564|
000008  2600              MOVS     r6,#0                 ;1039
00000a  eb000045          ADD      r0,r0,r5,LSL #1
00000e  b08f              SUB      sp,sp,#0x3c           ;1035
000010  7840              LDRB     r0,[r0,#1]
000012  2801              CMP      r0,#1
000014  d003              BEQ      |L10.30|
;;;1051           *len = UNSUPPORTED_LEN;
000016  9810              LDR      r0,[sp,#0x40]
000018  21ff              MOVS     r1,#0xff
00001a  7001              STRB     r1,[r0,#0]
                  |L10.28|
;;;1052           return NULL;
00001c  e0f8              B        |L10.528|
                  |L10.30|
;;;1053       }
;;;1054   
;;;1055       if(mToyotaSupportList.support_done == FALSE) {
00001e  4c86              LDR      r4,|L10.568|
000020  7820              LDRB     r0,[r4,#0]  ; mToyotaSupportList
000022  b908              CBNZ     r0,|L10.40|
;;;1056           toyota_get_supported();
000024  f7fffffe          BL       toyota_get_supported
                  |L10.40|
;;;1057       }
;;;1058   
;;;1059       //printf("pid: %s\r\n", getPidKey(pid));
;;;1060       //clear flexcan rx buf
;;;1061       //OSTimeDlyHMSM(0, 0, 0, 100);
;;;1062       flexcan_reset();
000028  f7fffffe          BL       flexcan_reset
;;;1063       valid_len = toyotaStdDs[pid].valid_len;
00002c  4881              LDR      r0,|L10.564|
00002e  eb0501c5          ADD      r1,r5,r5,LSL #3
000032  3072              ADDS     r0,r0,#0x72
000034  eb000541          ADD      r5,r0,r1,LSL #1
000038  7c68              LDRB     r0,[r5,#0x11]
;;;1064       offset = toyotaStdDs[pid].offset;
00003a  900b              STR      r0,[sp,#0x2c]
;;;1065       //logi("offset = %d\r\n", offset);
;;;1066       //get real offset
;;;1067       if(mToyotaSupportList.support_done == TRUE) {
00003c  7820              LDRB     r0,[r4,#0]  ; mToyotaSupportList
00003e  7c2f              LDRB     r7,[r5,#0x10]         ;1064
000040  2801              CMP      r0,#1
000042  d109              BNE      |L10.88|
;;;1068           if(toyotaStdDs[pid].rxId == 0x7e8) {
000044  89e8              LDRH     r0,[r5,#0xe]
000046  f5b06ffd          CMP      r0,#0x7e8
00004a  d105              BNE      |L10.88|
;;;1069               offset = offset - get_real_offset(toyotaStdDs[pid].data[2], offset);
00004c  79e8              LDRB     r0,[r5,#7]
00004e  4639              MOV      r1,r7
000050  f7fffffe          BL       get_real_offset
000054  1a38              SUBS     r0,r7,r0
000056  b2c7              UXTB     r7,r0
                  |L10.88|
;;;1070               //logi("real offset = %d\r\n", offset);
;;;1071           }
;;;1072       }
;;;1073   
;;;1074       txMsg.StdId = toyotaStdDs[pid].txId;
000058  8868              LDRH     r0,[r5,#2]
;;;1075       txMsg.IDE = CAN_ID_STD;
00005a  9006              STR      r0,[sp,#0x18]
00005c  2000              MOVS     r0,#0
00005e  f88d0020          STRB     r0,[sp,#0x20]
;;;1076       txMsg.DLC = toyotaStdDs[pid].len;
000062  7928              LDRB     r0,[r5,#4]
000064  f88d0022          STRB     r0,[sp,#0x22]
;;;1077       for(i = 0; i < txMsg.DLC; i++) {
000068  2000              MOVS     r0,#0
00006a  a906              ADD      r1,sp,#0x18           ;1046
00006c  e005              B        |L10.122|
                  |L10.110|
;;;1078           txMsg.Data[i] = toyotaStdDs[pid].data[i];
00006e  182a              ADDS     r2,r5,r0
000070  180b              ADDS     r3,r1,r0
000072  7952              LDRB     r2,[r2,#5]
000074  1c40              ADDS     r0,r0,#1              ;1077
000076  72da              STRB     r2,[r3,#0xb]
000078  b2c0              UXTB     r0,r0                 ;1077
                  |L10.122|
00007a  f89d2022          LDRB     r2,[sp,#0x22]         ;1077
00007e  4282              CMP      r2,r0                 ;1077
000080  d8f5              BHI      |L10.110|
;;;1079       }
;;;1080       ret = flexcan_ioctl(DIR_BI, &txMsg, toyotaStdDs[pid].rxId, 1);
000082  89ea              LDRH     r2,[r5,#0xe]
000084  2301              MOVS     r3,#1
000086  2003              MOVS     r0,#3
000088  f7fffffe          BL       flexcan_ioctl
;;;1081       if(ret > 0) {
00008c  2800              CMP      r0,#0
00008e  ddc5              BLE      |L10.28|
;;;1082           rxMsg = flexcan_dump();
000090  f7fffffe          BL       flexcan_dump
;;;1083           //check if the receive msg type is needed
;;;1084           if(txMsg.Data[0] > 10) {
000094  f89dc023          LDRB     r12,[sp,#0x23]
000098  f1bc0f0a          CMP      r12,#0xa
00009c  d906              BLS      |L10.172|
;;;1085               data_type = 0x40 + txMsg.Data[2];
00009e  f89d1025          LDRB     r1,[sp,#0x25]
;;;1086               sub_cmd = txMsg.Data[3];
0000a2  f89d8026          LDRB     r8,[sp,#0x26]
0000a6  3140              ADDS     r1,r1,#0x40           ;1085
0000a8  b2ca              UXTB     r2,r1                 ;1085
0000aa  e005              B        |L10.184|
                  |L10.172|
;;;1087           } else {
;;;1088               data_type = 0x40 + txMsg.Data[1];
0000ac  f89d1024          LDRB     r1,[sp,#0x24]
;;;1089               sub_cmd = txMsg.Data[2];
0000b0  f89d8025          LDRB     r8,[sp,#0x25]
0000b4  3140              ADDS     r1,r1,#0x40           ;1088
0000b6  b2ca              UXTB     r2,r1                 ;1088
                  |L10.184|
;;;1090           }
;;;1091           for(i = 0; i < 8; i++) {
;;;1092               toyota_rx_buf[i] = rxMsg->Data[i];
0000b8  4c60              LDR      r4,|L10.572|
0000ba  2100              MOVS     r1,#0                 ;1091
                  |L10.188|
0000bc  1843              ADDS     r3,r0,r1
0000be  7adb              LDRB     r3,[r3,#0xb]
0000c0  5463              STRB     r3,[r4,r1]
0000c2  1c49              ADDS     r1,r1,#1              ;1091
0000c4  b2c9              UXTB     r1,r1                 ;1091
0000c6  2908              CMP      r1,#8                 ;1091
0000c8  d3f8              BCC      |L10.188|
;;;1093           }
;;;1094   
;;;1095           //find the valid index
;;;1096           for(i = 0; i < 8; i++) {
0000ca  2100              MOVS     r1,#0
                  |L10.204|
;;;1097               if(toyota_rx_buf[i] == data_type) {
0000cc  5c63              LDRB     r3,[r4,r1]
0000ce  4293              CMP      r3,r2
0000d0  d101              BNE      |L10.214|
;;;1098                   //skip 61 xx
;;;1099                   valid_index = i;
0000d2  460e              MOV      r6,r1
;;;1100                   break;
0000d4  e003              B        |L10.222|
                  |L10.214|
0000d6  1c49              ADDS     r1,r1,#1              ;1096
0000d8  b2c9              UXTB     r1,r1                 ;1096
0000da  2908              CMP      r1,#8                 ;1096
0000dc  d3f6              BCC      |L10.204|
                  |L10.222|
;;;1101               }
;;;1102           }
;;;1103   
;;;1104           if(sub_cmd != toyota_rx_buf[valid_index + 1]) {
0000de  19a1              ADDS     r1,r4,r6
0000e0  7849              LDRB     r1,[r1,#1]
;;;1105               loge("ERROR: sub_cmd = %02x, valid_index = %d\r\n",
0000e2  f8dfa15c          LDR      r10,|L10.576|
0000e6  f2413988          MOV      r9,#0x1388
0000ea  f04f0b05          MOV      r11,#5
0000ee  4541              CMP      r1,r8                 ;1104
0000f0  d010              BEQ      |L10.276|
0000f2  a802              ADD      r0,sp,#8
0000f4  f7fffffe          BL       OSTimeGet
0000f8  f89a1000          LDRB     r1,[r10,#0]  ; DEBUG_MODE
0000fc  07c9              LSLS     r1,r1,#31
0000fe  d08d              BEQ      |L10.28|
000100  fbb0f1f9          UDIV     r1,r0,r9
000104  fb090211          MLS      r2,r9,r1,r0
000108  fbb2f2fb          UDIV     r2,r2,r11
00010c  4643              MOV      r3,r8
00010e  a04d              ADR      r0,|L10.580|
000110  9600              STR      r6,[sp,#0]
000112  e07b              B        |L10.524|
                  |L10.276|
;;;1106                       sub_cmd, valid_index);
;;;1107               return NULL;
;;;1108           }
;;;1109   
;;;1110           //check if this recv package is a long package
;;;1111           if(toyota_rx_buf[0] == 0x10) {
000114  7821              LDRB     r1,[r4,#0]  ; toyota_rx_buf
000116  2910              CMP      r1,#0x10
000118  d009              BEQ      |L10.302|
;;;1112               l_bytes = toyota_rx_buf[1];
;;;1113               l_packages = 0;
;;;1114               l_packages = (l_bytes - 6) / 7;
;;;1115               if((l_bytes - 6) % 7 > 0) {
;;;1116                   l_packages += 1;
;;;1117               }
;;;1118               for(i = 2; i < 8; i++) {
;;;1119                   toyota_rx_buf[i - 2] = rxMsg->Data[i];
;;;1120               }
;;;1121               //send continue package
;;;1122               ret = flexcan_ioctl(DIR_BI, &toyota_continue_package,
;;;1123                       toyotaStdDs[pid].rxId, l_packages);
;;;1124               if(ret == l_packages) {
;;;1125                   for(i = 0;i < ret; i++) {
;;;1126                       rxMsg = flexcan_dump();
;;;1127                       for(j = 0; j < 7; j++) {
;;;1128                           toyota_rx_buf[6 + i * 7 + j] = rxMsg->Data[j + 1];
;;;1129                       }
;;;1130                   }
;;;1131               } else {
;;;1132                   loge("error: ret = %d\r\n", ret);
;;;1133               }
;;;1134           }
;;;1135           //short package
;;;1136           else {
;;;1137               if(txMsg.Data[0] > 10) {
00011a  f1bc0f0a          CMP      r12,#0xa
00011e  d951              BLS      |L10.452|
;;;1138                   data_type = 0x40 + txMsg.Data[2];
000120  f89d0025          LDRB     r0,[sp,#0x25]
;;;1139                   sub_cmd = txMsg.Data[3];
000124  f89d5026          LDRB     r5,[sp,#0x26]
000128  3040              ADDS     r0,r0,#0x40           ;1138
00012a  b2c1              UXTB     r1,r0                 ;1138
00012c  e050              B        |L10.464|
                  |L10.302|
00012e  7861              LDRB     r1,[r4,#1]            ;1112  ; toyota_rx_buf
000130  2207              MOVS     r2,#7                 ;1114
000132  1f89              SUBS     r1,r1,#6              ;1114
000134  fb91f3f2          SDIV     r3,r1,r2              ;1114
000138  fb021113          MLS      r1,r2,r3,r1           ;1115
00013c  b2de              UXTB     r6,r3                 ;1114
00013e  2900              CMP      r1,#0                 ;1115
000140  dd01              BLE      |L10.326|
000142  1c76              ADDS     r6,r6,#1              ;1116
000144  b2f6              UXTB     r6,r6                 ;1116
                  |L10.326|
000146  2102              MOVS     r1,#2                 ;1118
                  |L10.328|
000148  1842              ADDS     r2,r0,r1              ;1119
00014a  1863              ADDS     r3,r4,r1              ;1119
00014c  7ad2              LDRB     r2,[r2,#0xb]          ;1119
00014e  f8032c02          STRB     r2,[r3,#-2]           ;1119
000152  1c49              ADDS     r1,r1,#1              ;1118
000154  b2c9              UXTB     r1,r1                 ;1118
000156  2908              CMP      r1,#8                 ;1118
000158  d3f6              BCC      |L10.328|
00015a  4936              LDR      r1,|L10.564|
00015c  89ea              LDRH     r2,[r5,#0xe]          ;1122
00015e  4633              MOV      r3,r6                 ;1122
000160  3928              SUBS     r1,r1,#0x28           ;1122
000162  2003              MOVS     r0,#3                 ;1122
000164  f7fffffe          BL       flexcan_ioctl
000168  4605              MOV      r5,r0                 ;1122
00016a  42b0              CMP      r0,r6                 ;1124
00016c  d118              BNE      |L10.416|
00016e  2600              MOVS     r6,#0                 ;1125
000170  e013              B        |L10.410|
000172  bf00              NOP                            ;1126
                  |L10.372|
000174  f7fffffe          BL       flexcan_dump
000178  4601              MOV      r1,r0                 ;1126
00017a  2000              MOVS     r0,#0                 ;1127
00017c  ebc602c6          RSB      r2,r6,r6,LSL #3       ;1128
                  |L10.384|
000180  180b              ADDS     r3,r1,r0              ;1128
000182  eb020c00          ADD      r12,r2,r0             ;1128
000186  44a4              ADD      r12,r12,r4            ;1128
000188  7b1b              LDRB     r3,[r3,#0xc]          ;1128
00018a  f88c3006          STRB     r3,[r12,#6]           ;1128
00018e  1c40              ADDS     r0,r0,#1              ;1127
000190  b2c0              UXTB     r0,r0                 ;1127
000192  2807              CMP      r0,#7                 ;1127
000194  d3f4              BCC      |L10.384|
000196  1c76              ADDS     r6,r6,#1              ;1125
000198  b2f6              UXTB     r6,r6                 ;1125
                  |L10.410|
00019a  42ae              CMP      r6,r5                 ;1125
00019c  dbea              BLT      |L10.372|
00019e  e043              B        |L10.552|
                  |L10.416|
0001a0  a801              ADD      r0,sp,#4              ;1132
0001a2  f7fffffe          BL       OSTimeGet
0001a6  f89a1000          LDRB     r1,[r10,#0]           ;1132  ; DEBUG_MODE
0001aa  07c9              LSLS     r1,r1,#31             ;1132
0001ac  d03c              BEQ      |L10.552|
0001ae  fbb0f1f9          UDIV     r1,r0,r9              ;1132
0001b2  fb090211          MLS      r2,r9,r1,r0           ;1132
0001b6  fbb2f2fb          UDIV     r2,r2,r11             ;1132
0001ba  462b              MOV      r3,r5                 ;1132
0001bc  a030              ADR      r0,|L10.640|
0001be  f7fffffe          BL       __2printf
0001c2  e031              B        |L10.552|
                  |L10.452|
;;;1140               } else {
;;;1141                   data_type = 0x40 + txMsg.Data[1];
0001c4  f89d0024          LDRB     r0,[sp,#0x24]
;;;1142                   sub_cmd = txMsg.Data[2];
0001c8  f89d5025          LDRB     r5,[sp,#0x25]
0001cc  3040              ADDS     r0,r0,#0x40           ;1141
0001ce  b2c1              UXTB     r1,r0                 ;1141
                  |L10.464|
;;;1143               }
;;;1144               //find the valid index
;;;1145               for(i = 0; i < 8; i++) {
0001d0  2000              MOVS     r0,#0
                  |L10.466|
;;;1146                   if(toyota_rx_buf[i] == data_type) {
0001d2  5c22              LDRB     r2,[r4,r0]
0001d4  428a              CMP      r2,r1
0001d6  d101              BNE      |L10.476|
;;;1147                       //skip 61 xx
;;;1148                       valid_index = i;
0001d8  4606              MOV      r6,r0
;;;1149                       break;
0001da  e003              B        |L10.484|
                  |L10.476|
0001dc  1c40              ADDS     r0,r0,#1              ;1145
0001de  b2c0              UXTB     r0,r0                 ;1145
0001e0  2808              CMP      r0,#8                 ;1145
0001e2  d3f6              BCC      |L10.466|
                  |L10.484|
;;;1150                   }
;;;1151               }
;;;1152               if(sub_cmd != toyota_rx_buf[valid_index + 1]) {
0001e4  19a0              ADDS     r0,r4,r6
0001e6  7840              LDRB     r0,[r0,#1]
0001e8  42a8              CMP      r0,r5
0001ea  d015              BEQ      |L10.536|
;;;1153                   loge("sub_cmd = %02x, valid_index = %d\r\n",
0001ec  a802              ADD      r0,sp,#8
0001ee  f7fffffe          BL       OSTimeGet
0001f2  f89a1000          LDRB     r1,[r10,#0]  ; DEBUG_MODE
0001f6  07c9              LSLS     r1,r1,#31
0001f8  d00a              BEQ      |L10.528|
0001fa  fbb0f1f9          UDIV     r1,r0,r9
0001fe  fb090211          MLS      r2,r9,r1,r0
000202  fbb2f2fb          UDIV     r2,r2,r11
000206  462b              MOV      r3,r5
000208  a026              ADR      r0,|L10.676|
00020a  9600              STR      r6,[sp,#0]
                  |L10.524|
00020c  f7fffffe          BL       __2printf
                  |L10.528|
;;;1154                           sub_cmd, valid_index);
;;;1155                   return NULL;
;;;1156               }
;;;1157               //shift the valid data to head
;;;1158               for(i = 0; i < 8; i++) {
;;;1159                   toyota_rx_buf[i] = toyota_rx_buf[valid_index + i];
;;;1160               }
;;;1161           }
;;;1162           *len = valid_len;
;;;1163           //logi("offset = %d, len = %d\r\n", offset, *len);
;;;1164           //for(i = 0; i < 40; i++) {
;;;1165           //    printf("%02x ", toyota_rx_buf[i]);
;;;1166           //}
;;;1167           //printf("\r\n");
;;;1168           return toyota_rx_buf + offset + 2;
;;;1169       } else {
;;;1170           return NULL;
000210  2000              MOVS     r0,#0
                  |L10.530|
;;;1171       }
;;;1172   
;;;1173   }
000212  b011              ADD      sp,sp,#0x44
000214  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.536|
000218  2000              MOVS     r0,#0                 ;1158
                  |L10.538|
00021a  1831              ADDS     r1,r6,r0              ;1159
00021c  5c61              LDRB     r1,[r4,r1]            ;1159
00021e  5421              STRB     r1,[r4,r0]            ;1159
000220  1c40              ADDS     r0,r0,#1              ;1158
000222  b2c0              UXTB     r0,r0                 ;1158
000224  2808              CMP      r0,#8                 ;1158
000226  d3f8              BCC      |L10.538|
                  |L10.552|
000228  9910              LDR      r1,[sp,#0x40]         ;1162
00022a  980b              LDR      r0,[sp,#0x2c]         ;1162
00022c  7008              STRB     r0,[r1,#0]            ;1162
00022e  19e0              ADDS     r0,r4,r7              ;1168
000230  1c80              ADDS     r0,r0,#2              ;1168
000232  e7ee              B        |L10.530|
;;;1174   
                          ENDP

                  |L10.564|
                          DCD      ||.data||+0x190
                  |L10.568|
                          DCD      ||.bss||+0x140
                  |L10.572|
                          DCD      ||.bss||
                  |L10.576|
                          DCD      DEBUG_MODE
                  |L10.580|
000244  5b253035          DCB      "[%05d.%03d/E]: ERROR: sub_cmd = %02x, valid_index = %d\r"
000248  642e2530
00024c  33642f45
000250  5d3a2045
000254  52524f52
000258  3a207375
00025c  625f636d
000260  64203d20
000264  25303278
000268  2c207661
00026c  6c69645f
000270  696e6465
000274  78203d20
000278  25640d  
00027b  0a0d0a00          DCB      "\n\r\n",0
00027f  00                DCB      0
                  |L10.640|
000280  5b253035          DCB      "[%05d.%03d/E]: error: ret = %d\r\n\r\n",0
000284  642e2530
000288  33642f45
00028c  5d3a2065
000290  72726f72
000294  3a207265
000298  74203d20
00029c  25640d0a
0002a0  0d0a00  
0002a3  00                DCB      0
                  |L10.676|
0002a4  5b253035          DCB      "[%05d.%03d/E]: sub_cmd = %02x, valid_index = %d\r\n\r\n"
0002a8  642e2530
0002ac  33642f45
0002b0  5d3a2073
0002b4  75625f63
0002b8  6d64203d
0002bc  20253032
0002c0  782c2076
0002c4  616c6964
0002c8  5f696e64
0002cc  6578203d
0002d0  2025640d
0002d4  0a0d0a  
0002d7  00                DCB      0

                          AREA ||i.toyota_engine_on||, CODE, READONLY, ALIGN=2

                  toyota_engine_on PROC
;;;765    
;;;766    bool toyota_engine_on(void)
000000  b510              PUSH     {r4,lr}
;;;767    {
;;;768        CanRxMsg *rxMsg;
;;;769        int8_t ret = -1;
;;;770        bool on = FALSE;
000002  2400              MOVS     r4,#0
;;;771    
;;;772        ret = flexcan_ioctl(DIR_BI, &toyotaEngineCmd,
000004  2301              MOVS     r3,#1
000006  f44f62fd          MOV      r2,#0x7e8
00000a  4906              LDR      r1,|L11.36|
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       flexcan_ioctl
;;;773                0x7e8, 1);
;;;774        if(ret > 0) {
000012  2800              CMP      r0,#0
000014  dd03              BLE      |L11.30|
;;;775            rxMsg = flexcan_dump();
000016  f7fffffe          BL       flexcan_dump
;;;776            //check if the receive msg type is needed
;;;777            //TODO: ???
;;;778            if(rxMsg == NULL) {
00001a  b100              CBZ      r0,|L11.30|
;;;779                on = FALSE;
;;;780            } else {
;;;781                on = TRUE;
00001c  2401              MOVS     r4,#1
                  |L11.30|
;;;782            }
;;;783        } else {
;;;784            on = FALSE;
;;;785        }
;;;786        return on;
00001e  4620              MOV      r0,r4
;;;787    }
000020  bd10              POP      {r4,pc}
;;;788    
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      ||.data||+0x794

                          AREA ||i.toyota_exit||, CODE, READONLY, ALIGN=1

                  toyota_exit PROC
;;;739    
;;;740    void toyota_exit(uint8_t type)
000000  4770              BX       lr
;;;741    {}
;;;742    
                          ENDP


                          AREA ||i.toyota_get_supported||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  toyota_get_supported PROC
;;;900    
;;;901    void toyota_get_supported(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;902    {
;;;903        uint8_t ret;
;;;904        uint8_t i;
;;;905        uint8_t first_byte;
;;;906        CanRxMsg *rxMsg;
;;;907        uint16_t index = 0;
;;;908    
;;;909        ret = flexcan_ioctl(DIR_BI, &toyota_check_supported,
000004  f8df9120          LDR      r9,|L13.296|
000008  2400              MOVS     r4,#0                 ;907
00000a  2301              MOVS     r3,#1
00000c  f8b90000          LDRH     r0,[r9,#0]  ; toyota_check_supported
000010  4649              MOV      r1,r9
000012  3008              ADDS     r0,r0,#8
000014  b282              UXTH     r2,r0
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       flexcan_ioctl
;;;910                toyota_check_supported.StdId + 8, 1);
;;;911        if(ret > 0) {
;;;912            rxMsg = flexcan_dump();
;;;913            //save bytes
;;;914            for(i = 4; i < 8; i++) {
;;;915                toyota_support_buffer[index ++] = rxMsg->Data[i];
;;;916            }
;;;917        } else {
;;;918            loge("failed to get support list\r\n");
00001c  4f43              LDR      r7,|L13.300|
00001e  f0100fff          TST      r0,#0xff              ;909
000022  f2413688          MOV      r6,#0x1388
000026  f04f0805          MOV      r8,#5
00002a  d04b              BEQ      |L13.196|
00002c  f7fffffe          BL       flexcan_dump
000030  4d3f              LDR      r5,|L13.304|
000032  2104              MOVS     r1,#4                 ;914
                  |L13.52|
000034  1842              ADDS     r2,r0,r1              ;915
000036  1c49              ADDS     r1,r1,#1              ;914
000038  7ad2              LDRB     r2,[r2,#0xb]          ;915
00003a  552a              STRB     r2,[r5,r4]            ;915
00003c  1c64              ADDS     r4,r4,#1              ;915
00003e  b2c9              UXTB     r1,r1                 ;914
000040  b2a4              UXTH     r4,r4                 ;915
000042  2908              CMP      r1,#8                 ;914
000044  d3f6              BCC      |L13.52|
;;;919            mToyotaSupportList.support_done = FALSE;
;;;920            return;
;;;921        }
;;;922    
;;;923        while(1) {
;;;924            ret = flexcan_ioctl(DIR_BI, &toyota_continue_package,
000046  f8dfa0e0          LDR      r10,|L13.296|
00004a  f1aa0a14          SUB      r10,r10,#0x14
00004e  bf00              NOP      
                  |L13.80|
000050  f8ba0000          LDRH     r0,[r10,#0]  ; toyota_continue_package
000054  4934              LDR      r1,|L13.296|
000056  3008              ADDS     r0,r0,#8
000058  b282              UXTH     r2,r0
00005a  2301              MOVS     r3,#1
00005c  3914              SUBS     r1,r1,#0x14
00005e  2003              MOVS     r0,#3
000060  f7fffffe          BL       flexcan_ioctl
000064  f0100fff          TST      r0,#0xff
;;;925                    toyota_continue_package.StdId + 8, 1);
;;;926            if(ret > 0) {
000068  d04b              BEQ      |L13.258|
;;;927                rxMsg = flexcan_dump();
00006a  f7fffffe          BL       flexcan_dump
;;;928                first_byte = rxMsg->Data[0];
00006e  7ac1              LDRB     r1,[r0,#0xb]
;;;929                if(first_byte == 0x10) {
000070  2910              CMP      r1,#0x10
000072  d0ed              BEQ      |L13.80|
;;;930                    continue;
;;;931                } else if(first_byte >= 0x21) {
000074  2921              CMP      r1,#0x21
000076  d3eb              BCC      |L13.80|
;;;932                    //save bytes
;;;933                    for(i = 1; i < 8; i++) {
000078  2101              MOVS     r1,#1
                  |L13.122|
;;;934                        toyota_support_buffer[index ++] = rxMsg->Data[i];
00007a  1842              ADDS     r2,r0,r1
00007c  1c49              ADDS     r1,r1,#1              ;933
00007e  7ad2              LDRB     r2,[r2,#0xb]
000080  552a              STRB     r2,[r5,r4]
000082  1c64              ADDS     r4,r4,#1
000084  b2c9              UXTB     r1,r1                 ;933
000086  b2a4              UXTH     r4,r4
000088  2908              CMP      r1,#8                 ;933
00008a  d3f6              BCC      |L13.122|
                  |L13.140|
;;;935                    }
;;;936    
;;;937                    while(1) {
;;;938                        ret = flexcan_ioctl(DIR_INPUT, NULL,
00008c  f8b90000          LDRH     r0,[r9,#0]  ; toyota_check_supported
000090  2301              MOVS     r3,#1
000092  3008              ADDS     r0,r0,#8
000094  b282              UXTH     r2,r0
000096  2100              MOVS     r1,#0
000098  4618              MOV      r0,r3
00009a  f7fffffe          BL       flexcan_ioctl
00009e  f0100fff          TST      r0,#0xff
;;;939                                toyota_check_supported.StdId + 8, 1);
;;;940                        if(ret > 0) {
0000a2  d02e              BEQ      |L13.258|
;;;941                            rxMsg = flexcan_dump();
0000a4  f7fffffe          BL       flexcan_dump
;;;942                            first_byte = rxMsg->Data[0];
0000a8  7ac1              LDRB     r1,[r0,#0xb]
;;;943                            if(first_byte == 0x10) {
0000aa  2910              CMP      r1,#0x10
0000ac  d01e              BEQ      |L13.236|
;;;944                                for(i = 4; i < 8; i++) {
;;;945                                    toyota_support_buffer[index ++] = rxMsg->Data[i];
;;;946                                }
;;;947                                //need to send continue package again
;;;948                                break;
;;;949                            } else {
;;;950                                for(i = 1; i < 8; i++) {
0000ae  2101              MOVS     r1,#1
                  |L13.176|
;;;951                                    toyota_support_buffer[index ++] = rxMsg->Data[i];
0000b0  1842              ADDS     r2,r0,r1
0000b2  1c49              ADDS     r1,r1,#1              ;950
0000b4  7ad2              LDRB     r2,[r2,#0xb]
0000b6  552a              STRB     r2,[r5,r4]
0000b8  1c64              ADDS     r4,r4,#1
0000ba  b2c9              UXTB     r1,r1                 ;950
0000bc  b2a4              UXTH     r4,r4
0000be  2908              CMP      r1,#8                 ;950
0000c0  d3f6              BCC      |L13.176|
0000c2  e7e3              B        |L13.140|
                  |L13.196|
0000c4  4668              MOV      r0,sp                 ;918
0000c6  f7fffffe          BL       OSTimeGet
0000ca  7839              LDRB     r1,[r7,#0]            ;918  ; DEBUG_MODE
0000cc  07c9              LSLS     r1,r1,#31             ;918
0000ce  d008              BEQ      |L13.226|
0000d0  fbb0f1f6          UDIV     r1,r0,r6              ;918
0000d4  fb060211          MLS      r2,r6,r1,r0           ;918
0000d8  fbb2f2f8          UDIV     r2,r2,r8              ;918
0000dc  a015              ADR      r0,|L13.308|
0000de  f7fffffe          BL       __2printf
                  |L13.226|
0000e2  4920              LDR      r1,|L13.356|
0000e4  2000              MOVS     r0,#0                 ;919
0000e6  7008              STRB     r0,[r1,#0]            ;919
                  |L13.232|
;;;952                                }
;;;953                                //continue to recive 21 22 23 ...
;;;954                                continue;
;;;955                            }
;;;956                        } else {
;;;957                            toyota_map_support_list();
;;;958                            logi("%s: done\r\n", __func__);
;;;959                            return;
;;;960                        }
;;;961                    }
;;;962                }
;;;963            } else {
;;;964                toyota_map_support_list();
;;;965                logi("%s: done\r\n", __func__);
;;;966                return;
;;;967            }
;;;968        }
;;;969    }
0000e8  e8bd8ff8          POP      {r3-r11,pc}
                  |L13.236|
0000ec  2104              MOVS     r1,#4                 ;944
                  |L13.238|
0000ee  1842              ADDS     r2,r0,r1              ;945
0000f0  1c49              ADDS     r1,r1,#1              ;944
0000f2  7ad2              LDRB     r2,[r2,#0xb]          ;945
0000f4  552a              STRB     r2,[r5,r4]            ;945
0000f6  1c64              ADDS     r4,r4,#1              ;945
0000f8  b2c9              UXTB     r1,r1                 ;944
0000fa  b2a4              UXTH     r4,r4                 ;945
0000fc  2908              CMP      r1,#8                 ;944
0000fe  d3f6              BCC      |L13.238|
000100  e7a6              B        |L13.80|
                  |L13.258|
000102  f7fffffe          BL       toyota_map_support_list
000106  4668              MOV      r0,sp                 ;965
000108  f7fffffe          BL       OSTimeGet
00010c  7839              LDRB     r1,[r7,#0]            ;965  ; DEBUG_MODE
00010e  0789              LSLS     r1,r1,#30             ;965
000110  d5ea              BPL      |L13.232|
000112  fbb0f1f6          UDIV     r1,r0,r6              ;965
000116  fb060211          MLS      r2,r6,r1,r0           ;965
00011a  fbb2f2f8          UDIV     r2,r2,r8              ;965
00011e  4b12              LDR      r3,|L13.360|
000120  a012              ADR      r0,|L13.364|
000122  f7fffffe          BL       __2printf
000126  e7df              B        |L13.232|
;;;970    
                          ENDP

                  |L13.296|
                          DCD      ||.data||+0x17c
                  |L13.300|
                          DCD      DEBUG_MODE
                  |L13.304|
                          DCD      ||.bss||+0x981
                  |L13.308|
000134  5b253035          DCB      "[%05d.%03d/E]: failed to get support list\r\n\r\n",0
000138  642e2530
00013c  33642f45
000140  5d3a2066
000144  61696c65
000148  6420746f
00014c  20676574
000150  20737570
000154  706f7274
000158  206c6973
00015c  740d0a0d
000160  0a00    
000162  00                DCB      0
000163  00                DCB      0
                  |L13.356|
                          DCD      ||.bss||+0x140
                  |L13.360|
                          DCD      ||.constdata||
                  |L13.364|
00016c  5b253035          DCB      "[%05d.%03d/I]: %s: done\r\n\r\n",0
000170  642e2530
000174  33642f49
000178  5d3a2025
00017c  733a2064
000180  6f6e650d
000184  0a0d0a00

                          AREA ||i.toyota_init||, CODE, READONLY, ALIGN=1

                  toyota_init PROC
;;;736    
;;;737    void toyota_init(uint8_t type)
000000  4770              BX       lr
;;;738    {}
;;;739    
                          ENDP


                          AREA ||i.toyota_keepalive||, CODE, READONLY, ALIGN=2

                  toyota_keepalive PROC
;;;742    
;;;743    void toyota_keepalive(uint8_t type)
000000  b510              PUSH     {r4,lr}
;;;744    {
000002  b138              CBZ      r0,|L15.20|
;;;745        switch(type) {
000004  2801              CMP      r0,#1
000006  d008              BEQ      |L15.26|
000008  2802              CMP      r0,#2
00000a  d00a              BEQ      |L15.34|
00000c  2803              CMP      r0,#3
00000e  d10d              BNE      |L15.44|
;;;746            case TYPE_ENG:
;;;747                flexcan_send_frame(&toyota_eng_keepalive);
;;;748                xdelay_ms(100);
;;;749                break;
;;;750            case TYPE_AT:
;;;751                flexcan_send_frame(&toyota_at_keepalive);
;;;752                xdelay_ms(100);
;;;753                break;
;;;754            case TYPE_ABS:
;;;755                xdelay_ms(100);
;;;756                break;
;;;757            case TYPE_BCM:
;;;758                flexcan_send_frame(&toyota_bcm_keepalive);
000010  4807              LDR      r0,|L15.48|
;;;759                xdelay_ms(100);
;;;760                break;
000012  e004              B        |L15.30|
                  |L15.20|
000014  4806              LDR      r0,|L15.48|
000016  3828              SUBS     r0,r0,#0x28           ;747
000018  e001              B        |L15.30|
                  |L15.26|
00001a  4805              LDR      r0,|L15.48|
00001c  3814              SUBS     r0,r0,#0x14           ;751
                  |L15.30|
00001e  f7fffffe          BL       flexcan_send_frame
                  |L15.34|
000022  e8bd4010          POP      {r4,lr}               ;755
000026  2064              MOVS     r0,#0x64              ;755
000028  f7ffbffe          B.W      xdelay_ms
                  |L15.44|
;;;761            default:
;;;762                break;
;;;763        }
;;;764    }
00002c  bd10              POP      {r4,pc}
;;;765    
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
                          DCD      ||.data||+0x7d0

                          AREA ||i.toyota_map_support_list||, CODE, READONLY, ALIGN=2

                  toyota_map_support_list PROC
;;;970    
;;;971    void toyota_map_support_list(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;972    {
;;;973        uint16_t i, j;
;;;974        uint8_t len;
;;;975        uint16_t index = 0;
000004  2400              MOVS     r4,#0
;;;976    
;;;977    //    logi("%s: start\r\n", __func__);
;;;978    //    for(i = 0; i < 300; i++) {
;;;979    //        printf("%02x ", toyota_support_buffer[i]);
;;;980    //    }
;;;981        printf("\r\n");
000006  a018              ADR      r0,|L16.104|
000008  f7fffffe          BL       __2printf
;;;982        mToyotaSupportList.support_done = TRUE;
00000c  4d17              LDR      r5,|L16.108|
00000e  2001              MOVS     r0,#1
;;;983        for(i = 0; i < SUPPORT_MAX_ITEMS; i++) {
000010  2200              MOVS     r2,#0
000012  7028              STRB     r0,[r5,#0]            ;982
;;;984            mToyotaSupportList.items[i].sub_id = toyota_support_buffer[index++];
000014  f6050041          ADD      r0,r5,#0x841
                  |L16.24|
000018  eb021342          ADD      r3,r2,r2,LSL #5
00001c  5d01              LDRB     r1,[r0,r4]
00001e  eb050643          ADD      r6,r5,r3,LSL #1
000022  1c64              ADDS     r4,r4,#1
000024  7071              STRB     r1,[r6,#1]
000026  b2a1              UXTH     r1,r4
;;;985            len = toyota_support_buffer[index++];
000028  5c43              LDRB     r3,[r0,r1]
00002a  1c49              ADDS     r1,r1,#1
00002c  b28c              UXTH     r4,r1
;;;986            //printf("id = %02x\r\n", mToyotaSupportList.items[i].sub_id);
;;;987            //printf("len = %d\r\n", len);
;;;988            mToyotaSupportList.items[i].len = len;
00002e  70b3              STRB     r3,[r6,#2]
;;;989            if(len > 0) {
000030  2b00              CMP      r3,#0
000032  d016              BEQ      |L16.98|
;;;990                for(j = 0; j < len; j++) {
000034  2100              MOVS     r1,#0
000036  e008              B        |L16.74|
                  |L16.56|
;;;991                    mToyotaSupportList.items[i].support_raw_bytes[j] = toyota_support_buffer[index ++];
000038  5d07              LDRB     r7,[r0,r4]
00003a  eb060c01          ADD      r12,r6,r1
00003e  1c64              ADDS     r4,r4,#1
000040  1c49              ADDS     r1,r1,#1              ;990
000042  f88c7003          STRB     r7,[r12,#3]
000046  b2a4              UXTH     r4,r4
000048  b289              UXTH     r1,r1                 ;990
                  |L16.74|
00004a  4299              CMP      r1,r3                 ;990
00004c  d3f4              BCC      |L16.56|
00004e  e001              B        |L16.84|
                  |L16.80|
;;;992                }
;;;993                while(toyota_support_buffer[index] == 0x00) {
;;;994                    index ++;
000050  1c64              ADDS     r4,r4,#1
000052  b2a4              UXTH     r4,r4
                  |L16.84|
000054  5d01              LDRB     r1,[r0,r4]            ;993
000056  2900              CMP      r1,#0                 ;993
000058  d0fa              BEQ      |L16.80|
00005a  1c52              ADDS     r2,r2,#1              ;983
00005c  b292              UXTH     r2,r2                 ;983
00005e  2a20              CMP      r2,#0x20              ;983
000060  d3da              BCC      |L16.24|
                  |L16.98|
;;;995                }
;;;996            } else {
;;;997                break;
;;;998            }
;;;999        }
;;;1000   //    logi("%s: done\r\n", __func__);
;;;1001   #if 0
;;;1002       for(i = 0; i < SUPPORT_MAX_ITEMS; i++) {
;;;1003           len = mToyotaSupportList.items[i].len;
;;;1004           if(len == 0)
;;;1005               break;
;;;1006           logi("sub id = %02x\tlen = %d\r\n", mToyotaSupportList.items[i].sub_id,
;;;1007                   mToyotaSupportList.items[i].len);
;;;1008           for(j = 0; j < len; j++) {
;;;1009               printf("%02x ", mToyotaSupportList.items[i].support_raw_bytes[j]);
;;;1010           }
;;;1011           printf("\r\n+++++++++++++++++\r\n");
;;;1012       }
;;;1013   #endif
;;;1014   }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;1015   
                          ENDP

000066  0000              DCW      0x0000
                  |L16.104|
000068  0d0a00            DCB      "\r\n",0
00006b  00                DCB      0
                  |L16.108|
                          DCD      ||.bss||+0x140

                          AREA ||i.toyota_setup||, CODE, READONLY, ALIGN=2

                  toyota_setup PROC
;;;703    
;;;704    void toyota_setup(Vehicles *vehicle)
000000  491e              LDR      r1,|L17.124|
;;;705    {
000002  b510              PUSH     {r4,lr}
;;;706        uint16_t i;
;;;707    
;;;708        //init toyota ops
;;;709        toyota_ctrl_ops.control_door = toyota_ctrl_door;
000004  4a1c              LDR      r2,|L17.120|
;;;710        toyota_ctrl_ops.control_window = toyota_ctrl_window;
000006  604a              STR      r2,[r1,#4]  ; toyota_ctrl_ops
000008  4a1d              LDR      r2,|L17.128|
;;;711        toyota_ctrl_ops.control_sunroof = toyota_ctrl_sunroof;
00000a  600a              STR      r2,[r1,#0]  ; toyota_ctrl_ops
00000c  4a1d              LDR      r2,|L17.132|
;;;712        toyota_ctrl_ops.control_light = toyota_ctrl_light;
00000e  60ca              STR      r2,[r1,#0xc]  ; toyota_ctrl_ops
000010  4a1d              LDR      r2,|L17.136|
;;;713        toyota_ctrl_ops.control_findcar = toyota_ctrl_findcar;
000012  608a              STR      r2,[r1,#8]  ; toyota_ctrl_ops
000014  4a1d              LDR      r2,|L17.140|
;;;714        toyota_ctrl_ops.control_trunk = toyota_ctrl_trunk;
000016  614a              STR      r2,[r1,#0x14]  ; toyota_ctrl_ops
000018  4a1d              LDR      r2,|L17.144|
;;;715        toyota_ctrl_ops.clear_fault_code = toyota_clear_fault_code;
00001a  610a              STR      r2,[r1,#0x10]  ; toyota_ctrl_ops
00001c  4a1d              LDR      r2,|L17.148|
;;;716    
;;;717        toyota_data_ops.transfer_data_stream = toyota_data_stream;
00001e  618a              STR      r2,[r1,#0x18]  ; toyota_ctrl_ops
000020  f101021c          ADD      r2,r1,#0x1c
000024  4b1c              LDR      r3,|L17.152|
;;;718        toyota_data_ops.is_engine_on = toyota_engine_on;
000026  6053              STR      r3,[r2,#4]  ; toyota_data_ops
000028  4b1c              LDR      r3,|L17.156|
;;;719        toyota_data_ops.check_fault_code = toyota_check_fault_code;
00002a  6013              STR      r3,[r2,#0]  ; toyota_data_ops
00002c  4b1c              LDR      r3,|L17.160|
;;;720        toyota_data_ops.init = toyota_init;
00002e  6093              STR      r3,[r2,#8]  ; toyota_data_ops
000030  4b1c              LDR      r3,|L17.164|
;;;721        toyota_data_ops.exit = toyota_exit;
000032  60d3              STR      r3,[r2,#0xc]  ; toyota_data_ops
000034  4b1c              LDR      r3,|L17.168|
;;;722        toyota_data_ops.keepalive = toyota_keepalive;
000036  6153              STR      r3,[r2,#0x14]  ; toyota_data_ops
000038  4b1c              LDR      r3,|L17.172|
00003a  6113              STR      r3,[r2,#0x10]  ; toyota_data_ops
00003c  e9c02101          STRD     r2,r1,[r0,#4]
;;;723    
;;;724        vehicle->ctrlOps = &toyota_ctrl_ops;
;;;725        vehicle->dataOps = &toyota_data_ops;
;;;726    
;;;727        mToyotaSupportList.support_done = FALSE;
000040  2100              MOVS     r1,#0
000042  f10203a4          ADD      r3,r2,#0xa4
;;;728        for(i = 0; i < SUPPORT_MAX_ITEMS; i++) {
000046  ea4f0201          MOV.W    r2,r1
00004a  7019              STRB     r1,[r3,#0]            ;727
                  |L17.76|
;;;729            mToyotaSupportList.items[i].sub_id = 0;
00004c  eb021442          ADD      r4,r2,r2,LSL #5
000050  eb030444          ADD      r4,r3,r4,LSL #1
000054  1c52              ADDS     r2,r2,#1              ;728
000056  b292              UXTH     r2,r2                 ;728
000058  7061              STRB     r1,[r4,#1]
00005a  2a20              CMP      r2,#0x20              ;728
00005c  d3f6              BCC      |L17.76|
;;;730        }
;;;731        for(i = 0; i < 1280; i++) {
;;;732            toyota_support_buffer[i] = 0x00;
00005e  4b14              LDR      r3,|L17.176|
000060  2200              MOVS     r2,#0                 ;731
000062  f44f64a0          MOV      r4,#0x500             ;731
                  |L17.102|
000066  5499              STRB     r1,[r3,r2]
000068  1c52              ADDS     r2,r2,#1              ;731
00006a  b292              UXTH     r2,r2                 ;731
00006c  42a2              CMP      r2,r4                 ;731
00006e  d3fa              BCC      |L17.102|
;;;733        }
;;;734        vehicle->init = TRUE;
000070  2101              MOVS     r1,#1
000072  7001              STRB     r1,[r0,#0]
;;;735    }
000074  bd10              POP      {r4,pc}
;;;736    
                          ENDP

000076  0000              DCW      0x0000
                  |L17.120|
                          DCD      toyota_ctrl_door
                  |L17.124|
                          DCD      ||.bss||+0x80
                  |L17.128|
                          DCD      toyota_ctrl_window
                  |L17.132|
                          DCD      toyota_ctrl_sunroof
                  |L17.136|
                          DCD      toyota_ctrl_light
                  |L17.140|
                          DCD      toyota_ctrl_findcar
                  |L17.144|
                          DCD      toyota_ctrl_trunk
                  |L17.148|
                          DCD      toyota_clear_fault_code
                  |L17.152|
                          DCD      toyota_data_stream
                  |L17.156|
                          DCD      toyota_engine_on
                  |L17.160|
                          DCD      toyota_check_fault_code
                  |L17.164|
                          DCD      toyota_init
                  |L17.168|
                          DCD      toyota_exit
                  |L17.172|
                          DCD      toyota_keepalive
                  |L17.176|
                          DCD      ||.bss||+0x981

                          AREA ||i.toyota_transfer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  toyota_transfer PROC
;;;788    
;;;789    void toyota_transfer(CanTxMsg *txMsg, uint8_t *len)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;790    {
000004  b089              SUB      sp,sp,#0x24
000006  460f              MOV      r7,r1
000008  4605              MOV      r5,r0
;;;791        uint8_t i, j;
;;;792        int8_t ret;
;;;793        uint8_t valid_len;
;;;794        uint8_t valid_index = 0;
00000a  2400              MOVS     r4,#0
;;;795        uint8_t data_type;
;;;796        uint8_t offset;
;;;797        uint8_t l_bytes = 0;
;;;798        uint8_t l_packages = 0;
;;;799        uint8_t sub_cmd = 0;
;;;800    
;;;801        uint16_t rxId;
;;;802    
;;;803        CanRxMsg *rxMsg;
;;;804    
;;;805        //clear flexcan rx buf
;;;806        flexcan_reset();
00000c  f7fffffe          BL       flexcan_reset
;;;807    
;;;808        rxId = txMsg->StdId + 0x08;
000010  8828              LDRH     r0,[r5,#0]
000012  3008              ADDS     r0,r0,#8
000014  b280              UXTH     r0,r0
;;;809        logi("rx = %04x\r\n", rxId);
000016  9005              STR      r0,[sp,#0x14]
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       OSTimeGet
00001e  f8df920c          LDR      r9,|L18.556|
000022  f2413888          MOV      r8,#0x1388
000026  f04f0a05          MOV      r10,#5
00002a  f8991000          LDRB     r1,[r9,#0]  ; DEBUG_MODE
00002e  0789              LSLS     r1,r1,#30
000030  d509              BPL      |L18.70|
000032  fbb0f1f8          UDIV     r1,r0,r8
000036  fb080211          MLS      r2,r8,r1,r0
00003a  fbb2f2fa          UDIV     r2,r2,r10
00003e  a07c              ADR      r0,|L18.560|
000040  9b05              LDR      r3,[sp,#0x14]
000042  f7fffffe          BL       __2printf
                  |L18.70|
;;;810        ret = flexcan_ioctl(DIR_BI, txMsg, rxId, 1);
000046  2301              MOVS     r3,#1
000048  4629              MOV      r1,r5
00004a  2003              MOVS     r0,#3
00004c  9a05              LDR      r2,[sp,#0x14]
00004e  f7fffffe          BL       flexcan_ioctl
;;;811        if(ret > 0) {
000052  2800              CMP      r0,#0
000054  dd7e              BLE      |L18.340|
;;;812            rxMsg = flexcan_dump();
000056  f7fffffe          BL       flexcan_dump
00005a  4606              MOV      r6,r0
;;;813            //check if the receive msg type is needed
;;;814            if(txMsg->Data[0] > 10) {
00005c  7ae8              LDRB     r0,[r5,#0xb]
00005e  280a              CMP      r0,#0xa
000060  d904              BLS      |L18.108|
;;;815                data_type = 0x40 + txMsg->Data[2];
000062  7b68              LDRB     r0,[r5,#0xd]
000064  3040              ADDS     r0,r0,#0x40
000066  b2c1              UXTB     r1,r0
;;;816                sub_cmd = txMsg->Data[3];
000068  7ba8              LDRB     r0,[r5,#0xe]
00006a  e003              B        |L18.116|
                  |L18.108|
;;;817            } else {
;;;818                data_type = 0x40 + txMsg->Data[1];
00006c  7b28              LDRB     r0,[r5,#0xc]
00006e  3040              ADDS     r0,r0,#0x40
000070  b2c1              UXTB     r1,r0
;;;819                sub_cmd = txMsg->Data[2];
000072  7b68              LDRB     r0,[r5,#0xd]
                  |L18.116|
;;;820            }
;;;821            for(i = 0; i < 8; i++) {
;;;822                toyota_rx_buf[i] = rxMsg->Data[i];
000074  4a76              LDR      r2,|L18.592|
000076  4683              MOV      r11,r0                ;819
000078  2000              MOVS     r0,#0                 ;821
                  |L18.122|
00007a  1833              ADDS     r3,r6,r0
00007c  7adb              LDRB     r3,[r3,#0xb]
00007e  5413              STRB     r3,[r2,r0]
000080  1c40              ADDS     r0,r0,#1              ;821
000082  b2c0              UXTB     r0,r0                 ;821
000084  2808              CMP      r0,#8                 ;821
000086  d3f8              BCC      |L18.122|
;;;823            }
;;;824    
;;;825            //find the valid index
;;;826            for(i = 0; i < 8; i++) {
000088  2000              MOVS     r0,#0
                  |L18.138|
;;;827                if(toyota_rx_buf[i] == data_type) {
00008a  5c13              LDRB     r3,[r2,r0]
00008c  428b              CMP      r3,r1
00008e  d101              BNE      |L18.148|
;;;828                    valid_index = i;
000090  4604              MOV      r4,r0
;;;829                    break;
000092  e003              B        |L18.156|
                  |L18.148|
000094  1c40              ADDS     r0,r0,#1              ;826
000096  b2c0              UXTB     r0,r0                 ;826
000098  2808              CMP      r0,#8                 ;826
00009a  d3f6              BCC      |L18.138|
                  |L18.156|
;;;830                }
;;;831            }
;;;832    
;;;833            if(sub_cmd != toyota_rx_buf[valid_index + 1]) {
00009c  486c              LDR      r0,|L18.592|
00009e  4420              ADD      r0,r0,r4
0000a0  7841              LDRB     r1,[r0,#1]
0000a2  4559              CMP      r1,r11
0000a4  d011              BEQ      |L18.202|
;;;834                loge("ERROR: sub_cmd = %02x, valid_index = %d\r\n",
0000a6  a801              ADD      r0,sp,#4
0000a8  f7fffffe          BL       OSTimeGet
0000ac  f8991000          LDRB     r1,[r9,#0]  ; DEBUG_MODE
0000b0  07c9              LSLS     r1,r1,#31
0000b2  d00a              BEQ      |L18.202|
0000b4  fbb0f1f8          UDIV     r1,r0,r8
0000b8  fb080211          MLS      r2,r8,r1,r0
0000bc  fbb2f2fa          UDIV     r2,r2,r10
0000c0  465b              MOV      r3,r11
0000c2  a064              ADR      r0,|L18.596|
0000c4  9400              STR      r4,[sp,#0]
0000c6  f7fffffe          BL       __2printf
                  |L18.202|
;;;835                        sub_cmd, valid_index);
;;;836            }
;;;837    
;;;838            //check if this recv package is a long package
;;;839            if(toyota_rx_buf[0] == 0x10) {
0000ca  4861              LDR      r0,|L18.592|
0000cc  7800              LDRB     r0,[r0,#0]  ; toyota_rx_buf
0000ce  2810              CMP      r0,#0x10
0000d0  d007              BEQ      |L18.226|
;;;840                l_bytes = toyota_rx_buf[1];
;;;841                l_packages = 0;
;;;842                l_packages = (l_bytes - 6) / 7;
;;;843                if((l_bytes - 6) % 7 > 0) {
;;;844                    l_packages += 1;
;;;845                }
;;;846                for(i = 2; i < 8; i++) {
;;;847                    toyota_rx_buf[i - 2] = rxMsg->Data[i];
;;;848                }
;;;849                //send continue package
;;;850                ret = flexcan_ioctl(DIR_BI, &toyota_continue_package,
;;;851                        rxId, l_packages);
;;;852                if(ret == l_packages) {
;;;853                    for(i = 0;i < ret; i++) {
;;;854                        rxMsg = flexcan_dump();
;;;855                        for(j = 0; j < 7; j++) {
;;;856                            toyota_rx_buf[6 + i * 7 + j] = rxMsg->Data[j + 1];
;;;857                        }
;;;858                    }
;;;859                } else {
;;;860                    loge("error: ret = %d\r\n", ret);
;;;861                }
;;;862                *len = l_bytes;
;;;863            }
;;;864            //short package
;;;865            else {
;;;866                if(txMsg->Data[0] > 10) {
0000d2  7ae8              LDRB     r0,[r5,#0xb]
0000d4  280a              CMP      r0,#0xa
0000d6  d955              BLS      |L18.388|
;;;867                    data_type = 0x40 + txMsg->Data[2];
0000d8  7b68              LDRB     r0,[r5,#0xd]
;;;868                    sub_cmd = txMsg->Data[3];
0000da  7bae              LDRB     r6,[r5,#0xe]
0000dc  3040              ADDS     r0,r0,#0x40           ;867
0000de  b2c1              UXTB     r1,r0                 ;867
0000e0  e054              B        |L18.396|
                  |L18.226|
0000e2  4c5b              LDR      r4,|L18.592|
0000e4  f894b001          LDRB     r11,[r4,#1]           ;840  ; toyota_rx_buf
0000e8  2107              MOVS     r1,#7                 ;842
0000ea  f1ab0006          SUB      r0,r11,#6             ;842
0000ee  fb90f2f1          SDIV     r2,r0,r1              ;842
0000f2  fb010012          MLS      r0,r1,r2,r0           ;843
0000f6  b2d5              UXTB     r5,r2                 ;842
0000f8  2800              CMP      r0,#0                 ;843
0000fa  dd01              BLE      |L18.256|
0000fc  1c6d              ADDS     r5,r5,#1              ;844
0000fe  b2ed              UXTB     r5,r5                 ;844
                  |L18.256|
000100  2002              MOVS     r0,#2                 ;846
                  |L18.258|
000102  1831              ADDS     r1,r6,r0              ;847
000104  1822              ADDS     r2,r4,r0              ;847
000106  7ac9              LDRB     r1,[r1,#0xb]          ;847
000108  f8021c02          STRB     r1,[r2,#-2]           ;847
00010c  1c40              ADDS     r0,r0,#1              ;846
00010e  b2c0              UXTB     r0,r0                 ;846
000110  2808              CMP      r0,#8                 ;846
000112  d3f6              BCC      |L18.258|
000114  462b              MOV      r3,r5                 ;850
000116  495e              LDR      r1,|L18.656|
000118  2003              MOVS     r0,#3                 ;850
00011a  9a05              LDR      r2,[sp,#0x14]         ;850
00011c  f7fffffe          BL       flexcan_ioctl
000120  4606              MOV      r6,r0                 ;850
000122  42a8              CMP      r0,r5                 ;852
000124  d11a              BNE      |L18.348|
000126  2500              MOVS     r5,#0                 ;853
000128  e013              B        |L18.338|
00012a  bf00              NOP                            ;854
                  |L18.300|
00012c  f7fffffe          BL       flexcan_dump
000130  4601              MOV      r1,r0                 ;854
000132  2000              MOVS     r0,#0                 ;855
000134  ebc502c5          RSB      r2,r5,r5,LSL #3       ;856
                  |L18.312|
000138  180b              ADDS     r3,r1,r0              ;856
00013a  eb020c00          ADD      r12,r2,r0             ;856
00013e  44a4              ADD      r12,r12,r4            ;856
000140  7b1b              LDRB     r3,[r3,#0xc]          ;856
000142  f88c3006          STRB     r3,[r12,#6]           ;856
000146  1c40              ADDS     r0,r0,#1              ;855
000148  b2c0              UXTB     r0,r0                 ;855
00014a  2807              CMP      r0,#7                 ;855
00014c  d3f4              BCC      |L18.312|
00014e  1c6d              ADDS     r5,r5,#1              ;853
000150  b2ed              UXTB     r5,r5                 ;853
                  |L18.338|
000152  e000              B        |L18.342|
                  |L18.340|
000154  e057              B        |L18.518|
                  |L18.342|
000156  42b5              CMP      r5,r6                 ;853
000158  dbe8              BLT      |L18.300|
00015a  e010              B        |L18.382|
                  |L18.348|
00015c  a801              ADD      r0,sp,#4              ;860
00015e  f7fffffe          BL       OSTimeGet
000162  f8991000          LDRB     r1,[r9,#0]            ;860  ; DEBUG_MODE
000166  07c9              LSLS     r1,r1,#31             ;860
000168  d009              BEQ      |L18.382|
00016a  fbb0f1f8          UDIV     r1,r0,r8              ;860
00016e  fb080211          MLS      r2,r8,r1,r0           ;860
000172  fbb2f2fa          UDIV     r2,r2,r10             ;860
000176  4633              MOV      r3,r6                 ;860
000178  a046              ADR      r0,|L18.660|
00017a  f7fffffe          BL       __2printf
                  |L18.382|
00017e  f887b000          STRB     r11,[r7,#0]           ;862
000182  e02e              B        |L18.482|
                  |L18.388|
;;;869                } else {
;;;870                    data_type = 0x40 + txMsg->Data[1];
000184  7b28              LDRB     r0,[r5,#0xc]
;;;871                    sub_cmd = txMsg->Data[2];
000186  7b6e              LDRB     r6,[r5,#0xd]
000188  3040              ADDS     r0,r0,#0x40           ;870
00018a  b2c1              UXTB     r1,r0                 ;870
                  |L18.396|
00018c  4d30              LDR      r5,|L18.592|
;;;872                }
;;;873                //find the valid index
;;;874                for(i = 0; i < 8; i++) {
00018e  2000              MOVS     r0,#0
                  |L18.400|
;;;875                    if(toyota_rx_buf[i] == data_type) {
000190  5c2a              LDRB     r2,[r5,r0]
000192  428a              CMP      r2,r1
000194  d101              BNE      |L18.410|
;;;876                        valid_index = i;
000196  4604              MOV      r4,r0
;;;877                        break;
000198  e003              B        |L18.418|
                  |L18.410|
00019a  1c40              ADDS     r0,r0,#1              ;874
00019c  b2c0              UXTB     r0,r0                 ;874
00019e  2808              CMP      r0,#8                 ;874
0001a0  d3f6              BCC      |L18.400|
                  |L18.418|
;;;878                    }
;;;879                }
;;;880                if(sub_cmd != toyota_rx_buf[valid_index + 1]) {
0001a2  1928              ADDS     r0,r5,r4
0001a4  7840              LDRB     r0,[r0,#1]
0001a6  42b0              CMP      r0,r6
0001a8  d011              BEQ      |L18.462|
;;;881                    loge("sub_cmd = %02x, valid_index = %d\r\n",
0001aa  a801              ADD      r0,sp,#4
0001ac  f7fffffe          BL       OSTimeGet
0001b0  f8991000          LDRB     r1,[r9,#0]  ; DEBUG_MODE
0001b4  07c9              LSLS     r1,r1,#31
0001b6  d00a              BEQ      |L18.462|
0001b8  fbb0f1f8          UDIV     r1,r0,r8
0001bc  fb080211          MLS      r2,r8,r1,r0
0001c0  fbb2f2fa          UDIV     r2,r2,r10
0001c4  4633              MOV      r3,r6
0001c6  a03c              ADR      r0,|L18.696|
0001c8  9400              STR      r4,[sp,#0]
0001ca  f7fffffe          BL       __2printf
                  |L18.462|
;;;882                            sub_cmd, valid_index);
;;;883                }
;;;884                //shift the valid data to head
;;;885                for(i = 0; i < 8; i++) {
0001ce  2000              MOVS     r0,#0
                  |L18.464|
;;;886                    toyota_rx_buf[i] = toyota_rx_buf[valid_index + i];
0001d0  1821              ADDS     r1,r4,r0
0001d2  5c69              LDRB     r1,[r5,r1]
0001d4  5429              STRB     r1,[r5,r0]
0001d6  1c40              ADDS     r0,r0,#1              ;885
0001d8  b2c0              UXTB     r0,r0                 ;885
0001da  2808              CMP      r0,#8                 ;885
0001dc  d3f8              BCC      |L18.464|
;;;887                }
;;;888                *len = 8;
0001de  2008              MOVS     r0,#8
0001e0  7038              STRB     r0,[r7,#0]
                  |L18.482|
;;;889            }
;;;890    
;;;891            for(i = 0; i < *len; i++) {
0001e2  2400              MOVS     r4,#0
0001e4  4d1a              LDR      r5,|L18.592|
0001e6  e005              B        |L18.500|
                  |L18.488|
;;;892                printf("%02x ", toyota_rx_buf[i]);
0001e8  5d29              LDRB     r1,[r5,r4]
0001ea  a040              ADR      r0,|L18.748|
0001ec  f7fffffe          BL       __2printf
0001f0  1c64              ADDS     r4,r4,#1              ;891
0001f2  b2e4              UXTB     r4,r4                 ;891
                  |L18.500|
0001f4  7838              LDRB     r0,[r7,#0]            ;891
0001f6  42a0              CMP      r0,r4                 ;891
0001f8  d8f6              BHI      |L18.488|
;;;893            }
;;;894            printf("\r\n");
0001fa  b009              ADD      sp,sp,#0x24
0001fc  a023              ADR      r0,|L18.652|
0001fe  e8bd4ff0          POP      {r4-r11,lr}
000202  f7ffbffe          B.W      __2printf
                  |L18.518|
;;;895        } else {
;;;896            loge("Error\r\n");
000206  4668              MOV      r0,sp
000208  f7fffffe          BL       OSTimeGet
00020c  f8991000          LDRB     r1,[r9,#0]  ; DEBUG_MODE
000210  07c9              LSLS     r1,r1,#31
000212  d008              BEQ      |L18.550|
000214  fbb0f1f8          UDIV     r1,r0,r8
000218  fb080211          MLS      r2,r8,r1,r0
00021c  fbb2f2fa          UDIV     r2,r2,r10
000220  a034              ADR      r0,|L18.756|
000222  f7fffffe          BL       __2printf
                  |L18.550|
;;;897        }
;;;898    
;;;899    }
000226  b009              ADD      sp,sp,#0x24
000228  e8bd8ff0          POP      {r4-r11,pc}
;;;900    
                          ENDP

                  |L18.556|
                          DCD      DEBUG_MODE
                  |L18.560|
000230  5b253035          DCB      "[%05d.%03d/I]: rx = %04x\r\n\r\n",0
000234  642e2530
000238  33642f49
00023c  5d3a2072
000240  78203d20
000244  25303478
000248  0d0a0d0a
00024c  00      
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L18.592|
                          DCD      ||.bss||
                  |L18.596|
000254  5b253035          DCB      "[%05d.%03d/E]: ERROR: sub_cmd = %02x, valid_index = %d\r"
000258  642e2530
00025c  33642f45
000260  5d3a2045
000264  52524f52
000268  3a207375
00026c  625f636d
000270  64203d20
000274  25303278
000278  2c207661
00027c  6c69645f
000280  696e6465
000284  78203d20
000288  25640d  
00028b  0a                DCB      "\n"
                  |L18.652|
00028c  0d0a00            DCB      "\r\n",0
00028f  00                DCB      0
                  |L18.656|
                          DCD      ||.data||+0x168
                  |L18.660|
000294  5b253035          DCB      "[%05d.%03d/E]: error: ret = %d\r\n\r\n",0
000298  642e2530
00029c  33642f45
0002a0  5d3a2065
0002a4  72726f72
0002a8  3a207265
0002ac  74203d20
0002b0  25640d0a
0002b4  0d0a00  
0002b7  00                DCB      0
                  |L18.696|
0002b8  5b253035          DCB      "[%05d.%03d/E]: sub_cmd = %02x, valid_index = %d\r\n\r\n"
0002bc  642e2530
0002c0  33642f45
0002c4  5d3a2073
0002c8  75625f63
0002cc  6d64203d
0002d0  20253032
0002d4  782c2076
0002d8  616c6964
0002dc  5f696e64
0002e0  6578203d
0002e4  2025640d
0002e8  0a0d0a  
0002eb  00                DCB      0
                  |L18.748|
0002ec  25303278          DCB      "%02x ",0
0002f0  2000    
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L18.756|
0002f4  5b253035          DCB      "[%05d.%03d/E]: Error\r\n\r\n",0
0002f8  642e2530
0002fc  33642f45
000300  5d3a2045
000304  72726f72
000308  0d0a0d0a
00030c  00      
00030d  00                DCB      0
00030e  00                DCB      0
00030f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  toyota_rx_buf
                          %        128
                  toyota_ctrl_ops
                          %        28
                  toyota_data_ops
                          %        24
                  toyota_code_val
                          %        40
                  toyota_fault_data
                          %        100
                  mToyotaSupportList
                          %        2113
                  toyota_support_buffer
                          %        1280

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  746f796f          DCB      0x74,0x6f,0x79,0x6f
000004  74615f67          DCB      0x74,0x61,0x5f,0x67
000008  65745f73          DCB      0x65,0x74,0x5f,0x73
00000c  7570706f          DCB      0x75,0x70,0x70,0x6f
000010  72746564          DCB      0x72,0x74,0x65,0x64
000014  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  toyota_lamp_on
                          DCD      0x00000750
                          DCD      0x18db33f1
000008  00000840          DCB      0x00,0x00,0x08,0x40
00000c  06301500          DCB      0x06,0x30,0x15,0x00
000010  40000000          DCB      0x40,0x00,0x00,0x00
                  toyota_lamp_off
                          DCD      0x00000750
                          DCD      0x18db33f1
00001c  00000840          DCB      0x00,0x00,0x08,0x40
000020  06301500          DCB      0x06,0x30,0x15,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_door_on
                          DCD      0x00000750
                          DCD      0x18db33f1
000030  00000840          DCB      0x00,0x00,0x08,0x40
000034  05301100          DCB      0x05,0x30,0x11,0x00
000038  40000000          DCB      0x40,0x00,0x00,0x00
                  toyota_door_off
                          DCD      0x00000750
                          DCD      0x18db33f1
000044  00000840          DCB      0x00,0x00,0x08,0x40
000048  05301100          DCB      0x05,0x30,0x11,0x00
00004c  80000000          DCB      0x80,0x00,0x00,0x00
                  toyota_trunk_on
                          DCD      0x00000750
                          DCD      0x18db33f1
000058  00000840          DCB      0x00,0x00,0x08,0x40
00005c  053011ff          DCB      0x05,0x30,0x11,0xff
000060  00800000          DCB      0x00,0x80,0x00,0x00
                  toyota_trunk_off
                          DCD      0x00000750
                          DCD      0x18db33f1
00006c  00000840          DCB      0x00,0x00,0x08,0x40
000070  053011ff          DCB      0x05,0x30,0x11,0xff
000074  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_sunroof_on
                          DCD      0x00000750
                          DCD      0x18db33f1
000080  000008ad          DCB      0x00,0x00,0x08,0xad
000084  04300101          DCB      0x04,0x30,0x01,0x01
000088  40000000          DCB      0x40,0x00,0x00,0x00
                  toyota_sunroof_off
                          DCD      0x00000750
                          DCD      0x18db33f1
000094  000008ad          DCB      0x00,0x00,0x08,0xad
000098  04300101          DCB      0x04,0x30,0x01,0x01
00009c  80000000          DCB      0x80,0x00,0x00,0x00
                  toyota_window_on
                          DCD      0x00000750
                          DCD      0x18db33f1
0000a8  00000890          DCB      0x00,0x00,0x08,0x90
0000ac  04300100          DCB      0x04,0x30,0x01,0x00
0000b0  40000000          DCB      0x40,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
0000bc  00000891          DCB      0x00,0x00,0x08,0x91
0000c0  04300100          DCB      0x04,0x30,0x01,0x00
0000c4  40000000          DCB      0x40,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
0000d0  00000892          DCB      0x00,0x00,0x08,0x92
0000d4  04300100          DCB      0x04,0x30,0x01,0x00
0000d8  40000000          DCB      0x40,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
0000e4  00000893          DCB      0x00,0x00,0x08,0x93
0000e8  04300100          DCB      0x04,0x30,0x01,0x00
0000ec  40000000          DCB      0x40,0x00,0x00,0x00
                  toyota_window_off
                          DCD      0x00000750
                          DCD      0x18db33f1
0000f8  00000890          DCB      0x00,0x00,0x08,0x90
0000fc  04300100          DCB      0x04,0x30,0x01,0x00
000100  80000000          DCB      0x80,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
00010c  00000891          DCB      0x00,0x00,0x08,0x91
000110  04300100          DCB      0x04,0x30,0x01,0x00
000114  80000000          DCB      0x80,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
000120  00000892          DCB      0x00,0x00,0x08,0x92
000124  04300100          DCB      0x04,0x30,0x01,0x00
000128  80000000          DCB      0x80,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
000134  00000893          DCB      0x00,0x00,0x08,0x93
000138  04300100          DCB      0x04,0x30,0x01,0x00
00013c  80000000          DCB      0x80,0x00,0x00,0x00
                  toyota_findcar
                          DCD      0x00000750
                          DCD      0x18db33f1
000148  00000840          DCB      0x00,0x00,0x08,0x40
00014c  043006ff          DCB      0x04,0x30,0x06,0xff
000150  10000000          DCB      0x10,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
00015c  00000840          DCB      0x00,0x00,0x08,0x40
000160  04300600          DCB      0x04,0x30,0x06,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_continue_package
                          DCD      0x000007e0
                          DCD      0x18db33f1
000170  00000830          DCB      0x00,0x00,0x08,0x30
000174  000a0000          DCB      0x00,0x0a,0x00,0x00
000178  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_check_supported
                          DCD      0x000007e0
                          DCD      0x18db33f1
000184  00000802          DCB      0x00,0x00,0x08,0x02
000188  a8010000          DCB      0xa8,0x01,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
                  toyotaSupportItems
000190  00010101          DCB      0x00,0x01,0x01,0x01
000194  02010301          DCB      0x02,0x01,0x03,0x01
000198  04010501          DCB      0x04,0x01,0x05,0x01
00019c  06010701          DCB      0x06,0x01,0x07,0x01
0001a0  08010901          DCB      0x08,0x01,0x09,0x01
0001a4  0a010b01          DCB      0x0a,0x01,0x0b,0x01
0001a8  0c010d01          DCB      0x0c,0x01,0x0d,0x01
0001ac  0e000f00          DCB      0x0e,0x00,0x0f,0x00
0001b0  10011100          DCB      0x10,0x01,0x11,0x00
0001b4  12011301          DCB      0x12,0x01,0x13,0x01
0001b8  14011500          DCB      0x14,0x01,0x15,0x00
0001bc  16011701          DCB      0x16,0x01,0x17,0x01
0001c0  18011901          DCB      0x18,0x01,0x19,0x01
0001c4  1a011b00          DCB      0x1a,0x01,0x1b,0x00
0001c8  1c011d01          DCB      0x1c,0x01,0x1d,0x01
0001cc  1e011f00          DCB      0x1e,0x01,0x1f,0x00
0001d0  20002101          DCB      0x20,0x00,0x21,0x01
0001d4  22002300          DCB      0x22,0x00,0x23,0x00
0001d8  24002500          DCB      0x24,0x00,0x25,0x00
0001dc  26012701          DCB      0x26,0x01,0x27,0x01
0001e0  28012901          DCB      0x28,0x01,0x29,0x01
0001e4  2a012b00          DCB      0x2a,0x01,0x2b,0x00
0001e8  2c002d00          DCB      0x2c,0x00,0x2d,0x00
0001ec  2e012f01          DCB      0x2e,0x01,0x2f,0x01
0001f0  30013101          DCB      0x30,0x01,0x31,0x01
0001f4  32013301          DCB      0x32,0x01,0x33,0x01
0001f8  34010000          DCB      0x34,0x01,0x00,0x00
                          DCD      0x00000000
000200  0000              DCB      0x00,0x00
                  toyotaStdDs
000202  0000              DCB      0x00,0x00
000204  07e0              DCW      0x07e0
000206  0802              DCB      0x08,0x02
000208  21010000          DCB      0x21,0x01,0x00,0x00
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  07e8              DCW      0x07e8
000212  0a02              DCB      0x0a,0x02
000214  0100              DCB      0x01,0x00
000216  07e0              DCW      0x07e0
000218  08022101          DCB      0x08,0x02,0x21,0x01
00021c  00000000          DCB      0x00,0x00,0x00,0x00
000220  0000              DCB      0x00,0x00
000222  07e8              DCW      0x07e8
000224  0c010200          DCB      0x0c,0x01,0x02,0x00
000228  07e0              DCW      0x07e0
00022a  0802              DCB      0x08,0x02
00022c  21010000          DCB      0x21,0x01,0x00,0x00
000230  00000000          DCB      0x00,0x00,0x00,0x00
000234  07e8              DCW      0x07e8
000236  0901              DCB      0x09,0x01
000238  0300              DCB      0x03,0x00
00023a  07e0              DCW      0x07e0
00023c  08022101          DCB      0x08,0x02,0x21,0x01
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  0000              DCB      0x00,0x00
000246  07e8              DCW      0x07e8
000248  06010400          DCB      0x06,0x01,0x04,0x00
00024c  07e0              DCW      0x07e0
00024e  0802              DCB      0x08,0x02
000250  21410000          DCB      0x21,0x41,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  07e8              DCW      0x07e8
00025a  0502              DCB      0x05,0x02
00025c  0500              DCB      0x05,0x00
00025e  07e0              DCW      0x07e0
000260  08022101          DCB      0x08,0x02,0x21,0x01
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  0000              DCB      0x00,0x00
00026a  07e8              DCW      0x07e8
00026c  10010600          DCB      0x10,0x01,0x06,0x00
000270  07e0              DCW      0x07e0
000272  0802              DCB      0x08,0x02
000274  21010000          DCB      0x21,0x01,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  07e8              DCW      0x07e8
00027e  0d01              DCB      0x0d,0x01
000280  0700              DCB      0x07,0x00
000282  07e0              DCW      0x07e0
000284  08022101          DCB      0x08,0x02,0x21,0x01
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  0000              DCB      0x00,0x00
00028e  07e8              DCW      0x07e8
000290  01020800          DCB      0x01,0x02,0x08,0x00
000294  07e0              DCW      0x07e0
000296  0802              DCB      0x08,0x02
000298  21030000          DCB      0x21,0x03,0x00,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  07e8              DCW      0x07e8
0002a2  0301              DCB      0x03,0x01
0002a4  0900              DCB      0x09,0x00
0002a6  07e0              DCW      0x07e0
0002a8  08022103          DCB      0x08,0x02,0x21,0x03
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  0000              DCB      0x00,0x00
0002b2  07e8              DCW      0x07e8
0002b4  02010a00          DCB      0x02,0x01,0x0a,0x00
0002b8  07e0              DCW      0x07e0
0002ba  0802              DCB      0x08,0x02
0002bc  21450000          DCB      0x21,0x45,0x00,0x00
0002c0  00000000          DCB      0x00,0x00,0x00,0x00
0002c4  07e8              DCW      0x07e8
0002c6  0501              DCB      0x05,0x01
0002c8  0b00              DCB      0x0b,0x00
0002ca  07e0              DCW      0x07e0
0002cc  08022145          DCB      0x08,0x02,0x21,0x45
0002d0  00000000          DCB      0x00,0x00,0x00,0x00
0002d4  0000              DCB      0x00,0x00
0002d6  07e8              DCW      0x07e8
0002d8  06010c00          DCB      0x06,0x01,0x0c,0x00
0002dc  07e0              DCW      0x07e0
0002de  0802              DCB      0x08,0x02
0002e0  21450000          DCB      0x21,0x45,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  07e8              DCW      0x07e8
0002ea  0701              DCB      0x07,0x01
0002ec  0d00              DCB      0x0d,0x00
0002ee  07e0              DCW      0x07e0
0002f0  08022145          DCB      0x08,0x02,0x21,0x45
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  0000              DCB      0x00,0x00
0002fa  07e8              DCW      0x07e8
0002fc  08010e00          DCB      0x08,0x01,0x0e,0x00
000300  07df              DCW      0x07df
000302  0800              DCB      0x08,0x00
                          DCD      0x00000000
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  0000              DCW      0x0000
00030e  0000              DCB      0x00,0x00
000310  0f00              DCB      0x0f,0x00
000312  07df              DCW      0x07df
000314  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
00031c  0000              DCB      0x00,0x00
00031e  0000              DCW      0x0000
000320  00001000          DCB      0x00,0x00,0x10,0x00
000324  07e0              DCW      0x07e0
000326  0802              DCB      0x08,0x02
000328  21030000          DCB      0x21,0x03,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  07e8              DCW      0x07e8
000332  0001              DCB      0x00,0x01
000334  1100              DCB      0x11,0x00
000336  07df              DCW      0x07df
000338  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
000340  0000              DCB      0x00,0x00
000342  0000              DCW      0x0000
000344  00001200          DCB      0x00,0x00,0x12,0x00
000348  07e0              DCW      0x07e0
00034a  0802              DCB      0x08,0x02
00034c  21040000          DCB      0x21,0x04,0x00,0x00
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  07e8              DCW      0x07e8
000356  1401              DCB      0x14,0x01
000358  1300              DCB      0x13,0x00
00035a  07e0              DCW      0x07e0
00035c  08022104          DCB      0x08,0x02,0x21,0x04
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  0000              DCB      0x00,0x00
000366  07e8              DCW      0x07e8
000368  18011400          DCB      0x18,0x01,0x14,0x00
00036c  07e0              DCW      0x07e0
00036e  0802              DCB      0x08,0x02
000370  21010000          DCB      0x21,0x01,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  07e8              DCW      0x07e8
00037a  0501              DCB      0x05,0x01
00037c  1500              DCB      0x15,0x00
00037e  07df              DCW      0x07df
000380  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
000388  0000              DCB      0x00,0x00
00038a  0000              DCW      0x0000
00038c  00001600          DCB      0x00,0x00,0x16,0x00
000390  07c0              DCW      0x07c0
000392  0802              DCB      0x08,0x02
000394  21120000          DCB      0x21,0x12,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  07c8              DCW      0x07c8
00039e  0401              DCB      0x04,0x01
0003a0  1700              DCB      0x17,0x00
0003a2  07c0              DCW      0x07c0
0003a4  08022112          DCB      0x08,0x02,0x21,0x12
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  0000              DCB      0x00,0x00
0003ae  07c8              DCW      0x07c8
0003b0  01011800          DCB      0x01,0x01,0x18,0x00
0003b4  07e0              DCW      0x07e0
0003b6  0802              DCB      0x08,0x02
0003b8  21440000          DCB      0x21,0x44,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  07e8              DCW      0x07e8
0003c2  0202              DCB      0x02,0x02
0003c4  1900              DCB      0x19,0x00
0003c6  07e0              DCW      0x07e0
0003c8  0802213c          DCB      0x08,0x02,0x21,0x3c
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  0000              DCB      0x00,0x00
0003d2  07e8              DCW      0x07e8
0003d4  08021a00          DCB      0x08,0x02,0x1a,0x00
0003d8  07e0              DCW      0x07e0
0003da  0802              DCB      0x08,0x02
0003dc  21010000          DCB      0x21,0x01,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  07e8              DCW      0x07e8
0003e6  0301              DCB      0x03,0x01
0003e8  1b00              DCB      0x1b,0x00
0003ea  07df              DCW      0x07df
0003ec  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
0003f4  0000              DCB      0x00,0x00
0003f6  0000              DCW      0x0000
0003f8  00001c00          DCB      0x00,0x00,0x1c,0x00
0003fc  07e0              DCW      0x07e0
0003fe  0802              DCB      0x08,0x02
000400  21010000          DCB      0x21,0x01,0x00,0x00
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  07e8              DCW      0x07e8
00040a  3101              DCB      0x31,0x01
00040c  1d00              DCB      0x1d,0x00
00040e  07c0              DCW      0x07c0
000410  0802212c          DCB      0x08,0x02,0x21,0x2c
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  0000              DCB      0x00,0x00
00041a  07c8              DCW      0x07c8
00041c  02011e00          DCB      0x02,0x01,0x1e,0x00
000420  07c0              DCW      0x07c0
000422  0802              DCB      0x08,0x02
000424  212c0000          DCB      0x21,0x2c,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  07c8              DCW      0x07c8
00042e  0101              DCB      0x01,0x01
000430  1f00              DCB      0x1f,0x00
000432  07c0              DCW      0x07c0
000434  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
00043c  0000              DCB      0x00,0x00
00043e  0000              DCW      0x0000
000440  00002000          DCB      0x00,0x00,0x20,0x00
000444  07c0              DCW      0x07c0
000446  0800              DCB      0x08,0x00
                          DCD      0x00000000
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  0000              DCW      0x0000
000452  0000              DCB      0x00,0x00
000454  2100              DCB      0x21,0x00
000456  07c0              DCW      0x07c0
000458  08022182          DCB      0x08,0x02,0x21,0x82
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  0000              DCB      0x00,0x00
000462  07c8              DCW      0x07c8
000464  02022200          DCB      0x02,0x02,0x22,0x00
000468  07b0              DCW      0x07b0
00046a  0800              DCB      0x08,0x00
                          DCD      0x00000000
000470  00000000          DCB      0x00,0x00,0x00,0x00
000474  0000              DCW      0x0000
000476  0000              DCB      0x00,0x00
000478  2300              DCB      0x23,0x00
00047a  07b0              DCW      0x07b0
00047c  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
000484  0000              DCB      0x00,0x00
000486  0000              DCW      0x0000
000488  00002400          DCB      0x00,0x00,0x24,0x00
00048c  07b0              DCW      0x07b0
00048e  0800              DCB      0x08,0x00
                          DCD      0x00000000
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  0000              DCW      0x0000
00049a  0000              DCB      0x00,0x00
00049c  2500              DCB      0x25,0x00
00049e  07b0              DCW      0x07b0
0004a0  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
0004a8  0000              DCB      0x00,0x00
0004aa  0000              DCW      0x0000
0004ac  00002600          DCB      0x00,0x00,0x26,0x00
0004b0  07e0              DCW      0x07e0
0004b2  0802              DCB      0x08,0x02
0004b4  21010000          DCB      0x21,0x01,0x00,0x00
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  07e8              DCW      0x07e8
0004be  1a02              DCB      0x1a,0x02
0004c0  2700              DCB      0x27,0x00
0004c2  0750              DCW      0x0750
0004c4  08400221          DCB      0x08,0x40,0x02,0x21
0004c8  a2000000          DCB      0xa2,0x00,0x00,0x00
0004cc  0000              DCB      0x00,0x00
0004ce  0758              DCW      0x0758
0004d0  00012800          DCB      0x00,0x01,0x28,0x00
0004d4  0750              DCW      0x0750
0004d6  0840              DCB      0x08,0x40
0004d8  0221a300          DCB      0x02,0x21,0xa3,0x00
0004dc  00000000          DCB      0x00,0x00,0x00,0x00
0004e0  0758              DCW      0x0758
0004e2  0001              DCB      0x00,0x01
0004e4  2900              DCB      0x29,0x00
0004e6  0750              DCW      0x0750
0004e8  08400221          DCB      0x08,0x40,0x02,0x21
0004ec  a3000000          DCB      0xa3,0x00,0x00,0x00
0004f0  0000              DCB      0x00,0x00
0004f2  0758              DCW      0x0758
0004f4  02012a00          DCB      0x02,0x01,0x2a,0x00
0004f8  0750              DCW      0x0750
0004fa  0840              DCB      0x08,0x40
0004fc  0221a300          DCB      0x02,0x21,0xa3,0x00
000500  00000000          DCB      0x00,0x00,0x00,0x00
000504  0758              DCW      0x0758
000506  0301              DCB      0x03,0x01
000508  2b00              DCB      0x2b,0x00
00050a  0750              DCW      0x0750
00050c  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
000514  0000              DCB      0x00,0x00
000516  0000              DCW      0x0000
000518  00002c00          DCB      0x00,0x00,0x2c,0x00
00051c  0750              DCW      0x0750
00051e  0800              DCB      0x08,0x00
                          DCD      0x00000000
000524  00000000          DCB      0x00,0x00,0x00,0x00
000528  0000              DCW      0x0000
00052a  0000              DCB      0x00,0x00
00052c  2d00              DCB      0x2d,0x00
00052e  0750              DCW      0x0750
000530  08000000          DCB      0x08,0x00,0x00,0x00
                          DCD      0x00000000
000538  0000              DCB      0x00,0x00
00053a  0000              DCW      0x0000
00053c  00002e00          DCB      0x00,0x00,0x2e,0x00
000540  0750              DCW      0x0750
000542  0870              DCB      0x08,0x70
000544  02210100          DCB      0x02,0x21,0x01,0x00
000548  00000000          DCB      0x00,0x00,0x00,0x00
00054c  0758              DCW      0x0758
00054e  0101              DCB      0x01,0x01
000550  2f00              DCB      0x2f,0x00
000552  07c0              DCW      0x07c0
000554  08022112          DCB      0x08,0x02,0x21,0x12
000558  00000000          DCB      0x00,0x00,0x00,0x00
00055c  0000              DCB      0x00,0x00
00055e  07c8              DCW      0x07c8
000560  05013000          DCB      0x05,0x01,0x30,0x00
000564  0750              DCW      0x0750
000566  0840              DCB      0x08,0x40
000568  0221a700          DCB      0x02,0x21,0xa7,0x00
00056c  00000000          DCB      0x00,0x00,0x00,0x00
000570  0758              DCW      0x0758
000572  0201              DCB      0x02,0x01
000574  3100              DCB      0x31,0x00
000576  07c0              DCW      0x07c0
000578  080221b1          DCB      0x08,0x02,0x21,0xb1
00057c  00000000          DCB      0x00,0x00,0x00,0x00
000580  0000              DCB      0x00,0x00
000582  07c8              DCW      0x07c8
000584  02013200          DCB      0x02,0x01,0x32,0x00
000588  07c0              DCW      0x07c0
00058a  0802              DCB      0x08,0x02
00058c  21120000          DCB      0x21,0x12,0x00,0x00
000590  00000000          DCB      0x00,0x00,0x00,0x00
000594  07c8              DCW      0x07c8
000596  0401              DCB      0x04,0x01
000598  3300              DCB      0x33,0x00
00059a  07c0              DCW      0x07c0
00059c  08022112          DCB      0x08,0x02,0x21,0x12
0005a0  00000000          DCB      0x00,0x00,0x00,0x00
0005a4  0000              DCB      0x00,0x00
0005a6  07c8              DCW      0x07c8
0005a8  04013400          DCB      0x04,0x01,0x34,0x00
0005ac  07e0              DCW      0x07e0
0005ae  0802              DCB      0x08,0x02
0005b0  21280000          DCB      0x21,0x28,0x00,0x00
0005b4  00000000          DCB      0x00,0x00,0x00,0x00
0005b8  07e8              DCW      0x07e8
0005ba  0003              DCB      0x00,0x03
                          %        72
                  toyota_fault_code
                          DCD      0x000007e0
                          DCD      0x18db33f1
00060c  00000802          DCB      0x00,0x00,0x08,0x02
000610  13b00000          DCB      0x13,0xb0,0x00,0x00
000614  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007e0
                          DCD      0x18db33f1
000620  00000802          DCB      0x00,0x00,0x08,0x02
000624  13b00000          DCB      0x13,0xb0,0x00,0x00
000628  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007b0
                          DCD      0x18db33f1
000634  00000802          DCB      0x00,0x00,0x08,0x02
000638  13800000          DCB      0x13,0x80,0x00,0x00
00063c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000780
                          DCD      0x18db33f1
000648  00000802          DCB      0x00,0x00,0x08,0x02
00064c  13810000          DCB      0x13,0x81,0x00,0x00
000650  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
00065c  00000840          DCB      0x00,0x00,0x08,0x40
000660  02138100          DCB      0x02,0x13,0x81,0x00
000664  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007c0
                          DCD      0x18db33f1
000670  00000802          DCB      0x00,0x00,0x08,0x02
000674  13810000          DCB      0x13,0x81,0x00,0x00
000678  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007a1
                          DCD      0x18db33f1
000684  00000802          DCB      0x00,0x00,0x08,0x02
000688  13810000          DCB      0x13,0x81,0x00,0x00
00068c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007c4
                          DCD      0x18db33f1
000698  00000802          DCB      0x00,0x00,0x08,0x02
00069c  13810000          DCB      0x13,0x81,0x00,0x00
0006a0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        40
                  toyota_clear_fault
                          DCD      0x000007e0
                          DCD      0x18db33f1
0006d4  00000801          DCB      0x00,0x00,0x08,0x01
0006d8  04000000          DCB      0x04,0x00,0x00,0x00
0006dc  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007e0
                          DCD      0x18db33f1
0006e8  00000801          DCB      0x00,0x00,0x08,0x01
0006ec  04000000          DCB      0x04,0x00,0x00,0x00
0006f0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007b0
                          DCD      0x18db33f1
0006fc  00000801          DCB      0x00,0x00,0x08,0x01
000700  14000000          DCB      0x14,0x00,0x00,0x00
000704  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000780
                          DCD      0x18db33f1
000710  00000801          DCB      0x00,0x00,0x08,0x01
000714  14000000          DCB      0x14,0x00,0x00,0x00
000718  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000750
                          DCD      0x18db33f1
000724  00000840          DCB      0x00,0x00,0x08,0x40
000728  01140000          DCB      0x01,0x14,0x00,0x00
00072c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007c0
                          DCD      0x18db33f1
000738  00000801          DCB      0x00,0x00,0x08,0x01
00073c  14000000          DCB      0x14,0x00,0x00,0x00
000740  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007a1
                          DCD      0x18db33f1
00074c  00000801          DCB      0x00,0x00,0x08,0x01
000750  14000000          DCB      0x14,0x00,0x00,0x00
000754  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000007c4
                          DCD      0x18db33f1
000760  00000801          DCB      0x00,0x00,0x08,0x01
000764  14000000          DCB      0x14,0x00,0x00,0x00
000768  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x18db33f1
000774  00000801          DCB      0x00,0x00,0x08,0x01
000778  04000000          DCB      0x04,0x00,0x00,0x00
00077c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        20
                  toyotaEngineCmd
                          DCD      0x000007df
                          DCD      0x18db33f1
00079c  00000802          DCB      0x00,0x00,0x08,0x02
0007a0  01000000          DCB      0x01,0x00,0x00,0x00
0007a4  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_eng_keepalive
                          DCD      0x000007e0
                          DCD      0x18db33f1
0007b0  00000802          DCB      0x00,0x00,0x08,0x02
0007b4  3e010000          DCB      0x3e,0x01,0x00,0x00
0007b8  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_at_keepalive
                          DCD      0x000007c0
                          DCD      0x18db33f1
0007c4  00000802          DCB      0x00,0x00,0x08,0x02
0007c8  3e010000          DCB      0x3e,0x01,0x00,0x00
0007cc  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_bcm_keepalive
                          DCD      0x00000750
                          DCD      0x18db33f1
0007d8  00000840          DCB      0x00,0x00,0x08,0x40
0007dc  013e0100          DCB      0x01,0x3e,0x01,0x00
0007e0  00000000          DCB      0x00,0x00,0x00,0x00
                  toyota_wakeup
                          DCD      0x00000020
                          DCD      0x18db33f1
0007ec  000004e0          DCB      0x00,0x00,0x04,0xe0
0007f0  00070b00          DCB      0x00,0x07,0x0b,0x00
0007f4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000000ba
                          DCD      0x18db33f1
000800  00000400          DCB      0x00,0x00,0x04,0x00
000804  0000be00          DCB      0x00,0x00,0xbe,0x00
000808  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||area_number.24||, DATA, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.data||
                  toyota_keepalive_normal
                          DCD      0x00000750
                          DCD      0x18db33f1
000008  00000840          DCB      0x00,0x00,0x08,0x40
00000c  013e0000          DCB      0x01,0x3e,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  toyota_keepalive_door
                          DCD      0x00000750
                          DCD      0x18db33f1
000008  00000890          DCB      0x00,0x00,0x08,0x90
00000c  013e0000          DCB      0x01,0x3e,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||area_number.26||, DATA, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.data||
                  toyota_test
                          DCD      0x000007e0
                          DCD      0x18db33f1
000008  00000802          DCB      0x00,0x00,0x08,0x02
00000c  21010000          DCB      0x21,0x01,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
