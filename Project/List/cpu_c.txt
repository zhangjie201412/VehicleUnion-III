; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\cpu_c.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\cpu_c.crf ..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView\cpu_c.c]
                          THUMB

                          AREA ||i.CPU_BitBandClr||, CODE, READONLY, ALIGN=1

                  CPU_BitBandClr PROC
;;;134    
;;;135    void  CPU_BitBandClr (CPU_ADDR    addr,
000000  b530              PUSH     {r4,r5,lr}
;;;136                          CPU_INT08U  bit_nbr)
;;;137    {
;;;138        CPU_ADDR  bit_word_off;
;;;139        CPU_ADDR  bit_word_addr;
;;;140    
;;;141    
;;;142        if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
000002  f1a05400          SUB      r4,r0,#0x20000000
000006  f44f1580          MOV      r5,#0x100000
00000a  2300              MOVS     r3,#0
;;;143            (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
;;;144            bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
00000c  0142              LSLS     r2,r0,#5
00000e  42ac              CMP      r4,r5                 ;142
000010  d204              BCS      |L1.28|
000012  eb020081          ADD      r0,r2,r1,LSL #2
;;;145            bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
000016  f1005008          ADD      r0,r0,#0x22000000
;;;146    
;;;147          *(volatile CPU_INT32U *)(bit_word_addr) = 0;
00001a  e007              B        |L1.44|
                  |L1.28|
;;;148    
;;;149        } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
00001c  f1a04080          SUB      r0,r0,#0x40000000
000020  42a8              CMP      r0,r5
000022  d204              BCS      |L1.46|
;;;150                   (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
;;;151            bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
000024  eb020081          ADD      r0,r2,r1,LSL #2
;;;152            bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
000028  f1004084          ADD      r0,r0,#0x42000000
                  |L1.44|
00002c  6003              STR      r3,[r0,#0]            ;147
                  |L1.46|
;;;153    
;;;154          *(volatile CPU_INT32U *)(bit_word_addr) = 0;
;;;155        }
;;;156    }
00002e  bd30              POP      {r4,r5,pc}
;;;157    
                          ENDP


                          AREA ||i.CPU_BitBandSet||, CODE, READONLY, ALIGN=1

                  CPU_BitBandSet PROC
;;;177    
;;;178    void  CPU_BitBandSet (CPU_ADDR    addr,
000000  b530              PUSH     {r4,r5,lr}
;;;179                          CPU_INT08U  bit_nbr)
;;;180    {
;;;181        CPU_ADDR  bit_word_off;
;;;182        CPU_ADDR  bit_word_addr;
;;;183    
;;;184    
;;;185        if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
000002  f1a05400          SUB      r4,r0,#0x20000000
000006  f44f1580          MOV      r5,#0x100000
;;;186            (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
;;;187            bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
00000a  0142              LSLS     r2,r0,#5
;;;188            bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
;;;189    
;;;190          *(volatile CPU_INT32U *)(bit_word_addr) = 1;
00000c  2301              MOVS     r3,#1
00000e  42ac              CMP      r4,r5                 ;185
000010  d204              BCS      |L2.28|
000012  eb020081          ADD      r0,r2,r1,LSL #2       ;187
000016  f1005008          ADD      r0,r0,#0x22000000     ;188
00001a  e007              B        |L2.44|
                  |L2.28|
;;;191    
;;;192        } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
00001c  f1a04080          SUB      r0,r0,#0x40000000
000020  42a8              CMP      r0,r5
000022  d204              BCS      |L2.46|
;;;193                   (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
;;;194            bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
000024  eb020081          ADD      r0,r2,r1,LSL #2
;;;195            bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
000028  f1004084          ADD      r0,r0,#0x42000000
                  |L2.44|
00002c  6003              STR      r3,[r0,#0]            ;190
                  |L2.46|
;;;196    
;;;197          *(volatile CPU_INT32U *)(bit_word_addr) = 1;
;;;198        }
;;;199    }
00002e  bd30              POP      {r4,r5,pc}
;;;200    
                          ENDP


                          AREA ||i.CPU_IntSrcDis||, CODE, READONLY, ALIGN=2

                  CPU_IntSrcDis PROC
;;;251    /*$PAGE*/
;;;252    void  CPU_IntSrcDis (CPU_INT08U  pos)
000000  b570              PUSH     {r4-r6,lr}
;;;253    {
;;;254        CPU_INT08U  group;
;;;255        CPU_INT08U  pos_max;
;;;256        CPU_INT08U  nbr;
;;;257        CPU_SR_ALLOC();
;;;258    
;;;259    
;;;260        switch (pos) {
;;;261            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;262            case CPU_INT_RSVD_07:
;;;263            case CPU_INT_RSVD_08:
;;;264            case CPU_INT_RSVD_09:
;;;265            case CPU_INT_RSVD_10:
;;;266            case CPU_INT_RSVD_13:
;;;267                 break;
;;;268    
;;;269    
;;;270                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;271            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;272            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;273            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;274            case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
;;;275            case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
;;;276            case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
;;;277                 break;
;;;278    
;;;279            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;280                 CPU_CRITICAL_ENTER();
;;;281                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_MEMFAULTENA;
000002  4c23              LDR      r4,|L3.144|
;;;282                 CPU_CRITICAL_EXIT();
;;;283                 break;
;;;284    
;;;285            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;286                 CPU_CRITICAL_ENTER();
;;;287                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_BUSFAULTENA;
;;;288                 CPU_CRITICAL_EXIT();
;;;289                 break;
;;;290    
;;;291            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;292                 CPU_CRITICAL_ENTER();
;;;293                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_USGFAULTENA;
;;;294                 CPU_CRITICAL_EXIT();
;;;295                 break;
;;;296    
;;;297            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;298                 CPU_CRITICAL_ENTER();
;;;299                 CPU_REG_NVIC_ST_CTRL &= ~CPU_REG_NVIC_ST_CTRL_ENABLE;
000004  f04f25e0          MOV      r5,#0xe000e000
000008  2810              CMP      r0,#0x10              ;260
00000a  d223              BCS      |L3.84|
00000c  e8dff000          TBB      [pc,r0]               ;260
000010  3e3e3e3e          DCB      0x3e,0x3e,0x3e,0x3e
000014  080e153e          DCB      0x08,0x0e,0x15,0x3e
000018  3e3e3e3e          DCB      0x3e,0x3e,0x3e,0x3e
00001c  3e3e3e1b          DCB      0x3e,0x3e,0x3e,0x1b
000020  f7fffffe          BL       CPU_SR_Save
000024  6821              LDR      r1,[r4,#0]            ;281
000026  f4213180          BIC      r1,r1,#0x10000        ;281
00002a  e004              B        |L3.54|
00002c  f7fffffe          BL       CPU_SR_Save
000030  6821              LDR      r1,[r4,#0]            ;287
000032  f4213100          BIC      r1,r1,#0x20000        ;287
                  |L3.54|
000036  6021              STR      r1,[r4,#0]            ;281
000038  e024              B        |L3.132|
00003a  f7fffffe          BL       CPU_SR_Save
00003e  6821              LDR      r1,[r4,#0]            ;293
000040  f4212180          BIC      r1,r1,#0x40000        ;293
000044  e7f7              B        |L3.54|
000046  f7fffffe          BL       CPU_SR_Save
00004a  6929              LDR      r1,[r5,#0x10]
00004c  f0210101          BIC      r1,r1,#1
000050  6129              STR      r1,[r5,#0x10]
;;;300                 CPU_CRITICAL_EXIT();
;;;301                 break;
000052  e017              B        |L3.132|
                  |L3.84|
;;;302    
;;;303    
;;;304                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;305            default:
;;;306                pos_max = CPU_INT_SRC_POS_MAX;
000054  6869              LDR      r1,[r5,#4]
000056  2230              MOVS     r2,#0x30
000058  eb021141          ADD      r1,r2,r1,LSL #5
00005c  b2c9              UXTB     r1,r1
;;;307                if (pos < pos_max) {                                /* See Note #3.                                         */
00005e  4288              CMP      r0,r1
000060  d214              BCS      |L3.140|
;;;308                     group = (pos - 16) / 32;
000062  3810              SUBS     r0,r0,#0x10
000064  17c1              ASRS     r1,r0,#31
000066  eb0061d1          ADD      r1,r0,r1,LSR #27
00006a  f3c11447          UBFX     r4,r1,#5,#8
;;;309                     nbr   = (pos - 16) % 32;
00006e  f021011f          BIC      r1,r1,#0x1f
000072  1a46              SUBS     r6,r0,r1
;;;310    
;;;311                     CPU_CRITICAL_ENTER();
000074  f7fffffe          BL       CPU_SR_Save
;;;312                     CPU_REG_NVIC_CLREN(group) = DEF_BIT(nbr);
000078  2101              MOVS     r1,#1
00007a  eb050284          ADD      r2,r5,r4,LSL #2
00007e  40b1              LSLS     r1,r1,r6
000080  f8c21180          STR      r1,[r2,#0x180]
                  |L3.132|
;;;313                     CPU_CRITICAL_EXIT();
000084  e8bd4070          POP      {r4-r6,lr}
000088  f7ffbffe          B.W      CPU_SR_Restore
                  |L3.140|
;;;314                 }
;;;315                 break;
;;;316        }
;;;317    }
00008c  bd70              POP      {r4-r6,pc}
;;;318    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      0xe000ed24

                          AREA ||i.CPU_IntSrcEn||, CODE, READONLY, ALIGN=2

                  CPU_IntSrcEn PROC
;;;340    
;;;341    void  CPU_IntSrcEn (CPU_INT08U  pos)
000000  b570              PUSH     {r4-r6,lr}
;;;342    {
;;;343        CPU_INT08U  group;
;;;344        CPU_INT08U  nbr;
;;;345        CPU_INT08U  pos_max;
;;;346        CPU_SR_ALLOC();
;;;347    
;;;348    
;;;349        switch (pos) {
;;;350            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;351            case CPU_INT_RSVD_07:
;;;352            case CPU_INT_RSVD_08:
;;;353            case CPU_INT_RSVD_09:
;;;354            case CPU_INT_RSVD_10:
;;;355            case CPU_INT_RSVD_13:
;;;356                 break;
;;;357    
;;;358    
;;;359                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;360            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;361            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;362            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;363            case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
;;;364            case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
;;;365            case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
;;;366                 break;
;;;367    
;;;368            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;369                 CPU_CRITICAL_ENTER();
;;;370                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
000002  4c23              LDR      r4,|L4.144|
;;;371                 CPU_CRITICAL_EXIT();
;;;372                 break;
;;;373    
;;;374            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;375                 CPU_CRITICAL_ENTER();
;;;376                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
;;;377                 CPU_CRITICAL_EXIT();
;;;378                 break;
;;;379    
;;;380            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;381                 CPU_CRITICAL_ENTER();
;;;382                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
;;;383                 CPU_CRITICAL_EXIT();
;;;384                 break;
;;;385    
;;;386            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;387                 CPU_CRITICAL_ENTER();
;;;388                 CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
000004  f04f25e0          MOV      r5,#0xe000e000
000008  2810              CMP      r0,#0x10              ;349
00000a  d223              BCS      |L4.84|
00000c  e8dff000          TBB      [pc,r0]               ;349
000010  3e3e3e3e          DCB      0x3e,0x3e,0x3e,0x3e
000014  080e153e          DCB      0x08,0x0e,0x15,0x3e
000018  3e3e3e3e          DCB      0x3e,0x3e,0x3e,0x3e
00001c  3e3e3e1b          DCB      0x3e,0x3e,0x3e,0x1b
000020  f7fffffe          BL       CPU_SR_Save
000024  6821              LDR      r1,[r4,#0]            ;370
000026  f4413180          ORR      r1,r1,#0x10000        ;370
00002a  e004              B        |L4.54|
00002c  f7fffffe          BL       CPU_SR_Save
000030  6821              LDR      r1,[r4,#0]            ;376
000032  f4413100          ORR      r1,r1,#0x20000        ;376
                  |L4.54|
000036  6021              STR      r1,[r4,#0]            ;370
000038  e024              B        |L4.132|
00003a  f7fffffe          BL       CPU_SR_Save
00003e  6821              LDR      r1,[r4,#0]            ;382
000040  f4412180          ORR      r1,r1,#0x40000        ;382
000044  e7f7              B        |L4.54|
000046  f7fffffe          BL       CPU_SR_Save
00004a  6929              LDR      r1,[r5,#0x10]
00004c  f0410101          ORR      r1,r1,#1
000050  6129              STR      r1,[r5,#0x10]
;;;389                 CPU_CRITICAL_EXIT();
;;;390                 break;
000052  e017              B        |L4.132|
                  |L4.84|
;;;391    
;;;392    
;;;393                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;394            default:
;;;395                pos_max = CPU_INT_SRC_POS_MAX;
000054  6869              LDR      r1,[r5,#4]
000056  2230              MOVS     r2,#0x30
000058  eb021141          ADD      r1,r2,r1,LSL #5
00005c  b2c9              UXTB     r1,r1
;;;396                if (pos < pos_max) {                                /* See Note #3.                                         */
00005e  4288              CMP      r0,r1
000060  d214              BCS      |L4.140|
;;;397                     group = (pos - 16) / 32;
000062  3810              SUBS     r0,r0,#0x10
000064  17c1              ASRS     r1,r0,#31
000066  eb0061d1          ADD      r1,r0,r1,LSR #27
00006a  f3c11447          UBFX     r4,r1,#5,#8
;;;398                     nbr   = (pos - 16) % 32;
00006e  f021011f          BIC      r1,r1,#0x1f
000072  1a46              SUBS     r6,r0,r1
;;;399    
;;;400                     CPU_CRITICAL_ENTER();
000074  f7fffffe          BL       CPU_SR_Save
;;;401                     CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
000078  2101              MOVS     r1,#1
00007a  eb050284          ADD      r2,r5,r4,LSL #2
00007e  40b1              LSLS     r1,r1,r6
000080  f8c21100          STR      r1,[r2,#0x100]
                  |L4.132|
;;;402                     CPU_CRITICAL_EXIT();
000084  e8bd4070          POP      {r4-r6,lr}
000088  f7ffbffe          B.W      CPU_SR_Restore
                  |L4.140|
;;;403                 }
;;;404                 break;
;;;405        }
;;;406    }
00008c  bd70              POP      {r4-r6,pc}
;;;407    
                          ENDP

00008e  0000              DCW      0x0000
                  |L4.144|
                          DCD      0xe000ed24

                          AREA ||i.CPU_IntSrcPendClr||, CODE, READONLY, ALIGN=1

                  CPU_IntSrcPendClr PROC
;;;439    
;;;440    void  CPU_IntSrcPendClr (CPU_INT08U  pos)
000000  b570              PUSH     {r4-r6,lr}
;;;441    
;;;442    {
;;;443        CPU_INT08U  group;
;;;444        CPU_INT08U  nbr;
;;;445        CPU_INT08U  pos_max;
;;;446        CPU_SR_ALLOC();
;;;447    
;;;448    
;;;449        switch (pos) {
000002  280f              CMP      r0,#0xf
000004  d91d              BLS      |L5.66|
;;;450            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;451            case CPU_INT_RSVD_07:
;;;452            case CPU_INT_RSVD_08:
;;;453            case CPU_INT_RSVD_09:
;;;454            case CPU_INT_RSVD_10:
;;;455            case CPU_INT_RSVD_13:
;;;456                 break;
;;;457                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;458            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;459            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;460            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;461            case CPU_INT_MEM:                                       /* Memory management (see Note #2).                     */
;;;462            case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
;;;463            case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
;;;464            case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
;;;465            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;466            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;467            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;468                 break;
;;;469                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;470            default:
;;;471                pos_max = CPU_INT_SRC_POS_MAX;
000006  f04f24e0          MOV      r4,#0xe000e000
00000a  6861              LDR      r1,[r4,#4]
00000c  2230              MOVS     r2,#0x30
00000e  eb021141          ADD      r1,r2,r1,LSL #5
000012  b2c9              UXTB     r1,r1
;;;472                if (pos < pos_max) {                                /* See Note #3.                                         */
000014  4288              CMP      r0,r1
000016  d214              BCS      |L5.66|
;;;473                     group = (pos - 16) / 32;
000018  3810              SUBS     r0,r0,#0x10
00001a  17c1              ASRS     r1,r0,#31
00001c  eb0061d1          ADD      r1,r0,r1,LSR #27
000020  f3c11547          UBFX     r5,r1,#5,#8
;;;474                     nbr   = (pos - 16) % 32;
000024  f021011f          BIC      r1,r1,#0x1f
000028  1a46              SUBS     r6,r0,r1
;;;475    
;;;476                     CPU_CRITICAL_ENTER();
00002a  f7fffffe          BL       CPU_SR_Save
;;;477                     CPU_REG_NVIC_CLRPEND(group) = DEF_BIT(nbr);
00002e  2101              MOVS     r1,#1
000030  eb040285          ADD      r2,r4,r5,LSL #2
000034  40b1              LSLS     r1,r1,r6
000036  f8c21280          STR      r1,[r2,#0x280]
;;;478                     CPU_CRITICAL_EXIT();
00003a  e8bd4070          POP      {r4-r6,lr}
00003e  f7ffbffe          B.W      CPU_SR_Restore
                  |L5.66|
;;;479                 }
;;;480                 break;
;;;481        }
;;;482    }
000042  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP


                          AREA ||i.CPU_IntSrcPrioGet||, CODE, READONLY, ALIGN=2

                  CPU_IntSrcPrioGet PROC
;;;646    
;;;647    CPU_INT16S  CPU_IntSrcPrioGet (CPU_INT08U  pos)
000000  b570              PUSH     {r4-r6,lr}
;;;648    {
;;;649        CPU_INT08U  group;
;;;650        CPU_INT08U  nbr;
;;;651        CPU_INT08U  pos_max;
;;;652        CPU_INT16S  prio;
;;;653        CPU_INT32U  prio_32;
;;;654        CPU_INT32U  temp;
;;;655        CPU_SR_ALLOC();
;;;656    
;;;657    
;;;658        switch (pos) {
;;;659            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;660            case CPU_INT_RSVD_07:
;;;661            case CPU_INT_RSVD_08:
;;;662            case CPU_INT_RSVD_09:
;;;663            case CPU_INT_RSVD_10:
;;;664            case CPU_INT_RSVD_13:
;;;665                 prio = DEF_INT_16S_MIN_VAL;
;;;666                 break;
;;;667    
;;;668    
;;;669                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;670            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;671                 prio = -3;
;;;672                 break;
;;;673    
;;;674            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;675                 prio = -2;
;;;676                 break;
;;;677    
;;;678            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;679                 prio = -1;
;;;680                 break;
;;;681    
;;;682    
;;;683            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;684                 CPU_CRITICAL_ENTER();
;;;685                 temp = CPU_REG_NVIC_SHPRI1;
;;;686                 prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
;;;687                 CPU_CRITICAL_EXIT();
;;;688                 break;
;;;689    
;;;690    
;;;691            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;692                 CPU_CRITICAL_ENTER();
;;;693                 temp = CPU_REG_NVIC_SHPRI1;
;;;694                 prio = (temp >> (1 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
;;;695                 CPU_CRITICAL_EXIT();
;;;696                 break;
;;;697    
;;;698    
;;;699            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;700                 CPU_CRITICAL_ENTER();
;;;701                 temp = CPU_REG_NVIC_SHPRI1;
;;;702                 prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
;;;703                 break;
;;;704    
;;;705            case CPU_INT_SVCALL:                                    /* SVCall.                                              */
;;;706                 CPU_CRITICAL_ENTER();
;;;707                 temp = CPU_REG_NVIC_SHPRI2;
;;;708                 prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
;;;709                 CPU_CRITICAL_EXIT();
;;;710                 break;
;;;711    
;;;712            case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
;;;713                 CPU_CRITICAL_ENTER();
;;;714                 temp = CPU_REG_NVIC_SHPRI3;
000002  4e34              LDR      r6,|L6.212|
000004  4c32              LDR      r4,|L6.208|
000006  4d33              LDR      r5,|L6.212|
000008  3608              ADDS     r6,r6,#8
00000a  2810              CMP      r0,#0x10              ;658
00000c  d23b              BCS      |L6.134|
00000e  e8dff000          TBB      [pc,r0]               ;658
000012  5c08              DCB      0x5c,0x08
000014  0b0e1115          DCB      0x0b,0x0e,0x11,0x15
000018  1e5c5c5c          DCB      0x1e,0x5c,0x5c,0x5c
00001c  5c242a5c          DCB      0x5c,0x24,0x2a,0x5c
000020  2f35              DCB      0x2f,0x35
000022  f06f0402          MVN      r4,#2                 ;671
000026  e050              B        |L6.202|
000028  f06f0401          MVN      r4,#1                 ;675
00002c  e04d              B        |L6.202|
00002e  f04f34ff          MOV      r4,#0xffffffff        ;679
000032  e04a              B        |L6.202|
000034  f7fffffe          BL       CPU_SR_Save
000038  6829              LDR      r1,[r5,#0]            ;685
00003a  e017              B        |L6.108|
00003c  f7fffffe          BL       CPU_SR_Save
000040  6829              LDR      r1,[r5,#0]            ;693
000042  f3c12407          UBFX     r4,r1,#8,#8           ;694
000046  bf00              NOP                            ;687
                  |L6.72|
000048  f7fffffe          BL       CPU_SR_Restore
00004c  e037              B        |L6.190|
00004e  f7fffffe          BL       CPU_SR_Save
000052  6828              LDR      r0,[r5,#0]            ;701
000054  f3c04407          UBFX     r4,r0,#16,#8          ;702
000058  e031              B        |L6.190|
00005a  f7fffffe          BL       CPU_SR_Save
00005e  491d              LDR      r1,|L6.212|
000060  1d09              ADDS     r1,r1,#4              ;707
000062  6809              LDR      r1,[r1,#0]            ;707
000064  e00d              B        |L6.130|
000066  f7fffffe          BL       CPU_SR_Save
00006a  6831              LDR      r1,[r6,#0]
                  |L6.108|
;;;715                 prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
00006c  b2cc              UXTB     r4,r1
00006e  e7eb              B        |L6.72|
;;;716                 CPU_CRITICAL_EXIT();
;;;717                 break;
;;;718    
;;;719            case CPU_INT_PENDSV:                                    /* PendSV.                                              */
;;;720                 CPU_CRITICAL_ENTER();
000070  f7fffffe          BL       CPU_SR_Save
;;;721                 temp = CPU_REG_NVIC_SHPRI3;
000074  6831              LDR      r1,[r6,#0]
;;;722                 prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000076  f3c14407          UBFX     r4,r1,#16,#8
;;;723                 CPU_CRITICAL_EXIT();
;;;724                 break;
00007a  e7e5              B        |L6.72|
;;;725    
;;;726            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;727                 CPU_CRITICAL_ENTER();
00007c  f7fffffe          BL       CPU_SR_Save
;;;728                 temp = CPU_REG_NVIC_SHPRI3;
000080  6831              LDR      r1,[r6,#0]
                  |L6.130|
;;;729                 prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000082  0e0c              LSRS     r4,r1,#24
000084  e7e0              B        |L6.72|
                  |L6.134|
;;;730                 CPU_CRITICAL_EXIT();
;;;731                 break;
;;;732    
;;;733    
;;;734                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;735            default:
;;;736                pos_max = CPU_INT_SRC_POS_MAX;
000086  f04f21e0          MOV      r1,#0xe000e000
00008a  6849              LDR      r1,[r1,#4]
00008c  2230              MOVS     r2,#0x30
00008e  eb021141          ADD      r1,r2,r1,LSL #5
000092  b2c9              UXTB     r1,r1
;;;737                if (pos < pos_max) {                                /* See Note #3.                                         */
000094  4288              CMP      r0,r1
000096  d218              BCS      |L6.202|
;;;738                     group = (pos - 16) / 4;
000098  3810              SUBS     r0,r0,#0x10
00009a  17c1              ASRS     r1,r0,#31
00009c  eb007191          ADD      r1,r0,r1,LSR #30
0000a0  f3c10587          UBFX     r5,r1,#2,#8
;;;739                     nbr   = (pos - 16) % 4;
0000a4  f0210103          BIC      r1,r1,#3
0000a8  1a44              SUBS     r4,r0,r1
;;;740    
;;;741                     CPU_CRITICAL_ENTER();
0000aa  f7fffffe          BL       CPU_SR_Save
;;;742                     temp  = CPU_REG_NVIC_PRIO(group);
0000ae  490a              LDR      r1,|L6.216|
0000b0  f8515025          LDR      r5,[r1,r5,LSL #2]
;;;743                     CPU_CRITICAL_EXIT();
0000b4  f7fffffe          BL       CPU_SR_Restore
0000b8  00e0              LSLS     r0,r4,#3
;;;744    
;;;745                     prio  = (temp >> (nbr * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
0000ba  40c5              LSRS     r5,r5,r0
0000bc  b2ec              UXTB     r4,r5
                  |L6.190|
;;;746                 } else {
;;;747                     prio  = DEF_INT_16S_MIN_VAL;
;;;748                 }
;;;749                 break;
;;;750        }
;;;751    
;;;752        if (prio >= 0) {
0000be  2c00              CMP      r4,#0
0000c0  db03              BLT      |L6.202|
;;;753            prio_32 = CPU_RevBits((CPU_INT32U)prio);
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       CPU_RevBits
;;;754            prio    = (CPU_INT16S)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
0000c8  0e04              LSRS     r4,r0,#24
                  |L6.202|
;;;755        }
;;;756    
;;;757        return (prio);
0000ca  4620              MOV      r0,r4
;;;758    }
0000cc  bd70              POP      {r4-r6,pc}
;;;759    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L6.208|
                          DCD      0xffff8000
                  |L6.212|
                          DCD      0xe000ed18
                  |L6.216|
                          DCD      0xe000e400

                          AREA ||i.CPU_IntSrcPrioSet||, CODE, READONLY, ALIGN=2

                  CPU_IntSrcPrioSet PROC
;;;511    
;;;512    void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;513                             CPU_INT08U  prio)
;;;514    {
000004  4605              MOV      r5,r0
000006  4608              MOV      r0,r1
;;;515        CPU_INT08U  group;
;;;516        CPU_INT08U  nbr;
;;;517        CPU_INT08U  pos_max;
;;;518        CPU_INT32U  prio_32;
;;;519        CPU_INT32U  temp;
;;;520        CPU_SR_ALLOC();
;;;521    
;;;522    
;;;523        prio_32 = CPU_RevBits((CPU_INT08U)prio);
000008  f7fffffe          BL       CPU_RevBits
;;;524        prio    = (CPU_INT08U)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
;;;525    
;;;526        switch (pos) {
;;;527            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;528            case CPU_INT_RSVD_07:
;;;529            case CPU_INT_RSVD_08:
;;;530            case CPU_INT_RSVD_09:
;;;531            case CPU_INT_RSVD_10:
;;;532            case CPU_INT_RSVD_13:
;;;533                 break;
;;;534    
;;;535    
;;;536                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;537            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;538            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;539            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;540                 break;
;;;541    
;;;542            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;543                 CPU_CRITICAL_ENTER();
;;;544                 temp                 = CPU_REG_NVIC_SHPRI1;
;;;545                 temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
;;;546                 temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
;;;547                 CPU_REG_NVIC_SHPRI1  = temp;
;;;548                 CPU_CRITICAL_EXIT();
;;;549                 break;
;;;550    
;;;551            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;552                 CPU_CRITICAL_ENTER();
;;;553                 temp                 = CPU_REG_NVIC_SHPRI1;
;;;554                 temp                &= ~(DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
;;;555                 temp                |=  (prio           << (1 * DEF_OCTET_NBR_BITS));
;;;556                 CPU_REG_NVIC_SHPRI1  = temp;
;;;557                 CPU_CRITICAL_EXIT();
;;;558                 break;
;;;559    
;;;560            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;561                 CPU_CRITICAL_ENTER();
;;;562                 temp                 = CPU_REG_NVIC_SHPRI1;
;;;563                 temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
;;;564                 temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
;;;565                 CPU_REG_NVIC_SHPRI1  = temp;
;;;566                 CPU_CRITICAL_EXIT();
;;;567                 break;
;;;568    
;;;569            case CPU_INT_SVCALL:                                    /* SVCall.                                              */
;;;570                 CPU_CRITICAL_ENTER();
;;;571                 temp                 = CPU_REG_NVIC_SHPRI2;
;;;572                 temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
;;;573                 temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
;;;574                 CPU_REG_NVIC_SHPRI2  = temp;
;;;575                 CPU_CRITICAL_EXIT();
;;;576                 break;
;;;577    
;;;578            case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
;;;579                 CPU_CRITICAL_ENTER();
;;;580                 temp                = CPU_REG_NVIC_SHPRI3;
00000c  4f37              LDR      r7,|L7.236|
00000e  0e04              LSRS     r4,r0,#24             ;524
000010  4e36              LDR      r6,|L7.236|
000012  3708              ADDS     r7,r7,#8
000014  2d10              CMP      r5,#0x10              ;526
000016  d244              BCS      |L7.162|
000018  e8dff005          TBB      [pc,r5]               ;526
00001c  66666666          DCB      0x66,0x66,0x66,0x66
000020  080f1866          DCB      0x08,0x0f,0x18,0x66
000024  66666620          DCB      0x66,0x66,0x66,0x20
000028  2b66323b          DCB      0x2b,0x66,0x32,0x3b
00002c  f7fffffe          BL       CPU_SR_Save
000030  6831              LDR      r1,[r6,#0]            ;544
000032  f02101ff          BIC      r1,r1,#0xff           ;545
000036  4321              ORRS     r1,r1,r4              ;546
000038  e006              B        |L7.72|
00003a  f7fffffe          BL       CPU_SR_Save
00003e  6831              LDR      r1,[r6,#0]            ;553
000040  f421417f          BIC      r1,r1,#0xff00         ;554
000044  ea412104          ORR      r1,r1,r4,LSL #8       ;555
                  |L7.72|
000048  6031              STR      r1,[r6,#0]            ;547
00004a  e049              B        |L7.224|
00004c  f7fffffe          BL       CPU_SR_Save
000050  6831              LDR      r1,[r6,#0]            ;562
000052  f421017f          BIC      r1,r1,#0xff0000       ;563
000056  ea414104          ORR      r1,r1,r4,LSL #16      ;564
00005a  e7f5              B        |L7.72|
00005c  f7fffffe          BL       CPU_SR_Save
000060  4922              LDR      r1,|L7.236|
000062  1d09              ADDS     r1,r1,#4              ;571
000064  680a              LDR      r2,[r1,#0]            ;571
000066  f022427f          BIC      r2,r2,#0xff000000     ;572
00006a  ea426204          ORR      r2,r2,r4,LSL #24      ;573
00006e  600a              STR      r2,[r1,#0]            ;574
000070  e036              B        |L7.224|
000072  f7fffffe          BL       CPU_SR_Save
000076  6839              LDR      r1,[r7,#0]
;;;581                 temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
000078  f02101ff          BIC      r1,r1,#0xff
;;;582                 temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
00007c  4321              ORRS     r1,r1,r4
;;;583                 CPU_REG_NVIC_SHPRI3  = temp;
;;;584                 CPU_CRITICAL_EXIT();
;;;585                 break;
00007e  e006              B        |L7.142|
;;;586    
;;;587            case CPU_INT_PENDSV:                                    /* PendSV.                                              */
;;;588                 CPU_CRITICAL_ENTER();
000080  f7fffffe          BL       CPU_SR_Save
;;;589                 temp                 = CPU_REG_NVIC_SHPRI3;
000084  6839              LDR      r1,[r7,#0]
;;;590                 temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
000086  f421017f          BIC      r1,r1,#0xff0000
;;;591                 temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
00008a  ea414104          ORR      r1,r1,r4,LSL #16
                  |L7.142|
00008e  6039              STR      r1,[r7,#0]            ;583
000090  e026              B        |L7.224|
;;;592                 CPU_REG_NVIC_SHPRI3  = temp;
;;;593                 CPU_CRITICAL_EXIT();
;;;594                 break;
;;;595    
;;;596            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;597                 CPU_CRITICAL_ENTER();
000092  f7fffffe          BL       CPU_SR_Save
;;;598                 temp                 = CPU_REG_NVIC_SHPRI3;
000096  6839              LDR      r1,[r7,#0]
;;;599                 temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
000098  f021417f          BIC      r1,r1,#0xff000000
;;;600                 temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
00009c  ea416104          ORR      r1,r1,r4,LSL #24
;;;601                 CPU_REG_NVIC_SHPRI3  = temp;
;;;602                 CPU_CRITICAL_EXIT();
;;;603                 break;
0000a0  e7f5              B        |L7.142|
                  |L7.162|
;;;604    
;;;605    
;;;606                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;607            default:
;;;608                pos_max = CPU_INT_SRC_POS_MAX;
0000a2  f04f20e0          MOV      r0,#0xe000e000
0000a6  6840              LDR      r0,[r0,#4]
0000a8  2130              MOVS     r1,#0x30
0000aa  eb011040          ADD      r0,r1,r0,LSL #5
0000ae  b2c0              UXTB     r0,r0
;;;609                if (pos < pos_max) {                                /* See Note #3.                                         */
0000b0  4285              CMP      r5,r0
0000b2  d219              BCS      |L7.232|
;;;610                     group                    = (pos - 16) / 4;
0000b4  3d10              SUBS     r5,r5,#0x10
0000b6  17e8              ASRS     r0,r5,#31
0000b8  eb057090          ADD      r0,r5,r0,LSR #30
0000bc  f3c00687          UBFX     r6,r0,#2,#8
;;;611                     nbr                      = (pos - 16) % 4;
0000c0  f0200003          BIC      r0,r0,#3
0000c4  1a2d              SUBS     r5,r5,r0
;;;612    
;;;613                     CPU_CRITICAL_ENTER();
0000c6  f7fffffe          BL       CPU_SR_Save
;;;614                     temp                     = CPU_REG_NVIC_PRIO(group);
0000ca  4909              LDR      r1,|L7.240|
0000cc  eb010286          ADD      r2,r1,r6,LSL #2
0000d0  6811              LDR      r1,[r2,#0]
0000d2  00eb              LSLS     r3,r5,#3
;;;615                     temp                    &= ~(DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
0000d4  25ff              MOVS     r5,#0xff
0000d6  409d              LSLS     r5,r5,r3
0000d8  43a9              BICS     r1,r1,r5
;;;616                     temp                    |=  (prio           << (nbr * DEF_OCTET_NBR_BITS));
0000da  409c              LSLS     r4,r4,r3
0000dc  430c              ORRS     r4,r4,r1
;;;617                     CPU_REG_NVIC_PRIO(group) = temp;
0000de  6014              STR      r4,[r2,#0]
                  |L7.224|
;;;618                     CPU_CRITICAL_EXIT();
0000e0  e8bd41f0          POP      {r4-r8,lr}
0000e4  f7ffbffe          B.W      CPU_SR_Restore
                  |L7.232|
;;;619                 }
;;;620                 break;
;;;621        }
;;;622    }
0000e8  e8bd81f0          POP      {r4-r8,pc}
;;;623    
                          ENDP

                  |L7.236|
                          DCD      0xe000ed18
                  |L7.240|
                          DCD      0xe000e400
