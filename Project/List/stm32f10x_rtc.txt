; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\stm32f10x_rtc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_rtc.crf ..\STM32F10x_FWLib\src\stm32f10x_rtc.c]
                          THUMB

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;272      */
;;;273    void RTC_ClearFlag(uint16_t RTC_FLAG)
000000  4902              LDR      r1,|L1.12|
;;;274    {
;;;275      /* Check the parameters */
;;;276      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;277        
;;;278      /* Clear the corresponding RTC flag */
;;;279      RTC->CRL &= (uint16_t)~RTC_FLAG;
000002  880a              LDRH     r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  800a              STRH     r2,[r1,#0]
;;;280    }
000008  4770              BX       lr
;;;281    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40002804

                          AREA ||i.RTC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RTC_ClearITPendingBit PROC
;;;317      */
;;;318    void RTC_ClearITPendingBit(uint16_t RTC_IT)
000000  4902              LDR      r1,|L2.12|
;;;319    {
;;;320      /* Check the parameters */
;;;321      assert_param(IS_RTC_IT(RTC_IT));  
;;;322      
;;;323      /* Clear the corresponding RTC pending bit */
;;;324      RTC->CRL &= (uint16_t)~RTC_IT;
000002  880a              LDRH     r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  800a              STRH     r2,[r1,#0]
;;;325    }
000008  4770              BX       lr
;;;326    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40002804

                          AREA ||i.RTC_EnterConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterConfigMode PROC
;;;110      */
;;;111    void RTC_EnterConfigMode(void)
000000  4802              LDR      r0,|L3.12|
;;;112    {
;;;113      /* Set the CNF flag to enter in the Configuration Mode */
;;;114      RTC->CRL |= RTC_CRL_CNF;
000002  8801              LDRH     r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  8001              STRH     r1,[r0,#0]
;;;115    }
00000a  4770              BX       lr
;;;116    
                          ENDP

                  |L3.12|
                          DCD      0x40002804

                          AREA ||i.RTC_ExitConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_ExitConfigMode PROC
;;;121      */
;;;122    void RTC_ExitConfigMode(void)
000000  4802              LDR      r0,|L4.12|
;;;123    {
;;;124      /* Reset the CNF flag to exit from the Configuration Mode */
;;;125      RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
000002  8801              LDRH     r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  8001              STRH     r1,[r0,#0]
;;;126    }
00000a  4770              BX       lr
;;;127    
                          ENDP

                  |L4.12|
                          DCD      0x40002804

                          AREA ||i.RTC_GetCounter||, CODE, READONLY, ALIGN=2

                  RTC_GetCounter PROC
;;;132      */
;;;133    uint32_t RTC_GetCounter(void)
000000  4803              LDR      r0,|L5.16|
;;;134    {
;;;135      uint16_t tmp = 0;
;;;136      tmp = RTC->CNTL;
000002  8800              LDRH     r0,[r0,#0]
;;;137      return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
000004  4902              LDR      r1,|L5.16|
000006  1f09              SUBS     r1,r1,#4
000008  8809              LDRH     r1,[r1,#0]
00000a  ea404001          ORR      r0,r0,r1,LSL #16
;;;138    }
00000e  4770              BX       lr
;;;139    
                          ENDP

                  |L5.16|
                          DCD      0x4000281c

                          AREA ||i.RTC_GetDivider||, CODE, READONLY, ALIGN=2

                  RTC_GetDivider PROC
;;;192      */
;;;193    uint32_t RTC_GetDivider(void)
000000  4804              LDR      r0,|L6.20|
;;;194    {
;;;195      uint32_t tmp = 0x00;
;;;196      tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
000002  8800              LDRH     r0,[r0,#0]
000004  0700              LSLS     r0,r0,#28
000006  0b01              LSRS     r1,r0,#12
;;;197      tmp |= RTC->DIVL;
000008  4802              LDR      r0,|L6.20|
00000a  1d00              ADDS     r0,r0,#4
00000c  8800              LDRH     r0,[r0,#0]
00000e  4308              ORRS     r0,r0,r1
;;;198      return tmp;
;;;199    }
000010  4770              BX       lr
;;;200    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40002810

                          AREA ||i.RTC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetFlagStatus PROC
;;;243      */
;;;244    FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
000000  4a03              LDR      r2,|L7.16|
;;;245    {
000002  4601              MOV      r1,r0
;;;246      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;247      
;;;248      /* Check the parameters */
;;;249      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;250      
;;;251      if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
000006  8812              LDRH     r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L7.14|
;;;252      {
;;;253        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L7.14|
;;;254      }
;;;255      else
;;;256      {
;;;257        bitstatus = RESET;
;;;258      }
;;;259      return bitstatus;
;;;260    }
00000e  4770              BX       lr
;;;261    
                          ENDP

                  |L7.16|
                          DCD      0x40002804

                          AREA ||i.RTC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetITStatus PROC
;;;290      */
;;;291    ITStatus RTC_GetITStatus(uint16_t RTC_IT)
000000  4906              LDR      r1,|L8.28|
;;;292    {
;;;293      ITStatus bitstatus = RESET;
;;;294      /* Check the parameters */
;;;295      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;296      
;;;297      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
000002  8809              LDRH     r1,[r1,#0]
000004  b2c2              UXTB     r2,r0
000006  4011              ANDS     r1,r1,r2
;;;298      if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
000008  4a04              LDR      r2,|L8.28|
00000a  1f12              SUBS     r2,r2,#4
00000c  8812              LDRH     r2,[r2,#0]
00000e  4202              TST      r2,r0
000010  d002              BEQ      |L8.24|
000012  b109              CBZ      r1,|L8.24|
;;;299      {
;;;300        bitstatus = SET;
000014  2001              MOVS     r0,#1
;;;301      }
;;;302      else
;;;303      {
;;;304        bitstatus = RESET;
;;;305      }
;;;306      return bitstatus;
;;;307    }
000016  4770              BX       lr
                  |L8.24|
000018  2000              MOVS     r0,#0                 ;304
00001a  4770              BX       lr
;;;308    
                          ENDP

                  |L8.28|
                          DCD      0x40002804

                          AREA ||i.RTC_ITConfig||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;89       */
;;;90     void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L9.20|
;;;91     {
;;;92       /* Check the parameters */
;;;93       assert_param(IS_RTC_IT(RTC_IT));  
;;;94       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;95       
;;;96       if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;97       {
;;;98         RTC->CRH |= RTC_IT;
;;;99       }
;;;100      else
;;;101      {
;;;102        RTC->CRH &= (uint16_t)~RTC_IT;
000004  8811              LDRH     r1,[r2,#0]
000006  d001              BEQ      |L9.12|
000008  4301              ORRS     r1,r1,r0              ;98
00000a  e000              B        |L9.14|
                  |L9.12|
00000c  4381              BICS     r1,r1,r0
                  |L9.14|
00000e  8011              STRH     r1,[r2,#0]            ;98
;;;103      }
;;;104    }
000010  4770              BX       lr
;;;105    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40002800

                          AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarm PROC
;;;177      */
;;;178    void RTC_SetAlarm(uint32_t AlarmValue)
000000  b500              PUSH     {lr}
;;;179    {  
000002  4602              MOV      r2,r0
;;;180      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;181      /* Set the ALARM MSB word */
;;;182      RTC->ALRH = AlarmValue >> 16;
000008  4904              LDR      r1,|L10.28|
00000a  0c10              LSRS     r0,r2,#16
00000c  8008              STRH     r0,[r1,#0]
;;;183      /* Set the ALARM LSB word */
;;;184      RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
00000e  1d08              ADDS     r0,r1,#4
000010  8002              STRH     r2,[r0,#0]
;;;185      RTC_ExitConfigMode();
000012  f85deb04          POP      {lr}
000016  f7ffbffe          B.W      RTC_ExitConfigMode
;;;186    }
;;;187    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40002820

                          AREA ||i.RTC_SetCounter||, CODE, READONLY, ALIGN=2

                  RTC_SetCounter PROC
;;;144      */
;;;145    void RTC_SetCounter(uint32_t CounterValue)
000000  b500              PUSH     {lr}
;;;146    { 
000002  4602              MOV      r2,r0
;;;147      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;148      /* Set RTC COUNTER MSB word */
;;;149      RTC->CNTH = CounterValue >> 16;
000008  4904              LDR      r1,|L11.28|
00000a  0c10              LSRS     r0,r2,#16
00000c  8008              STRH     r0,[r1,#0]
;;;150      /* Set RTC COUNTER LSB word */
;;;151      RTC->CNTL = (CounterValue & RTC_LSB_MASK);
00000e  1d08              ADDS     r0,r1,#4
000010  8002              STRH     r2,[r0,#0]
;;;152      RTC_ExitConfigMode();
000012  f85deb04          POP      {lr}
000016  f7ffbffe          B.W      RTC_ExitConfigMode
;;;153    }
;;;154    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40002818

                          AREA ||i.RTC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  RTC_SetPrescaler PROC
;;;159      */
;;;160    void RTC_SetPrescaler(uint32_t PrescalerValue)
000000  b500              PUSH     {lr}
;;;161    {
000002  4602              MOV      r2,r0
;;;162      /* Check the parameters */
;;;163      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;164      
;;;165      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;166      /* Set RTC PRESCALER MSB word */
;;;167      RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
000008  4904              LDR      r1,|L12.28|
00000a  f3c24003          UBFX     r0,r2,#16,#4
00000e  8008              STRH     r0,[r1,#0]
;;;168      /* Set RTC PRESCALER LSB word */
;;;169      RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
000010  1d08              ADDS     r0,r1,#4
000012  8002              STRH     r2,[r0,#0]
;;;170      RTC_ExitConfigMode();
000014  f85deb04          POP      {lr}
000018  f7ffbffe          B.W      RTC_ExitConfigMode
;;;171    }
;;;172    
                          ENDP

                  |L12.28|
                          DCD      0x40002808

                          AREA ||i.RTC_WaitForLastTask||, CODE, READONLY, ALIGN=2

                  RTC_WaitForLastTask PROC
;;;206      */
;;;207    void RTC_WaitForLastTask(void)
000000  4802              LDR      r0,|L13.12|
                  |L13.2|
;;;208    {
;;;209      /* Loop until RTOFF flag is set */
;;;210      while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
000002  8801              LDRH     r1,[r0,#0]
000004  0689              LSLS     r1,r1,#26
000006  d5fc              BPL      |L13.2|
;;;211      {
;;;212      }
;;;213    }
000008  4770              BX       lr
;;;214    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40002804

                          AREA ||i.RTC_WaitForSynchro||, CODE, READONLY, ALIGN=2

                  RTC_WaitForSynchro PROC
;;;222      */
;;;223    void RTC_WaitForSynchro(void)
000000  4804              LDR      r0,|L14.20|
;;;224    {
;;;225      /* Clear RSF flag */
;;;226      RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
000002  8801              LDRH     r1,[r0,#0]
000004  f0210108          BIC      r1,r1,#8
000008  8001              STRH     r1,[r0,#0]
                  |L14.10|
;;;227      /* Loop until RSF flag is set */
;;;228      while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
00000a  8801              LDRH     r1,[r0,#0]
00000c  0709              LSLS     r1,r1,#28
00000e  d5fc              BPL      |L14.10|
;;;229      {
;;;230      }
;;;231    }
000010  4770              BX       lr
;;;232    
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x40002804
