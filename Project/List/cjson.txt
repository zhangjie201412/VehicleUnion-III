; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\cjson.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\cjson.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\cjson.crf ..\BSP\src\cJSON.c]
                          THUMB

                          AREA ||i.cJSON_AddItemReferenceToArray||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemReferenceToArray PROC
;;;521    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
;;;522    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       create_reference
00000a  4601              MOV      r1,r0
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      cJSON_AddItemToArray
;;;523    void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}
                          ENDP


                          AREA ||i.cJSON_AddItemReferenceToObject||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemReferenceToObject PROC
;;;522    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
;;;523    void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       create_reference
00000c  4602              MOV      r2,r0
00000e  4621              MOV      r1,r4
000010  4628              MOV      r0,r5
000012  e8bd4070          POP      {r4-r6,lr}
000016  f7ffbffe          B.W      cJSON_AddItemToObject
;;;524    
                          ENDP


                          AREA ||i.cJSON_AddItemToArray||, CODE, READONLY, ALIGN=1

                  cJSON_AddItemToArray PROC
;;;519    /* Add item to array/object. */
;;;520    void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
000000  6882              LDR      r2,[r0,#8]
000002  2900              CMP      r1,#0
000004  d001              BEQ      |L3.10|
000006  b91a              CBNZ     r2,|L3.16|
000008  6081              STR      r1,[r0,#8]
                  |L3.10|
00000a  4770              BX       lr
                  |L3.12|
00000c  0002              MOVS     r2,r0
00000e  d002              BEQ      |L3.22|
                  |L3.16|
000010  6810              LDR      r0,[r2,#0]
000012  2800              CMP      r0,#0
000014  d1fa              BNE      |L3.12|
                  |L3.22|
000016  6011              STR      r1,[r2,#0]
000018  604a              STR      r2,[r1,#4]
00001a  4770              BX       lr
;;;521    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
                          ENDP


                          AREA ||i.cJSON_AddItemToObject||, CODE, READONLY, ALIGN=2

                  cJSON_AddItemToObject PROC
;;;520    void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
;;;521    void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
000000  b570              PUSH     {r4-r6,lr}
000002  0014              MOVS     r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
000008  d00e              BEQ      |L4.40|
00000a  6a20              LDR      r0,[r4,#0x20]
00000c  b110              CBZ      r0,|L4.20|
00000e  4907              LDR      r1,|L4.44|
000010  6849              LDR      r1,[r1,#4]  ; cJSON_free
000012  4788              BLX      r1
                  |L4.20|
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       cJSON_strdup
00001a  6220              STR      r0,[r4,#0x20]
00001c  4621              MOV      r1,r4
00001e  4630              MOV      r0,r6
000020  e8bd4070          POP      {r4-r6,lr}
000024  f7ffbffe          B.W      cJSON_AddItemToArray
                  |L4.40|
000028  bd70              POP      {r4-r6,pc}
;;;522    void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      ||.data||

                          AREA ||i.cJSON_CreateArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateArray PROC
;;;543            cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
;;;544            cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L5.14|
00000a  2105              MOVS     r1,#5
00000c  60c1              STR      r1,[r0,#0xc]
                  |L5.14|
00000e  bd10              POP      {r4,pc}
;;;545            cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateBool||, CODE, READONLY, ALIGN=1

                  cJSON_CreateBool PROC
;;;540            cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
;;;541            cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  2800              CMP      r0,#0
00000a  d004              BEQ      |L6.22|
00000c  b10c              CBZ      r4,|L6.18|
00000e  2101              MOVS     r1,#1
000010  e000              B        |L6.20|
                  |L6.18|
000012  2100              MOVS     r1,#0
                  |L6.20|
000014  60c1              STR      r1,[r0,#0xc]
                  |L6.22|
000016  bd10              POP      {r4,pc}
;;;542            cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
                          ENDP


                          AREA ||i.cJSON_CreateDoubleArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateDoubleArray PROC
;;;549            cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;550            cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  460f              MOV      r7,r1
000006  4680              MOV      r8,r0
000008  2400              MOVS     r4,#0
00000a  f7fffffe          BL       cJSON_CreateArray
00000e  4606              MOV      r6,r0
000010  2500              MOVS     r5,#0
000012  e00a              B        |L7.42|
                  |L7.20|
000014  eb0801c5          ADD      r1,r8,r5,LSL #3
000018  e9d10100          LDRD     r0,r1,[r1,#0]
00001c  f7fffffe          BL       cJSON_CreateNumber
000020  b14d              CBZ      r5,|L7.54|
000022  6020              STR      r0,[r4,#0]
000024  6044              STR      r4,[r0,#4]
                  |L7.38|
000026  4604              MOV      r4,r0
000028  1c6d              ADDS     r5,r5,#1
                  |L7.42|
00002a  b10e              CBZ      r6,|L7.48|
00002c  42bd              CMP      r5,r7
00002e  dbf1              BLT      |L7.20|
                  |L7.48|
000030  4630              MOV      r0,r6
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L7.54|
000036  60b0              STR      r0,[r6,#8]
000038  e7f5              B        |L7.38|
;;;551            cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateFalse||, CODE, READONLY, ALIGN=1

                  cJSON_CreateFalse PROC
;;;539            cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
;;;540            cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L8.14|
00000a  2100              MOVS     r1,#0
00000c  60c1              STR      r1,[r0,#0xc]
                  |L8.14|
00000e  bd10              POP      {r4,pc}
;;;541            cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateFloatArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateFloatArray PROC
;;;548            cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;549            cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  460f              MOV      r7,r1
000006  4680              MOV      r8,r0
000008  2400              MOVS     r4,#0
00000a  f7fffffe          BL       cJSON_CreateArray
00000e  4606              MOV      r6,r0
000010  2500              MOVS     r5,#0
000012  e00a              B        |L9.42|
                  |L9.20|
000014  f8580025          LDR      r0,[r8,r5,LSL #2]
000018  f7fffffe          BL       __aeabi_f2d
00001c  f7fffffe          BL       cJSON_CreateNumber
000020  b14d              CBZ      r5,|L9.54|
000022  6020              STR      r0,[r4,#0]
000024  6044              STR      r4,[r0,#4]
                  |L9.38|
000026  4604              MOV      r4,r0
000028  1c6d              ADDS     r5,r5,#1
                  |L9.42|
00002a  b10e              CBZ      r6,|L9.48|
00002c  42bd              CMP      r5,r7
00002e  dbf1              BLT      |L9.20|
                  |L9.48|
000030  4630              MOV      r0,r6
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L9.54|
000036  60b0              STR      r0,[r6,#8]
000038  e7f5              B        |L9.38|
;;;550            cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateIntArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateIntArray PROC
;;;547            /* Create Arrays: */
;;;548            cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  460f              MOV      r7,r1
000006  4680              MOV      r8,r0
000008  2400              MOVS     r4,#0
00000a  f7fffffe          BL       cJSON_CreateArray
00000e  4606              MOV      r6,r0
000010  2500              MOVS     r5,#0
000012  e00a              B        |L10.42|
                  |L10.20|
000014  f8580025          LDR      r0,[r8,r5,LSL #2]
000018  f7fffffe          BL       __aeabi_i2d
00001c  f7fffffe          BL       cJSON_CreateNumber
000020  b14d              CBZ      r5,|L10.54|
000022  6020              STR      r0,[r4,#0]
000024  6044              STR      r4,[r0,#4]
                  |L10.38|
000026  4604              MOV      r4,r0
000028  1c6d              ADDS     r5,r5,#1
                  |L10.42|
00002a  b10e              CBZ      r6,|L10.48|
00002c  42bd              CMP      r5,r7
00002e  dbf1              BLT      |L10.20|
                  |L10.48|
000030  4630              MOV      r0,r6
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L10.54|
000036  60b0              STR      r0,[r6,#8]
000038  e7f5              B        |L10.38|
;;;549            cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
                          ENDP


                          AREA ||i.cJSON_CreateNull||, CODE, READONLY, ALIGN=1

                  cJSON_CreateNull PROC
;;;537            /* Create basic types: */
;;;538            cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L11.14|
00000a  2102              MOVS     r1,#2
00000c  60c1              STR      r1,[r0,#0xc]
                  |L11.14|
00000e  bd10              POP      {r4,pc}
;;;539            cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateNumber||, CODE, READONLY, ALIGN=1

                  cJSON_CreateNumber PROC
;;;541            cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
;;;542            cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  f7fffffe          BL       cJSON_New_Item
00000a  0004              MOVS     r4,r0
00000c  d008              BEQ      |L12.32|
00000e  2003              MOVS     r0,#3
000010  60e0              STR      r0,[r4,#0xc]
000012  e9c45606          STRD     r5,r6,[r4,#0x18]
000016  4628              MOV      r0,r5
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       __aeabi_d2iz
00001e  6160              STR      r0,[r4,#0x14]
                  |L12.32|
000020  4620              MOV      r0,r4
000022  bd70              POP      {r4-r6,pc}
;;;543            cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
                          ENDP


                          AREA ||i.cJSON_CreateObject||, CODE, READONLY, ALIGN=1

                  cJSON_CreateObject PROC
;;;544            cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
;;;545            cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L13.14|
00000a  2106              MOVS     r1,#6
00000c  60c1              STR      r1,[r0,#0xc]
                  |L13.14|
00000e  bd10              POP      {r4,pc}
;;;546    
                          ENDP


                          AREA ||i.cJSON_CreateString||, CODE, READONLY, ALIGN=1

                  cJSON_CreateString PROC
;;;542            cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
;;;543            cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  0004              MOVS     r4,r0
00000a  d005              BEQ      |L14.24|
00000c  2004              MOVS     r0,#4
00000e  60e0              STR      r0,[r4,#0xc]
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       cJSON_strdup
000016  6120              STR      r0,[r4,#0x10]
                  |L14.24|
000018  4620              MOV      r0,r4
00001a  bd70              POP      {r4-r6,pc}
;;;544            cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
                          ENDP


                          AREA ||i.cJSON_CreateStringArray||, CODE, READONLY, ALIGN=1

                  cJSON_CreateStringArray PROC
;;;550            cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
;;;551            cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  460f              MOV      r7,r1
000006  4680              MOV      r8,r0
000008  2400              MOVS     r4,#0
00000a  f7fffffe          BL       cJSON_CreateArray
00000e  4606              MOV      r6,r0
000010  2500              MOVS     r5,#0
000012  e008              B        |L15.38|
                  |L15.20|
000014  f8580025          LDR      r0,[r8,r5,LSL #2]
000018  f7fffffe          BL       cJSON_CreateString
00001c  b14d              CBZ      r5,|L15.50|
00001e  6020              STR      r0,[r4,#0]
000020  6044              STR      r4,[r0,#4]
                  |L15.34|
000022  4604              MOV      r4,r0
000024  1c6d              ADDS     r5,r5,#1
                  |L15.38|
000026  b10e              CBZ      r6,|L15.44|
000028  42bd              CMP      r5,r7
00002a  dbf3              BLT      |L15.20|
                  |L15.44|
00002c  4630              MOV      r0,r6
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L15.50|
000032  60b0              STR      r0,[r6,#8]
000034  e7f5              B        |L15.34|
;;;552    
                          ENDP


                          AREA ||i.cJSON_CreateTrue||, CODE, READONLY, ALIGN=1

                  cJSON_CreateTrue PROC
;;;538            cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
;;;539            cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_New_Item
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L16.14|
00000a  2101              MOVS     r1,#1
00000c  60c1              STR      r1,[r0,#0xc]
                  |L16.14|
00000e  bd10              POP      {r4,pc}
;;;540            cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
                          ENDP


                          AREA ||i.cJSON_Delete||, CODE, READONLY, ALIGN=2

                  cJSON_Delete PROC
;;;80     /* Delete a cJSON structure. */
;;;81     void cJSON_Delete(cJSON *c)
000000  b570              PUSH     {r4-r6,lr}
;;;82     {
000002  4604              MOV      r4,r0
;;;83         cJSON *next;
;;;84         while (c)
;;;85         {
;;;86             next=c->next;
;;;87             if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
;;;88             if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
000004  4e0d              LDR      r6,|L17.60|
000006  e016              B        |L17.54|
                  |L17.8|
000008  89a0              LDRH     r0,[r4,#0xc]          ;87
00000a  6825              LDR      r5,[r4,#0]            ;87
00000c  05c0              LSLS     r0,r0,#23             ;87
00000e  d40a              BMI      |L17.38|
000010  68a0              LDR      r0,[r4,#8]            ;87
000012  b120              CBZ      r0,|L17.30|
000014  f7fffffe          BL       cJSON_Delete
000018  89a0              LDRH     r0,[r4,#0xc]
00001a  05c0              LSLS     r0,r0,#23
00001c  d403              BMI      |L17.38|
                  |L17.30|
00001e  6920              LDR      r0,[r4,#0x10]
000020  b108              CBZ      r0,|L17.38|
000022  6871              LDR      r1,[r6,#4]  ; cJSON_free
000024  4788              BLX      r1
                  |L17.38|
;;;89             if (c->string) cJSON_free(c->string);
000026  6a20              LDR      r0,[r4,#0x20]
000028  b108              CBZ      r0,|L17.46|
00002a  6871              LDR      r1,[r6,#4]  ; cJSON_free
00002c  4788              BLX      r1
                  |L17.46|
;;;90             cJSON_free(c);
00002e  6871              LDR      r1,[r6,#4]  ; cJSON_free
000030  4620              MOV      r0,r4
000032  4788              BLX      r1
;;;91             c=next;
000034  462c              MOV      r4,r5
                  |L17.54|
000036  2c00              CMP      r4,#0                 ;84
000038  d1e6              BNE      |L17.8|
;;;92         }
;;;93     }
00003a  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

                  |L17.60|
                          DCD      ||.data||

                          AREA ||i.cJSON_DeleteItemFromArray||, CODE, READONLY, ALIGN=1

                  cJSON_DeleteItemFromArray PROC
;;;526        if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
;;;527        void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_DetachItemFromArray
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      cJSON_Delete
;;;528        cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
                          ENDP


                          AREA ||i.cJSON_DeleteItemFromObject||, CODE, READONLY, ALIGN=1

                  cJSON_DeleteItemFromObject PROC
;;;528        cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
;;;529        void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       cJSON_DetachItemFromObject
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      cJSON_Delete
;;;530    
                          ENDP


                          AREA ||i.cJSON_DetachItemFromArray||, CODE, READONLY, ALIGN=1

                  cJSON_DetachItemFromArray PROC
;;;524    
;;;525    cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;
000000  4602              MOV      r2,r0
000002  6880              LDR      r0,[r0,#8]
000004  e001              B        |L20.10|
                  |L20.6|
000006  6800              LDR      r0,[r0,#0]
000008  1e49              SUBS     r1,r1,#1
                  |L20.10|
00000a  2800              CMP      r0,#0
00000c  d011              BEQ      |L20.50|
00000e  2900              CMP      r1,#0
000010  dcf9              BGT      |L20.6|
;;;526        if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
000012  6841              LDR      r1,[r0,#4]
000014  b109              CBZ      r1,|L20.26|
000016  6803              LDR      r3,[r0,#0]
000018  600b              STR      r3,[r1,#0]
                  |L20.26|
00001a  6801              LDR      r1,[r0,#0]
00001c  b109              CBZ      r1,|L20.34|
00001e  6843              LDR      r3,[r0,#4]
000020  604b              STR      r3,[r1,#4]
                  |L20.34|
000022  6891              LDR      r1,[r2,#8]
000024  4281              CMP      r1,r0
000026  d101              BNE      |L20.44|
000028  6801              LDR      r1,[r0,#0]
00002a  6091              STR      r1,[r2,#8]
                  |L20.44|
00002c  2100              MOVS     r1,#0
00002e  6001              STR      r1,[r0,#0]
000030  6041              STR      r1,[r0,#4]
                  |L20.50|
000032  4770              BX       lr
;;;527        void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
                          ENDP


                          AREA ||i.cJSON_DetachItemFromObject||, CODE, READONLY, ALIGN=1

                  cJSON_DetachItemFromObject PROC
;;;527        void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
;;;528        cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  460f              MOV      r7,r1
000006  4606              MOV      r6,r0
000008  2500              MOVS     r5,#0
00000a  6884              LDR      r4,[r0,#8]
00000c  e001              B        |L21.18|
                  |L21.14|
00000e  6824              LDR      r4,[r4,#0]
000010  1c6d              ADDS     r5,r5,#1
                  |L21.18|
000012  b15c              CBZ      r4,|L21.44|
000014  4639              MOV      r1,r7
000016  6a20              LDR      r0,[r4,#0x20]
000018  f7fffffe          BL       cJSON_strcasecmp
00001c  2800              CMP      r0,#0
00001e  d1f6              BNE      |L21.14|
000020  4629              MOV      r1,r5
000022  4630              MOV      r0,r6
000024  e8bd41f0          POP      {r4-r8,lr}
000028  f7ffbffe          B.W      cJSON_DetachItemFromArray
                  |L21.44|
00002c  2000              MOVS     r0,#0
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;529        void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}
                          ENDP


                          AREA ||i.cJSON_Duplicate||, CODE, READONLY, ALIGN=1

                  cJSON_Duplicate PROC
;;;553            /* Duplication */
;;;554    cJSON *cJSON_Duplicate(cJSON *item,int recurse)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;555    {
000004  460f              MOV      r7,r1
000006  0005              MOVS     r5,r0
;;;556        cJSON *newitem,*cptr,*nptr=0,*newchild;
000008  f04f0600          MOV      r6,#0
00000c  d01c              BEQ      |L22.72|
;;;557        /* Bail on bad ptr */
;;;558        if (!item) return 0;
;;;559        /* Create new item */
;;;560        newitem=cJSON_New_Item();
00000e  f7fffffe          BL       cJSON_New_Item
000012  0004              MOVS     r4,r0
;;;561        if (!newitem) return 0;
000014  d019              BEQ      |L22.74|
;;;562        /* Copy over all vars */
;;;563        newitem->type=item->type&(~cJSON_IsReference),newitem->valueint=item->valueint,newitem->valuedouble=item->valuedouble;
000016  68e8              LDR      r0,[r5,#0xc]
000018  f4207080          BIC      r0,r0,#0x100
00001c  60e0              STR      r0,[r4,#0xc]
00001e  6968              LDR      r0,[r5,#0x14]
000020  6160              STR      r0,[r4,#0x14]
000022  e9d50106          LDRD     r0,r1,[r5,#0x18]
000026  e9c40106          STRD     r0,r1,[r4,#0x18]
;;;564        if (item->valuestring)	{newitem->valuestring=cJSON_strdup(item->valuestring);	if (!newitem->valuestring)	{cJSON_Delete(newitem);return 0;}}
00002a  6928              LDR      r0,[r5,#0x10]
00002c  b118              CBZ      r0,|L22.54|
00002e  f7fffffe          BL       cJSON_strdup
000032  6120              STR      r0,[r4,#0x10]
000034  b1a0              CBZ      r0,|L22.96|
                  |L22.54|
;;;565        if (item->string)		{newitem->string=cJSON_strdup(item->string);			if (!newitem->string)		{cJSON_Delete(newitem);return 0;}}
000036  6a28              LDR      r0,[r5,#0x20]
000038  b118              CBZ      r0,|L22.66|
00003a  f7fffffe          BL       cJSON_strdup
00003e  6220              STR      r0,[r4,#0x20]
000040  b170              CBZ      r0,|L22.96|
                  |L22.66|
;;;566        /* If non-recursive, then we're done! */
;;;567        if (!recurse) return newitem;
000042  b1b7              CBZ      r7,|L22.114|
;;;568        /* Walk the ->next chain for the child. */
;;;569        cptr=item->child;
000044  68ad              LDR      r5,[r5,#8]
;;;570        while (cptr)
000046  e012              B        |L22.110|
                  |L22.72|
000048  2000              MOVS     r0,#0                 ;558
                  |L22.74|
;;;571        {
;;;572            newchild=cJSON_Duplicate(cptr,1);		/* Duplicate (with recurse) each item in the ->next chain */
;;;573            if (!newchild) {cJSON_Delete(newitem);return 0;}
;;;574            if (nptr)	{nptr->next=newchild,newchild->prev=nptr;nptr=newchild;}	/* If newitem->child already set, then crosswire ->prev and ->next and move on */
;;;575            else		{newitem->child=newchild;nptr=newchild;}					/* Set newitem->child and move to it */
;;;576            cptr=cptr->next;
;;;577        }
;;;578        return newitem;
;;;579    }
00004a  e8bd81f0          POP      {r4-r8,pc}
                  |L22.78|
00004e  2101              MOVS     r1,#1                 ;572
000050  4628              MOV      r0,r5                 ;572
000052  f7fffffe          BL       cJSON_Duplicate
000056  b118              CBZ      r0,|L22.96|
000058  b136              CBZ      r6,|L22.104|
00005a  6030              STR      r0,[r6,#0]            ;574
00005c  6046              STR      r6,[r0,#4]            ;574
00005e  e004              B        |L22.106|
                  |L22.96|
000060  4620              MOV      r0,r4                 ;573
000062  f7fffffe          BL       cJSON_Delete
000066  e7ef              B        |L22.72|
                  |L22.104|
000068  60a0              STR      r0,[r4,#8]            ;575
                  |L22.106|
00006a  682d              LDR      r5,[r5,#0]            ;576
00006c  4606              MOV      r6,r0                 ;575
                  |L22.110|
00006e  2d00              CMP      r5,#0                 ;570
000070  d1ed              BNE      |L22.78|
                  |L22.114|
000072  4620              MOV      r0,r4                 ;578
000074  e7e9              B        |L22.74|
;;;580    
                          ENDP


                          AREA ||i.cJSON_GetArrayItem||, CODE, READONLY, ALIGN=1

                  cJSON_GetArrayItem PROC
;;;510    int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
;;;511    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
000000  6880              LDR      r0,[r0,#8]
000002  e001              B        |L23.8|
                  |L23.4|
000004  6800              LDR      r0,[r0,#0]
000006  1e49              SUBS     r1,r1,#1
                  |L23.8|
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L23.16|
00000c  2900              CMP      r1,#0
00000e  dcf9              BGT      |L23.4|
                  |L23.16|
000010  4770              BX       lr
;;;512    cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
                          ENDP


                          AREA ||i.cJSON_GetArraySize||, CODE, READONLY, ALIGN=1

                  cJSON_GetArraySize PROC
;;;509    /* Get Array size/item / object item. */
;;;510    int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
000000  6881              LDR      r1,[r0,#8]
000002  2000              MOVS     r0,#0
000004  e001              B        |L24.10|
                  |L24.6|
000006  6809              LDR      r1,[r1,#0]
000008  1c40              ADDS     r0,r0,#1
                  |L24.10|
00000a  2900              CMP      r1,#0
00000c  d1fb              BNE      |L24.6|
00000e  4770              BX       lr
;;;511    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
                          ENDP


                          AREA ||i.cJSON_GetErrorPtr||, CODE, READONLY, ALIGN=2

                  cJSON_GetErrorPtr PROC
;;;36     
;;;37     const char *cJSON_GetErrorPtr(void) {return ep;}
000000  4801              LDR      r0,|L25.8|
000002  6880              LDR      r0,[r0,#8]  ; ep
000004  4770              BX       lr
;;;38     
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      ||.data||

                          AREA ||i.cJSON_GetObjectItem||, CODE, READONLY, ALIGN=1

                  cJSON_GetObjectItem PROC
;;;511    cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
;;;512    cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  6884              LDR      r4,[r0,#8]
000006  e000              B        |L26.10|
                  |L26.8|
000008  6824              LDR      r4,[r4,#0]
                  |L26.10|
00000a  b12c              CBZ      r4,|L26.24|
00000c  4629              MOV      r1,r5
00000e  6a20              LDR      r0,[r4,#0x20]
000010  f7fffffe          BL       cJSON_strcasecmp
000014  2800              CMP      r0,#0
000016  d1f7              BNE      |L26.8|
                  |L26.24|
000018  4620              MOV      r0,r4
00001a  bd70              POP      {r4-r6,pc}
;;;513    
                          ENDP


                          AREA ||i.cJSON_InitHooks||, CODE, READONLY, ALIGN=2

                  cJSON_InitHooks PROC
;;;59     
;;;60     void cJSON_InitHooks(cJSON_Hooks* hooks)
000000  4907              LDR      r1,|L27.32|
;;;61     {
000002  b110              CBZ      r0,|L27.10|
;;;62         if (!hooks) { /* Reset hooks */
;;;63             cJSON_malloc = malloc;
;;;64             cJSON_free = free;
;;;65             return;
;;;66         }
;;;67     
;;;68         cJSON_malloc = (hooks->malloc_fn)?hooks->malloc_fn:malloc;
000004  6802              LDR      r2,[r0,#0]
000006  b922              CBNZ     r2,|L27.18|
000008  e002              B        |L27.16|
                  |L27.10|
00000a  4806              LDR      r0,|L27.36|
00000c  6008              STR      r0,[r1,#0]            ;65  ; cJSON_malloc
00000e  e003              B        |L27.24|
                  |L27.16|
000010  4a04              LDR      r2,|L27.36|
                  |L27.18|
;;;69         cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
000012  600a              STR      r2,[r1,#0]  ; cJSON_malloc
000014  6840              LDR      r0,[r0,#4]
000016  b900              CBNZ     r0,|L27.26|
                  |L27.24|
000018  4803              LDR      r0,|L27.40|
                  |L27.26|
00001a  6048              STR      r0,[r1,#4]  ; cJSON_free
;;;70     }
00001c  4770              BX       lr
;;;71     
                          ENDP

00001e  0000              DCW      0x0000
                  |L27.32|
                          DCD      ||.data||
                  |L27.36|
                          DCD      malloc
                  |L27.40|
                          DCD      free

                          AREA ||i.cJSON_Minify||, CODE, READONLY, ALIGN=1

                  cJSON_Minify PROC
;;;580    
;;;581    void cJSON_Minify(char *json)
000000  4601              MOV      r1,r0
;;;582    {
000002  e01a              B        |L28.58|
                  |L28.4|
;;;583        char *into=json;
;;;584        while (*json)
;;;585        {
;;;586            if (*json==' ') json++;
000004  b2d2              UXTB     r2,r2
000006  2a20              CMP      r2,#0x20
000008  d00b              BEQ      |L28.34|
;;;587            else if (*json=='\t') json++;	// Whitespace characters.
00000a  2a09              CMP      r2,#9
00000c  d009              BEQ      |L28.34|
;;;588            else if (*json=='\r') json++;
00000e  2a0d              CMP      r2,#0xd
000010  d007              BEQ      |L28.34|
;;;589            else if (*json=='\n') json++;
000012  2a0a              CMP      r2,#0xa
000014  d005              BEQ      |L28.34|
;;;590            else if (*json=='/' && json[1]=='/')  while (*json && *json!='\n') json++;	// double-slash comments, to end of line.
000016  2a2f              CMP      r2,#0x2f
000018  d005              BEQ      |L28.38|
;;;591            else if (*json=='/' && json[1]=='*') {while (*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}	// multiline comments.
;;;592            else if (*json=='\"'){*into++=*json++;while (*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;} // string literals, which are \" sensitive.
00001a  b2d3              UXTB     r3,r2
00001c  2b22              CMP      r3,#0x22
00001e  d023              BEQ      |L28.104|
000020  e007              B        |L28.50|
                  |L28.34|
000022  1c40              ADDS     r0,r0,#1              ;589
000024  e009              B        |L28.58|
                  |L28.38|
000026  7842              LDRB     r2,[r0,#1]            ;590
000028  2a2f              CMP      r2,#0x2f              ;590
00002a  d00c              BEQ      |L28.70|
00002c  b2d2              UXTB     r2,r2                 ;591
00002e  2a2a              CMP      r2,#0x2a              ;591
000030  d010              BEQ      |L28.84|
                  |L28.50|
;;;593            else *into++=*json++;			// All other characters.
000032  f8102b01          LDRB     r2,[r0],#1
000036  f8012b01          STRB     r2,[r1],#1
                  |L28.58|
00003a  7802              LDRB     r2,[r0,#0]            ;584
00003c  2a00              CMP      r2,#0                 ;584
00003e  d1e1              BNE      |L28.4|
                  |L28.64|
;;;594        }
;;;595        *into=0;	// and null-terminate.
000040  2000              MOVS     r0,#0
000042  7008              STRB     r0,[r1,#0]
;;;596    }
000044  4770              BX       lr
                  |L28.70|
000046  f8102f01          LDRB     r2,[r0,#1]!           ;590
00004a  2a00              CMP      r2,#0                 ;590
00004c  d0f8              BEQ      |L28.64|
00004e  2a0a              CMP      r2,#0xa               ;590
000050  d1f9              BNE      |L28.70|
000052  e7d7              B        |L28.4|
                  |L28.84|
000054  f8102f01          LDRB     r2,[r0,#1]!           ;591
000058  b122              CBZ      r2,|L28.100|
00005a  2a2a              CMP      r2,#0x2a              ;591
00005c  d1fa              BNE      |L28.84|
00005e  7842              LDRB     r2,[r0,#1]            ;591
000060  2a2f              CMP      r2,#0x2f              ;591
000062  d1f7              BNE      |L28.84|
                  |L28.100|
000064  1c80              ADDS     r0,r0,#2              ;591
000066  e7e8              B        |L28.58|
                  |L28.104|
000068  f8012b01          STRB     r2,[r1],#1            ;592
00006c  1c40              ADDS     r0,r0,#1              ;592
00006e  e008              B        |L28.130|
                  |L28.112|
000070  2a5c              CMP      r2,#0x5c              ;592
000072  d102              BNE      |L28.122|
000074  f8012b01          STRB     r2,[r1],#1            ;592
000078  1c40              ADDS     r0,r0,#1              ;592
                  |L28.122|
00007a  f8102b01          LDRB     r2,[r0],#1            ;592
00007e  f8012b01          STRB     r2,[r1],#1            ;592
                  |L28.130|
000082  7802              LDRB     r2,[r0,#0]            ;592
000084  b10a              CBZ      r2,|L28.138|
000086  2a22              CMP      r2,#0x22              ;592
000088  d1f2              BNE      |L28.112|
                  |L28.138|
00008a  f8012b01          STRB     r2,[r1],#1            ;592
00008e  e7c8              B        |L28.34|
;;;597    
                          ENDP


                          AREA ||i.cJSON_New_Item||, CODE, READONLY, ALIGN=2

                  cJSON_New_Item PROC
;;;72     /* Internal constructor. */
;;;73     static cJSON *cJSON_New_Item(void)
000000  4905              LDR      r1,|L29.24|
;;;74     {
000002  b510              PUSH     {r4,lr}
;;;75         cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
000004  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000006  2028              MOVS     r0,#0x28
000008  4788              BLX      r1
00000a  0004              MOVS     r4,r0
;;;76         if (node) memset(node,0,sizeof(cJSON));
00000c  d002              BEQ      |L29.20|
00000e  2128              MOVS     r1,#0x28
000010  f7fffffe          BL       __aeabi_memclr4
                  |L29.20|
;;;77         return node;
000014  4620              MOV      r0,r4
;;;78     }
000016  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  |L29.24|
                          DCD      ||.data||

                          AREA ||i.cJSON_Parse||, CODE, READONLY, ALIGN=1

                  cJSON_Parse PROC
;;;279    /* Default options for cJSON_Parse */
;;;280    cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
000000  2200              MOVS     r2,#0
000002  4611              MOV      r1,r2
000004  f7ffbffe          B.W      cJSON_ParseWithOpts
;;;281    
                          ENDP


                          AREA ||i.cJSON_ParseWithOpts||, CODE, READONLY, ALIGN=2

                  cJSON_ParseWithOpts PROC
;;;263    /* Parse an object - create a new root, and populate. */
;;;264    cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;265    {
000004  4690              MOV      r8,r2
000006  460e              MOV      r6,r1
000008  4604              MOV      r4,r0
;;;266        const char *end=0;
;;;267        cJSON *c=cJSON_New_Item();
00000a  f7fffffe          BL       cJSON_New_Item
;;;268        ep=0;
00000e  4f13              LDR      r7,|L31.92|
000010  0005              MOVS     r5,r0                 ;267
000012  f04f0000          MOV      r0,#0
;;;269        if (!c) return 0;       /* memory fail */
000016  60b8              STR      r0,[r7,#8]  ; ep
000018  d015              BEQ      |L31.70|
;;;270    
;;;271        end=parse_value(c,skip(value));
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       skip
000020  4601              MOV      r1,r0
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       parse_value
000028  0004              MOVS     r4,r0
;;;272        if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
00002a  d00f              BEQ      |L31.76|
;;;273    
;;;274        /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
;;;275        if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
00002c  f1b80f00          CMP      r8,#0
000030  d010              BEQ      |L31.84|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       skip
000038  4604              MOV      r4,r0
00003a  7800              LDRB     r0,[r0,#0]
00003c  b150              CBZ      r0,|L31.84|
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       cJSON_Delete
000044  60bc              STR      r4,[r7,#8]  ; ep
                  |L31.70|
000046  2000              MOVS     r0,#0
                  |L31.72|
;;;276        if (return_parse_end) *return_parse_end=end;
;;;277        return c;
;;;278    }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L31.76|
00004c  4628              MOV      r0,r5                 ;272
00004e  f7fffffe          BL       cJSON_Delete
000052  e7f8              B        |L31.70|
                  |L31.84|
000054  b106              CBZ      r6,|L31.88|
000056  6034              STR      r4,[r6,#0]            ;276
                  |L31.88|
000058  4628              MOV      r0,r5                 ;277
00005a  e7f5              B        |L31.72|
;;;279    /* Default options for cJSON_Parse */
                          ENDP

                  |L31.92|
                          DCD      ||.data||

                          AREA ||i.cJSON_Print||, CODE, READONLY, ALIGN=1

                  cJSON_Print PROC
;;;282    /* Render a cJSON item/entity/structure to text. */
;;;283    char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}
000000  2201              MOVS     r2,#1
000002  2100              MOVS     r1,#0
000004  f7ffbffe          B.W      print_value
;;;284    char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}
                          ENDP


                          AREA ||i.cJSON_PrintUnformatted||, CODE, READONLY, ALIGN=1

                  cJSON_PrintUnformatted PROC
;;;283    char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}
;;;284    char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}
000000  2200              MOVS     r2,#0
000002  4611              MOV      r1,r2
000004  f7ffbffe          B.W      print_value
;;;285    
                          ENDP


                          AREA ||i.cJSON_ReplaceItemInArray||, CODE, READONLY, ALIGN=1

                  cJSON_ReplaceItemInArray PROC
;;;531        /* Replace array/object items with new ones. */
;;;532        void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;
000000  b430              PUSH     {r4,r5}
000002  4603              MOV      r3,r0
000004  6880              LDR      r0,[r0,#8]
000006  e001              B        |L34.12|
                  |L34.8|
000008  6800              LDR      r0,[r0,#0]
00000a  1e49              SUBS     r1,r1,#1
                  |L34.12|
00000c  2800              CMP      r0,#0
00000e  d014              BEQ      |L34.58|
000010  2900              CMP      r1,#0
000012  dcf9              BGT      |L34.8|
;;;533            newitem->next=c->next;newitem->prev=c->prev;if (newitem->next) newitem->next->prev=newitem;
000014  6801              LDR      r1,[r0,#0]
000016  6011              STR      r1,[r2,#0]
000018  6844              LDR      r4,[r0,#4]
00001a  6054              STR      r4,[r2,#4]
00001c  b101              CBZ      r1,|L34.32|
00001e  604a              STR      r2,[r1,#4]
                  |L34.32|
;;;534            if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
000020  6899              LDR      r1,[r3,#8]
000022  4281              CMP      r1,r0
000024  d101              BNE      |L34.42|
000026  609a              STR      r2,[r3,#8]
000028  e001              B        |L34.46|
                  |L34.42|
00002a  6851              LDR      r1,[r2,#4]
00002c  600a              STR      r2,[r1,#0]
                  |L34.46|
00002e  2100              MOVS     r1,#0
000030  6041              STR      r1,[r0,#4]
000032  6001              STR      r1,[r0,#0]
000034  bc30              POP      {r4,r5}
000036  f7ffbffe          B.W      cJSON_Delete
                  |L34.58|
00003a  bc30              POP      {r4,r5}
00003c  4770              BX       lr
;;;535            void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}
                          ENDP


                          AREA ||i.cJSON_ReplaceItemInObject||, CODE, READONLY, ALIGN=1

                  cJSON_ReplaceItemInObject PROC
;;;534            if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
;;;535            void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4616              MOV      r6,r2
000006  4688              MOV      r8,r1
000008  4607              MOV      r7,r0
00000a  2500              MOVS     r5,#0
00000c  6884              LDR      r4,[r0,#8]
00000e  e001              B        |L35.20|
                  |L35.16|
000010  6824              LDR      r4,[r4,#0]
000012  1c6d              ADDS     r5,r5,#1
                  |L35.20|
000014  2c00              CMP      r4,#0
000016  d010              BEQ      |L35.58|
000018  4641              MOV      r1,r8
00001a  6a20              LDR      r0,[r4,#0x20]
00001c  f7fffffe          BL       cJSON_strcasecmp
000020  2800              CMP      r0,#0
000022  d1f5              BNE      |L35.16|
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       cJSON_strdup
00002a  6230              STR      r0,[r6,#0x20]
00002c  4632              MOV      r2,r6
00002e  4629              MOV      r1,r5
000030  4638              MOV      r0,r7
000032  e8bd41f0          POP      {r4-r8,lr}
000036  f7ffbffe          B.W      cJSON_ReplaceItemInArray
                  |L35.58|
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;536    
                          ENDP


                          AREA ||i.cJSON_strcasecmp||, CODE, READONLY, ALIGN=1

                  cJSON_strcasecmp PROC
;;;38     
;;;39     static int cJSON_strcasecmp(const char *s1,const char *s2)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  0005              MOVS     r5,r0
000004  460c              MOV      r4,r1
000006  d001              BEQ      |L36.12|
;;;41         if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
000008  b10c              CBZ      r4,|L36.14|
00000a  e008              B        |L36.30|
                  |L36.12|
00000c  b109              CBZ      r1,|L36.18|
                  |L36.14|
00000e  2001              MOVS     r0,#1
;;;42         for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
;;;43         return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
;;;44     }
000010  bd70              POP      {r4-r6,pc}
                  |L36.18|
000012  2000              MOVS     r0,#0                 ;41
                  |L36.20|
000014  bd70              POP      {r4-r6,pc}
                  |L36.22|
000016  2800              CMP      r0,#0                 ;42
000018  d0fc              BEQ      |L36.20|
00001a  1c6d              ADDS     r5,r5,#1              ;42
00001c  1c64              ADDS     r4,r4,#1              ;42
                  |L36.30|
00001e  7828              LDRB     r0,[r5,#0]            ;42
000020  f7fffffe          BL       tolower
000024  4606              MOV      r6,r0                 ;42
000026  7820              LDRB     r0,[r4,#0]            ;42
000028  f7fffffe          BL       tolower
00002c  4286              CMP      r6,r0                 ;42
00002e  7828              LDRB     r0,[r5,#0]            ;43
000030  d0f1              BEQ      |L36.22|
000032  f7fffffe          BL       tolower
000036  4605              MOV      r5,r0                 ;43
000038  7820              LDRB     r0,[r4,#0]            ;43
00003a  f7fffffe          BL       tolower
00003e  1a28              SUBS     r0,r5,r0              ;43
000040  bd70              POP      {r4-r6,pc}
;;;45     
                          ENDP


                          AREA ||i.cJSON_strdup||, CODE, READONLY, ALIGN=2

                  cJSON_strdup PROC
;;;48     
;;;49     static char* cJSON_strdup(const char* str)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  4606              MOV      r6,r0
;;;51         size_t len;
;;;52         char* copy;
;;;53     
;;;54         len = strlen(str) + 1;
000004  f7fffffe          BL       strlen
;;;55         if (!(copy = (char*)cJSON_malloc(len))) return 0;
000008  4906              LDR      r1,|L37.36|
00000a  1c40              ADDS     r0,r0,#1              ;54
00000c  4604              MOV      r4,r0                 ;54
00000e  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
000010  4788              BLX      r1
000012  0005              MOVS     r5,r0
000014  d004              BEQ      |L37.32|
;;;56         memcpy(copy,str,len);
000016  4622              MOV      r2,r4
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       __aeabi_memcpy
;;;57         return copy;
00001e  4628              MOV      r0,r5
                  |L37.32|
;;;58     }
000020  bd70              POP      {r4-r6,pc}
;;;59     
                          ENDP

000022  0000              DCW      0x0000
                  |L37.36|
                          DCD      ||.data||

                          AREA ||i.create_reference||, CODE, READONLY, ALIGN=1

                  create_reference PROC
;;;516    /* Utility for handling references. */
;;;517    static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  f7fffffe          BL       cJSON_New_Item
000008  0004              MOVS     r4,r0
00000a  d00d              BEQ      |L38.40|
00000c  2228              MOVS     r2,#0x28
00000e  4629              MOV      r1,r5
000010  f7fffffe          BL       __aeabi_memcpy4
000014  2000              MOVS     r0,#0
000016  6220              STR      r0,[r4,#0x20]
000018  68e1              LDR      r1,[r4,#0xc]
00001a  6060              STR      r0,[r4,#4]
00001c  f4417180          ORR      r1,r1,#0x100
000020  60e1              STR      r1,[r4,#0xc]
000022  6020              STR      r0,[r4,#0]
000024  4620              MOV      r0,r4
000026  bd70              POP      {r4-r6,pc}
                  |L38.40|
000028  2000              MOVS     r0,#0
00002a  bd70              POP      {r4-r6,pc}
;;;518    
                          ENDP


                          AREA ||i.parse_array||, CODE, READONLY, ALIGN=2

                  parse_array PROC
;;;319    /* Build an array from input text. */
;;;320    static const char *parse_array(cJSON *item,const char *value)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;321    {
000004  4604              MOV      r4,r0
;;;322        cJSON *child;
;;;323        if (*value!='[')	{ep=value;return 0;}	/* not an array! */
000006  7808              LDRB     r0,[r1,#0]
000008  4e1a              LDR      r6,|L39.116|
00000a  285b              CMP      r0,#0x5b
00000c  d001              BEQ      |L39.18|
00000e  60b1              STR      r1,[r6,#8]  ; ep
000010  e02b              B        |L39.106|
                  |L39.18|
;;;324    
;;;325        item->type=cJSON_Array;
000012  2005              MOVS     r0,#5
;;;326        value=skip(value+1);
000014  60e0              STR      r0,[r4,#0xc]
000016  1c48              ADDS     r0,r1,#1
000018  f7fffffe          BL       skip
00001c  4607              MOV      r7,r0
;;;327        if (*value==']') return value+1;	/* empty array. */
00001e  7800              LDRB     r0,[r0,#0]
000020  285d              CMP      r0,#0x5d
000022  d006              BEQ      |L39.50|
;;;328    
;;;329        item->child=child=cJSON_New_Item();
000024  f7fffffe          BL       cJSON_New_Item
000028  0005              MOVS     r5,r0
;;;330        if (!item->child) return 0;		 /* memory fail */
00002a  60a0              STR      r0,[r4,#8]
00002c  d002              BEQ      |L39.52|
;;;331        value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
00002e  4638              MOV      r0,r7
;;;332        if (!value) return 0;
000030  e00a              B        |L39.72|
                  |L39.50|
000032  1c78              ADDS     r0,r7,#1              ;327
                  |L39.52|
;;;333    
;;;334        while (*value==',')
;;;335        {
;;;336            cJSON *new_item;
;;;337            if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
;;;338            child->next=new_item;new_item->prev=child;child=new_item;
;;;339            value=skip(parse_value(child,skip(value+1)));
;;;340            if (!value) return 0;	/* memory fail */
;;;341        }
;;;342    
;;;343        if (*value==']') return value+1;	/* end of array */
;;;344        ep=value;return 0;	/* malformed. */
;;;345    }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L39.56|
000038  f7fffffe          BL       cJSON_New_Item
00003c  2800              CMP      r0,#0                 ;337
00003e  d0f9              BEQ      |L39.52|
000040  6028              STR      r0,[r5,#0]            ;338
000042  6045              STR      r5,[r0,#4]            ;338
000044  4605              MOV      r5,r0                 ;338
000046  1c60              ADDS     r0,r4,#1              ;339
                  |L39.72|
000048  f7fffffe          BL       skip
00004c  4601              MOV      r1,r0                 ;331
00004e  4628              MOV      r0,r5                 ;331
000050  f7fffffe          BL       parse_value
000054  f7fffffe          BL       skip
000058  0004              MOVS     r4,r0                 ;331
00005a  d006              BEQ      |L39.106|
00005c  7820              LDRB     r0,[r4,#0]            ;334
00005e  282c              CMP      r0,#0x2c              ;334
000060  d0ea              BEQ      |L39.56|
000062  7820              LDRB     r0,[r4,#0]            ;343
000064  285d              CMP      r0,#0x5d              ;343
000066  d002              BEQ      |L39.110|
000068  60b4              STR      r4,[r6,#8]            ;344  ; ep
                  |L39.106|
00006a  2000              MOVS     r0,#0                 ;340
00006c  e7e2              B        |L39.52|
                  |L39.110|
00006e  1c60              ADDS     r0,r4,#1              ;343
000070  e7e0              B        |L39.52|
;;;346    
                          ENDP

000072  0000              DCW      0x0000
                  |L39.116|
                          DCD      ||.data||

                          AREA ||i.parse_hex4||, CODE, READONLY, ALIGN=1

                  parse_hex4 PROC
;;;139    
;;;140    static unsigned parse_hex4(const char *str)
000000  7801              LDRB     r1,[r0,#0]
;;;141    {
;;;142        unsigned h=0;
;;;143        if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
000002  f1a10230          SUB      r2,r1,#0x30
000006  2a09              CMP      r2,#9
000008  d801              BHI      |L40.14|
00000a  4611              MOV      r1,r2                 ;141
00000c  e00a              B        |L40.36|
                  |L40.14|
00000e  f1a10241          SUB      r2,r1,#0x41
000012  2a05              CMP      r2,#5
000014  d801              BHI      |L40.26|
000016  3937              SUBS     r1,r1,#0x37
000018  e004              B        |L40.36|
                  |L40.26|
00001a  f1a10261          SUB      r2,r1,#0x61
00001e  2a05              CMP      r2,#5
000020  d83f              BHI      |L40.162|
000022  3957              SUBS     r1,r1,#0x57
                  |L40.36|
000024  010a              LSLS     r2,r1,#4
;;;144        h=h<<4;str++;
;;;145        if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
000026  f8101f01          LDRB     r1,[r0,#1]!
00002a  f1a10330          SUB      r3,r1,#0x30
00002e  2b09              CMP      r3,#9
000030  d801              BHI      |L40.54|
000032  3a30              SUBS     r2,r2,#0x30
000034  e00a              B        |L40.76|
                  |L40.54|
000036  f1a10341          SUB      r3,r1,#0x41
00003a  2b05              CMP      r3,#5
00003c  d801              BHI      |L40.66|
00003e  3a37              SUBS     r2,r2,#0x37
000040  e004              B        |L40.76|
                  |L40.66|
000042  f1a10361          SUB      r3,r1,#0x61
000046  2b05              CMP      r3,#5
000048  d82b              BHI      |L40.162|
00004a  3a57              SUBS     r2,r2,#0x57
                  |L40.76|
00004c  4411              ADD      r1,r1,r2
00004e  010a              LSLS     r2,r1,#4
;;;146        h=h<<4;str++;
;;;147        if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
000050  f8101f01          LDRB     r1,[r0,#1]!
000054  f1a10330          SUB      r3,r1,#0x30
000058  2b09              CMP      r3,#9
00005a  d801              BHI      |L40.96|
00005c  3a30              SUBS     r2,r2,#0x30
00005e  e00a              B        |L40.118|
                  |L40.96|
000060  f1a10341          SUB      r3,r1,#0x41
000064  2b05              CMP      r3,#5
000066  d801              BHI      |L40.108|
000068  3a37              SUBS     r2,r2,#0x37
00006a  e004              B        |L40.118|
                  |L40.108|
00006c  f1a10361          SUB      r3,r1,#0x61
000070  2b05              CMP      r3,#5
000072  d816              BHI      |L40.162|
000074  3a57              SUBS     r2,r2,#0x57
                  |L40.118|
000076  4411              ADD      r1,r1,r2
;;;148        h=h<<4;str++;
;;;149        if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
000078  7840              LDRB     r0,[r0,#1]
00007a  0109              LSLS     r1,r1,#4              ;148
00007c  f1a00230          SUB      r2,r0,#0x30
000080  2a09              CMP      r2,#9
000082  d801              BHI      |L40.136|
000084  3930              SUBS     r1,r1,#0x30
000086  e004              B        |L40.146|
                  |L40.136|
000088  f1a00241          SUB      r2,r0,#0x41
00008c  2a05              CMP      r2,#5
00008e  d802              BHI      |L40.150|
000090  3937              SUBS     r1,r1,#0x37
                  |L40.146|
000092  4408              ADD      r0,r0,r1
;;;150        return h;
;;;151    }
000094  4770              BX       lr
                  |L40.150|
000096  f1a00261          SUB      r2,r0,#0x61           ;149
00009a  2a05              CMP      r2,#5                 ;149
00009c  d801              BHI      |L40.162|
00009e  3957              SUBS     r1,r1,#0x57           ;149
0000a0  e7f7              B        |L40.146|
                  |L40.162|
0000a2  2000              MOVS     r0,#0                 ;149
0000a4  4770              BX       lr
;;;152    
                          ENDP


                          AREA ||i.parse_number||, CODE, READONLY, ALIGN=2

                  parse_number PROC
;;;95     /* Parse the input text to generate a number, and populate the result into item. */
;;;96     static const char *parse_number(cJSON *item,const char *num)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;97     {
000004  2500              MOVS     r5,#0
000006  b083              SUB      sp,sp,#0xc
000008  460c              MOV      r4,r1
00000a  4950              LDR      r1,|L41.332|
;;;98         double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
00000c  2001              MOVS     r0,#1
00000e  e9cd5100          STRD     r5,r1,[sp,#0]         ;97
;;;99     
;;;100        if (*num=='-') sign=-1,num++;	/* Has sign? */
000012  9002              STR      r0,[sp,#8]
000014  7820              LDRB     r0,[r4,#0]
000016  462e              MOV      r6,r5                 ;97
000018  462f              MOV      r7,r5                 ;97
00001a  46a8              MOV      r8,r5                 ;98
00001c  46a9              MOV      r9,r5                 ;98
00001e  282d              CMP      r0,#0x2d
000020  d104              BNE      |L41.44|
000022  2000              MOVS     r0,#0                 ;97
000024  494a              LDR      r1,|L41.336|
000026  1c64              ADDS     r4,r4,#1
000028  e9cd0100          STRD     r0,r1,[sp,#0]
                  |L41.44|
;;;101        if (*num=='0') num++;			/* is zero */
00002c  7820              LDRB     r0,[r4,#0]
00002e  2830              CMP      r0,#0x30
000030  d100              BNE      |L41.52|
000032  1c64              ADDS     r4,r4,#1
                  |L41.52|
;;;102        if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
000034  7820              LDRB     r0,[r4,#0]
000036  3831              SUBS     r0,r0,#0x31
000038  2808              CMP      r0,#8
00003a  d816              BHI      |L41.106|
                  |L41.60|
00003c  f8140b01          LDRB     r0,[r4],#1
000040  3830              SUBS     r0,r0,#0x30
000042  f7fffffe          BL       __aeabi_i2d
000046  4682              MOV      r10,r0
000048  468b              MOV      r11,r1
00004a  2200              MOVS     r2,#0
00004c  4b41              LDR      r3,|L41.340|
00004e  4628              MOV      r0,r5
000050  4631              MOV      r1,r6
000052  f7fffffe          BL       __aeabi_dmul
000056  4652              MOV      r2,r10
000058  465b              MOV      r3,r11
00005a  f7fffffe          BL       __aeabi_dadd
00005e  4605              MOV      r5,r0
000060  7820              LDRB     r0,[r4,#0]
000062  460e              MOV      r6,r1
000064  3830              SUBS     r0,r0,#0x30
000066  2809              CMP      r0,#9
000068  d9e8              BLS      |L41.60|
                  |L41.106|
;;;103        if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
00006a  7820              LDRB     r0,[r4,#0]
00006c  282e              CMP      r0,#0x2e
00006e  d124              BNE      |L41.186|
000070  7860              LDRB     r0,[r4,#1]
000072  2830              CMP      r0,#0x30
000074  d341              BCC      |L41.250|
000076  2839              CMP      r0,#0x39
000078  d83f              BHI      |L41.250|
00007a  1c64              ADDS     r4,r4,#1
                  |L41.124|
00007c  f8140b01          LDRB     r0,[r4],#1
000080  3830              SUBS     r0,r0,#0x30
000082  f7fffffe          BL       __aeabi_i2d
000086  4682              MOV      r10,r0
000088  468b              MOV      r11,r1
00008a  2200              MOVS     r2,#0
00008c  4b31              LDR      r3,|L41.340|
00008e  4628              MOV      r0,r5
000090  4631              MOV      r1,r6
000092  f7fffffe          BL       __aeabi_dmul
000096  4652              MOV      r2,r10
000098  465b              MOV      r3,r11
00009a  f7fffffe          BL       __aeabi_dadd
00009e  4605              MOV      r5,r0
0000a0  460e              MOV      r6,r1
0000a2  2200              MOVS     r2,#0
0000a4  4b29              LDR      r3,|L41.332|
0000a6  4638              MOV      r0,r7
0000a8  4641              MOV      r1,r8
0000aa  f7fffffe          BL       __aeabi_dsub
0000ae  4607              MOV      r7,r0
0000b0  7820              LDRB     r0,[r4,#0]
0000b2  4688              MOV      r8,r1
0000b4  3830              SUBS     r0,r0,#0x30
0000b6  2809              CMP      r0,#9
0000b8  d9e0              BLS      |L41.124|
                  |L41.186|
;;;104        if (*num=='e' || *num=='E')		/* Exponent? */
0000ba  7820              LDRB     r0,[r4,#0]
0000bc  2865              CMP      r0,#0x65
0000be  d001              BEQ      |L41.196|
0000c0  2845              CMP      r0,#0x45
0000c2  d11a              BNE      |L41.250|
                  |L41.196|
;;;105        {	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
0000c4  f8140f01          LDRB     r0,[r4,#1]!
0000c8  282b              CMP      r0,#0x2b
0000ca  d002              BEQ      |L41.210|
0000cc  282d              CMP      r0,#0x2d
0000ce  d010              BEQ      |L41.242|
0000d0  e000              B        |L41.212|
                  |L41.210|
0000d2  1c64              ADDS     r4,r4,#1
                  |L41.212|
;;;106            while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
0000d4  f06f012f          MVN      r1,#0x2f
                  |L41.216|
0000d8  7820              LDRB     r0,[r4,#0]
0000da  f1a00230          SUB      r2,r0,#0x30
0000de  2a09              CMP      r2,#9
0000e0  d80b              BHI      |L41.250|
0000e2  eb090289          ADD      r2,r9,r9,LSL #2
0000e6  eb010242          ADD      r2,r1,r2,LSL #1
0000ea  eb000902          ADD      r9,r0,r2
0000ee  1c64              ADDS     r4,r4,#1
0000f0  e7f2              B        |L41.216|
                  |L41.242|
0000f2  f04f30ff          MOV      r0,#0xffffffff        ;105
0000f6  9002              STR      r0,[sp,#8]            ;105
0000f8  e7eb              B        |L41.210|
                  |L41.250|
;;;107        }
;;;108    
;;;109        n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
0000fa  9902              LDR      r1,[sp,#8]
0000fc  fb09f001          MUL      r0,r9,r1
000100  f7fffffe          BL       __aeabi_i2d
000104  463a              MOV      r2,r7
000106  4643              MOV      r3,r8
000108  f7fffffe          BL       __aeabi_dadd
00010c  4602              MOV      r2,r0
00010e  460b              MOV      r3,r1
000110  2000              MOVS     r0,#0
000112  4910              LDR      r1,|L41.340|
000114  f7fffffe          BL       pow
000118  4607              MOV      r7,r0
00011a  4688              MOV      r8,r1
00011c  e9dd0100          LDRD     r0,r1,[sp,#0]
000120  462a              MOV      r2,r5
000122  4633              MOV      r3,r6
000124  f7fffffe          BL       __aeabi_dmul
000128  463a              MOV      r2,r7
00012a  4643              MOV      r3,r8
00012c  f7fffffe          BL       __aeabi_dmul
;;;110    
;;;111        item->valuedouble=n;
000130  9a03              LDR      r2,[sp,#0xc]
000132  e9c20106          STRD     r0,r1,[r2,#0x18]
;;;112        item->valueint=(int)n;
000136  f7fffffe          BL       __aeabi_d2iz
00013a  9903              LDR      r1,[sp,#0xc]
;;;113        item->type=cJSON_Number;
00013c  6148              STR      r0,[r1,#0x14]
00013e  9803              LDR      r0,[sp,#0xc]
000140  2103              MOVS     r1,#3
;;;114        return num;
000142  60c1              STR      r1,[r0,#0xc]
;;;115    }
000144  b005              ADD      sp,sp,#0x14
000146  4620              MOV      r0,r4                 ;114
000148  e8bd8ff0          POP      {r4-r11,pc}
;;;116    
                          ENDP

                  |L41.332|
                          DCD      0x3ff00000
                  |L41.336|
                          DCD      0xbff00000
                  |L41.340|
                          DCD      0x40240000

                          AREA ||i.parse_object||, CODE, READONLY, ALIGN=2

                  parse_object PROC
;;;405    /* Build an object from the text. */
;;;406    static const char *parse_object(cJSON *item,const char *value)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;407    {
000004  4605              MOV      r5,r0
;;;408        cJSON *child;
;;;409        if (*value!='{')	{ep=value;return 0;}	/* not an object! */
000006  7808              LDRB     r0,[r1,#0]
000008  4e2a              LDR      r6,|L42.180|
00000a  287b              CMP      r0,#0x7b
00000c  d001              BEQ      |L42.18|
00000e  60b1              STR      r1,[r6,#8]  ; ep
000010  e033              B        |L42.122|
                  |L42.18|
;;;410    
;;;411        item->type=cJSON_Object;
000012  2006              MOVS     r0,#6
;;;412        value=skip(value+1);
000014  60e8              STR      r0,[r5,#0xc]
000016  1c48              ADDS     r0,r1,#1
000018  f7fffffe          BL       skip
00001c  4607              MOV      r7,r0
;;;413        if (*value=='}') return value+1;	/* empty array. */
00001e  7800              LDRB     r0,[r0,#0]
000020  287d              CMP      r0,#0x7d
000022  d013              BEQ      |L42.76|
;;;414    
;;;415        item->child=child=cJSON_New_Item();
000024  f7fffffe          BL       cJSON_New_Item
000028  0004              MOVS     r4,r0
;;;416        if (!item->child) return 0;
00002a  60a8              STR      r0,[r5,#8]
00002c  d00f              BEQ      |L42.78|
;;;417        value=skip(parse_string(child,skip(value)));
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       skip
000034  4601              MOV      r1,r0
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       parse_string
00003c  f7fffffe          BL       skip
;;;418        if (!value) return 0;
000040  2800              CMP      r0,#0
000042  d004              BEQ      |L42.78|
;;;419        child->string=child->valuestring;child->valuestring=0;
000044  6921              LDR      r1,[r4,#0x10]
000046  2700              MOVS     r7,#0
;;;420        if (*value!=':') {ep=value;return 0;}	/* fail! */
000048  6221              STR      r1,[r4,#0x20]
00004a  e02c              B        |L42.166|
                  |L42.76|
00004c  1c78              ADDS     r0,r7,#1              ;413
                  |L42.78|
;;;421        value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
;;;422        if (!value) return 0;
;;;423    
;;;424        while (*value==',')
;;;425        {
;;;426            cJSON *new_item;
;;;427            if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
;;;428            child->next=new_item;new_item->prev=child;child=new_item;
;;;429            value=skip(parse_string(child,skip(value+1)));
;;;430            if (!value) return 0;
;;;431            child->string=child->valuestring;child->valuestring=0;
;;;432            if (*value!=':') {ep=value;return 0;}	/* fail! */
;;;433            value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
;;;434            if (!value) return 0;
;;;435        }
;;;436    
;;;437        if (*value=='}') return value+1;	/* end of array */
;;;438        ep=value;return 0;	/* malformed. */
;;;439    }
00004e  e8bd81f0          POP      {r4-r8,pc}
                  |L42.82|
000052  60b0              STR      r0,[r6,#8]            ;420  ; ep
000054  e011              B        |L42.122|
                  |L42.86|
000056  1c40              ADDS     r0,r0,#1              ;421
000058  f7fffffe          BL       skip
00005c  4601              MOV      r1,r0                 ;421
00005e  4620              MOV      r0,r4                 ;421
000060  f7fffffe          BL       parse_value
000064  f7fffffe          BL       skip
000068  0005              MOVS     r5,r0                 ;421
00006a  d0f0              BEQ      |L42.78|
00006c  7828              LDRB     r0,[r5,#0]            ;424
00006e  282c              CMP      r0,#0x2c              ;424
000070  d005              BEQ      |L42.126|
000072  7828              LDRB     r0,[r5,#0]            ;437
000074  287d              CMP      r0,#0x7d              ;437
000076  d01b              BEQ      |L42.176|
000078  60b5              STR      r5,[r6,#8]            ;438  ; ep
                  |L42.122|
00007a  2000              MOVS     r0,#0                 ;438
00007c  e7e7              B        |L42.78|
                  |L42.126|
00007e  f7fffffe          BL       cJSON_New_Item
000082  2800              CMP      r0,#0                 ;427
000084  d0e3              BEQ      |L42.78|
000086  6020              STR      r0,[r4,#0]            ;428
000088  6044              STR      r4,[r0,#4]            ;428
00008a  4604              MOV      r4,r0                 ;428
00008c  1c68              ADDS     r0,r5,#1              ;429
00008e  f7fffffe          BL       skip
000092  4601              MOV      r1,r0                 ;429
000094  4620              MOV      r0,r4                 ;429
000096  f7fffffe          BL       parse_string
00009a  f7fffffe          BL       skip
00009e  2800              CMP      r0,#0                 ;430
0000a0  d0d5              BEQ      |L42.78|
0000a2  6921              LDR      r1,[r4,#0x10]         ;431
0000a4  6221              STR      r1,[r4,#0x20]         ;431
                  |L42.166|
0000a6  6127              STR      r7,[r4,#0x10]         ;432
0000a8  7801              LDRB     r1,[r0,#0]            ;432
0000aa  293a              CMP      r1,#0x3a              ;432
0000ac  d0d3              BEQ      |L42.86|
0000ae  e7d0              B        |L42.82|
                  |L42.176|
0000b0  1c68              ADDS     r0,r5,#1              ;437
0000b2  e7cc              B        |L42.78|
;;;440    
                          ENDP

                  |L42.180|
                          DCD      ||.data||

                          AREA ||i.parse_string||, CODE, READONLY, ALIGN=2

                  parse_string PROC
;;;154    static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
;;;155    static const char *parse_string(cJSON *item,const char *str)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;156    {
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;157        const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
000008  1c48              ADDS     r0,r1,#1
;;;158        if (*str!='\"') {ep=str;return 0;}	/* not a string! */
00000a  7822              LDRB     r2,[r4,#0]
00000c  2100              MOVS     r1,#0                 ;157
00000e  4b5a              LDR      r3,|L43.376|
000010  2a22              CMP      r2,#0x22
000012  d007              BEQ      |L43.36|
000014  2000              MOVS     r0,#0
000016  609c              STR      r4,[r3,#8]  ; ep
                  |L43.24|
;;;159    
;;;160        while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
;;;161    
;;;162        out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
;;;163        if (!out) return 0;
;;;164    
;;;165        ptr=str+1;ptr2=out;
;;;166        while (*ptr!='\"' && *ptr)
;;;167        {
;;;168            if (*ptr!='\\') *ptr2++=*ptr++;
;;;169            else
;;;170            {
;;;171                ptr++;
;;;172                switch (*ptr)
;;;173                {
;;;174                    case 'b': *ptr2++='\b';	break;
;;;175                    case 'f': *ptr2++='\f';	break;
;;;176                    case 'n': *ptr2++='\n';	break;
;;;177                    case 'r': *ptr2++='\r';	break;
;;;178                    case 't': *ptr2++='\t';	break;
;;;179                    case 'u':	 /* transcode utf16 to utf8. */
;;;180                              uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
;;;181    
;;;182                              if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
;;;183    
;;;184                              if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
;;;185                              {
;;;186                                  if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
;;;187                                  uc2=parse_hex4(ptr+3);ptr+=6;
;;;188                                  if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
;;;189                                  uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
;;;190                              }
;;;191    
;;;192                              len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
;;;193    
;;;194                              switch (len) {
;;;195                                  case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;196                                  case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;197                                  case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
;;;198                                  case 1: *--ptr2 =(uc | firstByteMark[len]);
;;;199                              }
;;;200                              ptr2+=len;
;;;201                              break;
;;;202                    default:  *ptr2++=*ptr; break;
;;;203                }
;;;204                ptr++;
;;;205            }
;;;206        }
;;;207        *ptr2=0;
;;;208        if (*ptr=='\"') ptr++;
;;;209        item->valuestring=out;
;;;210        item->type=cJSON_String;
;;;211        return ptr;
;;;212    }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L43.28|
00001c  1c40              ADDS     r0,r0,#1              ;160
00001e  2a5c              CMP      r2,#0x5c              ;160
000020  d100              BNE      |L43.36|
000022  1c40              ADDS     r0,r0,#1              ;160
                  |L43.36|
000024  7802              LDRB     r2,[r0,#0]            ;160
000026  2a22              CMP      r2,#0x22              ;160
000028  d002              BEQ      |L43.48|
00002a  b10a              CBZ      r2,|L43.48|
00002c  1c49              ADDS     r1,r1,#1              ;160
00002e  d1f5              BNE      |L43.28|
                  |L43.48|
000030  1c48              ADDS     r0,r1,#1              ;162
000032  6819              LDR      r1,[r3,#0]            ;162  ; cJSON_malloc
000034  4788              BLX      r1                    ;162
000036  0005              MOVS     r5,r0                 ;162
000038  d0ee              BEQ      |L43.24|
00003a  1c60              ADDS     r0,r4,#1              ;165
00003c  462c              MOV      r4,r5                 ;165
00003e  f44f6780          MOV      r7,#0x400             ;182
000042  e088              B        |L43.342|
                  |L43.68|
000044  295c              CMP      r1,#0x5c              ;168
000046  d003              BEQ      |L43.80|
000048  f8041b01          STRB     r1,[r4],#1            ;168
00004c  1c40              ADDS     r0,r0,#1              ;168
00004e  e082              B        |L43.342|
                  |L43.80|
000050  f1000801          ADD      r8,r0,#1              ;171
000054  7840              LDRB     r0,[r0,#1]            ;172
000056  2872              CMP      r0,#0x72              ;172
000058  d014              BEQ      |L43.132|
00005a  dc06              BGT      |L43.106|
00005c  2862              CMP      r0,#0x62              ;172
00005e  d009              BEQ      |L43.116|
000060  2866              CMP      r0,#0x66              ;172
000062  d009              BEQ      |L43.120|
000064  286e              CMP      r0,#0x6e              ;172
000066  d108              BNE      |L43.122|
000068  e00a              B        |L43.128|
                  |L43.106|
00006a  2874              CMP      r0,#0x74              ;172
00006c  d00c              BEQ      |L43.136|
00006e  2875              CMP      r0,#0x75              ;172
000070  d103              BNE      |L43.122|
000072  e00b              B        |L43.140|
                  |L43.116|
000074  2008              MOVS     r0,#8                 ;174
000076  e000              B        |L43.122|
                  |L43.120|
000078  200c              MOVS     r0,#0xc               ;175
                  |L43.122|
00007a  f8040b01          STRB     r0,[r4],#1            ;174
00007e  e068              B        |L43.338|
                  |L43.128|
000080  200a              MOVS     r0,#0xa               ;176
000082  e7fa              B        |L43.122|
                  |L43.132|
000084  200d              MOVS     r0,#0xd               ;177
000086  e7f8              B        |L43.122|
                  |L43.136|
000088  2009              MOVS     r0,#9                 ;178
00008a  e7f6              B        |L43.122|
                  |L43.140|
00008c  f1080001          ADD      r0,r8,#1              ;180
000090  f7fffffe          BL       parse_hex4
000094  4681              MOV      r9,r0                 ;180
000096  f5a0405c          SUB      r0,r0,#0xdc00         ;182
00009a  f1080804          ADD      r8,r8,#4              ;180
00009e  42b8              CMP      r0,r7                 ;182
0000a0  d357              BCC      |L43.338|
0000a2  f1b90f00          CMP      r9,#0                 ;182
0000a6  d054              BEQ      |L43.338|
0000a8  f5a94058          SUB      r0,r9,#0xd800         ;184
0000ac  42b8              CMP      r0,r7                 ;184
0000ae  d217              BCS      |L43.224|
0000b0  f8980001          LDRB     r0,[r8,#1]            ;186
0000b4  285c              CMP      r0,#0x5c              ;186
0000b6  d14c              BNE      |L43.338|
0000b8  f8980002          LDRB     r0,[r8,#2]            ;186
0000bc  2875              CMP      r0,#0x75              ;186
0000be  d148              BNE      |L43.338|
0000c0  f1080003          ADD      r0,r8,#3              ;187
0000c4  f7fffffe          BL       parse_hex4
0000c8  f5a0415c          SUB      r1,r0,#0xdc00         ;188
0000cc  f1080806          ADD      r8,r8,#6              ;187
0000d0  42b9              CMP      r1,r7                 ;188
0000d2  d23e              BCS      |L43.338|
0000d4  f3c90109          UBFX     r1,r9,#0,#10          ;189
0000d8  f361209f          BFI      r0,r1,#10,#22         ;189
0000dc  f5003980          ADD      r9,r0,#0x10000        ;189
                  |L43.224|
0000e0  2004              MOVS     r0,#4                 ;192
0000e2  f1b90f80          CMP      r9,#0x80              ;192
0000e6  d202              BCS      |L43.238|
0000e8  2001              MOVS     r0,#1                 ;192
0000ea  1c64              ADDS     r4,r4,#1              ;192
0000ec  e02a              B        |L43.324|
                  |L43.238|
0000ee  f5b96f00          CMP      r9,#0x800             ;192
0000f2  d202              BCS      |L43.250|
0000f4  2002              MOVS     r0,#2                 ;192
0000f6  1ca4              ADDS     r4,r4,#2              ;192
0000f8  e006              B        |L43.264|
                  |L43.250|
0000fa  f5b93f80          CMP      r9,#0x10000           ;192
0000fe  d202              BCS      |L43.262|
000100  2003              MOVS     r0,#3                 ;192
000102  1ce4              ADDS     r4,r4,#3              ;192
000104  e00e              B        |L43.292|
                  |L43.262|
000106  1d24              ADDS     r4,r4,#4              ;192
                  |L43.264|
000108  2802              CMP      r0,#2                 ;194
00010a  d013              BEQ      |L43.308|
00010c  2803              CMP      r0,#3                 ;194
00010e  d009              BEQ      |L43.292|
000110  2804              CMP      r0,#4                 ;194
000112  d11d              BNE      |L43.336|
000114  f00901bf          AND      r1,r9,#0xbf           ;195
000118  f0410180          ORR      r1,r1,#0x80           ;195
00011c  f8041d01          STRB     r1,[r4,#-1]!          ;195
000120  ea4f1999          LSR      r9,r9,#6              ;195
                  |L43.292|
000124  f00901bf          AND      r1,r9,#0xbf           ;196
000128  f0410180          ORR      r1,r1,#0x80           ;196
00012c  f8041d01          STRB     r1,[r4,#-1]!          ;196
000130  ea4f1999          LSR      r9,r9,#6              ;196
                  |L43.308|
000134  f00901bf          AND      r1,r9,#0xbf           ;197
000138  f0410180          ORR      r1,r1,#0x80           ;197
00013c  f8041d01          STRB     r1,[r4,#-1]!          ;197
000140  ea4f1999          LSR      r9,r9,#6              ;197
                  |L43.324|
000144  490d              LDR      r1,|L43.380|
000146  5c09              LDRB     r1,[r1,r0]            ;198
000148  ea410109          ORR      r1,r1,r9              ;198
00014c  f8041d01          STRB     r1,[r4,#-1]!          ;198
                  |L43.336|
000150  4404              ADD      r4,r4,r0              ;200
                  |L43.338|
000152  f1080001          ADD      r0,r8,#1              ;204
                  |L43.342|
000156  7801              LDRB     r1,[r0,#0]            ;166
000158  2922              CMP      r1,#0x22              ;166
00015a  d002              BEQ      |L43.354|
00015c  2900              CMP      r1,#0                 ;166
00015e  f47faf71          BNE      |L43.68|
                  |L43.354|
000162  2100              MOVS     r1,#0                 ;207
000164  7021              STRB     r1,[r4,#0]            ;207
000166  7801              LDRB     r1,[r0,#0]            ;208
000168  2922              CMP      r1,#0x22              ;208
00016a  d100              BNE      |L43.366|
00016c  1c40              ADDS     r0,r0,#1              ;208
                  |L43.366|
00016e  2104              MOVS     r1,#4                 ;210
000170  e9c61503          STRD     r1,r5,[r6,#0xc]       ;210
000174  e750              B        |L43.24|
;;;213    
                          ENDP

000176  0000              DCW      0x0000
                  |L43.376|
                          DCD      ||.data||
                  |L43.380|
                          DCD      ||.constdata||

                          AREA ||i.parse_value||, CODE, READONLY, ALIGN=2

                  parse_value PROC
;;;286    /* Parser core - when encountering text, process appropriately. */
;;;287    static const char *parse_value(cJSON *item,const char *value)
000000  b570              PUSH     {r4-r6,lr}
;;;288    {
000002  000c              MOVS     r4,r1
000004  4605              MOV      r5,r0
000006  d020              BEQ      |L44.74|
;;;289        if (!value)						return 0;	/* Fail on null. */
;;;290        if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
000008  2204              MOVS     r2,#4
00000a  a123              ADR      r1,|L44.152|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       strncmp
000012  b1e0              CBZ      r0,|L44.78|
;;;291        if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
000014  2205              MOVS     r2,#5
000016  a122              ADR      r1,|L44.160|
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       strncmp
00001e  b1c8              CBZ      r0,|L44.84|
;;;292        if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
000020  2204              MOVS     r2,#4
000022  a121              ADR      r1,|L44.168|
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       strncmp
00002a  b1b8              CBZ      r0,|L44.92|
;;;293        if (*value=='\"')				{ return parse_string(item,value); }
00002c  7820              LDRB     r0,[r4,#0]
00002e  2822              CMP      r0,#0x22
000030  d019              BEQ      |L44.102|
;;;294        if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
000032  282d              CMP      r0,#0x2d
000034  d003              BEQ      |L44.62|
000036  f1a00130          SUB      r1,r0,#0x30
00003a  2909              CMP      r1,#9
00003c  d819              BHI      |L44.114|
                  |L44.62|
00003e  4621              MOV      r1,r4
000040  4628              MOV      r0,r5
000042  e8bd4070          POP      {r4-r6,lr}
000046  f7ffbffe          B.W      parse_number
                  |L44.74|
00004a  2000              MOVS     r0,#0                 ;289
;;;295        if (*value=='[')				{ return parse_array(item,value); }
;;;296        if (*value=='{')				{ return parse_object(item,value); }
;;;297    
;;;298        ep=value;return 0;	/* failure. */
;;;299    }
00004c  bd70              POP      {r4-r6,pc}
                  |L44.78|
00004e  2002              MOVS     r0,#2                 ;290
000050  60e8              STR      r0,[r5,#0xc]          ;290
000052  e006              B        |L44.98|
                  |L44.84|
000054  2000              MOVS     r0,#0                 ;291
000056  60e8              STR      r0,[r5,#0xc]          ;291
000058  1d60              ADDS     r0,r4,#5              ;291
00005a  bd70              POP      {r4-r6,pc}
                  |L44.92|
00005c  2001              MOVS     r0,#1                 ;292
00005e  60e8              STR      r0,[r5,#0xc]          ;292
000060  6168              STR      r0,[r5,#0x14]         ;292
                  |L44.98|
000062  1d20              ADDS     r0,r4,#4              ;292
000064  bd70              POP      {r4-r6,pc}
                  |L44.102|
000066  4621              MOV      r1,r4                 ;293
000068  4628              MOV      r0,r5                 ;293
00006a  e8bd4070          POP      {r4-r6,lr}            ;293
00006e  f7ffbffe          B.W      parse_string
                  |L44.114|
000072  285b              CMP      r0,#0x5b              ;295
000074  d004              BEQ      |L44.128|
000076  287b              CMP      r0,#0x7b              ;296
000078  d008              BEQ      |L44.140|
00007a  480d              LDR      r0,|L44.176|
00007c  6084              STR      r4,[r0,#8]            ;298  ; ep
00007e  e7e4              B        |L44.74|
                  |L44.128|
000080  4621              MOV      r1,r4                 ;295
000082  4628              MOV      r0,r5                 ;295
000084  e8bd4070          POP      {r4-r6,lr}            ;295
000088  f7ffbffe          B.W      parse_array
                  |L44.140|
00008c  4621              MOV      r1,r4                 ;296
00008e  4628              MOV      r0,r5                 ;296
000090  e8bd4070          POP      {r4-r6,lr}            ;296
000094  f7ffbffe          B.W      parse_object
;;;300    
                          ENDP

                  |L44.152|
000098  6e756c6c          DCB      "null",0
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L44.160|
0000a0  66616c73          DCB      "false",0
0000a4  6500    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L44.168|
0000a8  74727565          DCB      "true",0
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L44.176|
                          DCD      ||.data||

                          AREA ||i.print_array||, CODE, READONLY, ALIGN=2

                  print_array PROC
;;;347    /* Render an array to text */
;;;348    static char *print_array(cJSON *item,int depth,int fmt)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;349    {
;;;350        char **entries;
;;;351        char *out=0,*ptr,*ret;int len=5;
;;;352        cJSON *child=item->child;
;;;353        int numentries=0,i=0,fail=0;
000004  2500              MOVS     r5,#0
000006  4604              MOV      r4,r0                 ;349
000008  f04f0a05          MOV      r10,#5                ;351
00000c  6880              LDR      r0,[r0,#8]            ;352
00000e  46a8              MOV      r8,r5
000010  462e              MOV      r6,r5
000012  e001              B        |L45.24|
                  |L45.20|
;;;354    
;;;355        /* How many entries in the array? */
;;;356        while (child) numentries++,child=child->next;
000014  6800              LDR      r0,[r0,#0]
000016  1c6d              ADDS     r5,r5,#1
                  |L45.24|
000018  2800              CMP      r0,#0
00001a  d1fb              BNE      |L45.20|
;;;357        /* Explicitly handle numentries==0 */
;;;358        if (!numentries)
;;;359        {
;;;360            out=(char*)cJSON_malloc(3);
00001c  4a41              LDR      r2,|L45.292|
00001e  6811              LDR      r1,[r2,#0]            ;358
000020  b155              CBZ      r5,|L45.56|
000022  00a8              LSLS     r0,r5,#2              ;358
;;;361            if (out) strcpy(out,"[]");
;;;362            return out;
;;;363        }
;;;364        /* Allocate an array to hold the values for each */
;;;365        entries=(char**)cJSON_malloc(numentries*sizeof(char*));
000024  4683              MOV      r11,r0
000026  4691              MOV      r9,r2
000028  4788              BLX      r1
00002a  0007              MOVS     r7,r0
;;;366        if (!entries) return 0;
00002c  d00c              BEQ      |L45.72|
00002e  4659              MOV      r1,r11
;;;367        memset(entries,0,numentries*sizeof(char*));
000030  f7fffffe          BL       __aeabi_memclr4
;;;368        /* Retrieve all the results: */
;;;369        child=item->child;
000034  68a4              LDR      r4,[r4,#8]
;;;370        while (child && !fail)
000036  e021              B        |L45.124|
                  |L45.56|
000038  2003              MOVS     r0,#3                 ;360
00003a  4788              BLX      r1                    ;360
00003c  0004              MOVS     r4,r0                 ;360
00003e  d002              BEQ      |L45.70|
000040  a139              ADR      r1,|L45.296|
000042  f7fffffe          BL       strcpy
                  |L45.70|
000046  4620              MOV      r0,r4                 ;362
                  |L45.72|
;;;371        {
;;;372            ret=print_value(child,depth+1,fmt);
;;;373            entries[i++]=ret;
;;;374            if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
;;;375            child=child->next;
;;;376        }
;;;377    
;;;378        /* If we didn't fail, try to malloc the output string */
;;;379        if (!fail) out=(char*)cJSON_malloc(len);
;;;380        /* If that fails, we fail. */
;;;381        if (!out) fail=1;
;;;382    
;;;383        /* Handle failure. */
;;;384        if (fail)
;;;385        {
;;;386            for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
;;;387            cJSON_free(entries);
;;;388            return 0;
;;;389        }
;;;390    
;;;391        /* Compose the output array. */
;;;392        *out='[';
;;;393        ptr=out+1;*ptr=0;
;;;394        for (i=0;i<numentries;i++)
;;;395        {
;;;396            strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
;;;397            if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
;;;398            cJSON_free(entries[i]);
;;;399        }
;;;400        cJSON_free(entries);
;;;401        *ptr++=']';*ptr++=0;
;;;402        return out;
;;;403    }
000048  e8bd8ffe          POP      {r1-r11,pc}
                  |L45.76|
00004c  e9dd1201          LDRD     r1,r2,[sp,#4]
000050  1c49              ADDS     r1,r1,#1              ;372
000052  4620              MOV      r0,r4                 ;372
000054  f7fffffe          BL       print_value
000058  f8470028          STR      r0,[r7,r8,LSL #2]     ;373
00005c  f1080801          ADD      r8,r8,#1              ;373
000060  b150              CBZ      r0,|L45.120|
000062  f7fffffe          BL       strlen
000066  9902              LDR      r1,[sp,#8]            ;374
000068  b101              CBZ      r1,|L45.108|
00006a  2101              MOVS     r1,#1                 ;374
                  |L45.108|
00006c  4401              ADD      r1,r1,r0              ;374
00006e  eb01000a          ADD      r0,r1,r10             ;374
000072  f1000a02          ADD      r10,r0,#2             ;374
000076  e000              B        |L45.122|
                  |L45.120|
000078  2601              MOVS     r6,#1                 ;374
                  |L45.122|
00007a  6824              LDR      r4,[r4,#0]            ;375
                  |L45.124|
00007c  b114              CBZ      r4,|L45.132|
00007e  2e00              CMP      r6,#0                 ;370
000080  d0e4              BEQ      |L45.76|
000082  e013              B        |L45.172|
                  |L45.132|
000084  b996              CBNZ     r6,|L45.172|
000086  4650              MOV      r0,r10                ;379
000088  f8d91000          LDR      r1,[r9,#0]            ;379  ; cJSON_malloc
00008c  46ca              MOV      r10,r9                ;379
00008e  4788              BLX      r1                    ;379
000090  ea5f0800          MOVS     r8,r0                 ;379
000094  d00a              BEQ      |L45.172|
000096  215b              MOVS     r1,#0x5b              ;392
000098  f04f0900          MOV      r9,#0                 ;393
00009c  f8881000          STRB     r1,[r8,#0]            ;392
0000a0  f1080401          ADD      r4,r8,#1              ;393
0000a4  f8889001          STRB     r9,[r8,#1]            ;393
0000a8  464e              MOV      r6,r9                 ;394
0000aa  e02e              B        |L45.266|
                  |L45.172|
0000ac  2400              MOVS     r4,#0                 ;386
0000ae  464e              MOV      r6,r9                 ;360
0000b0  e006              B        |L45.192|
0000b2  bf00              NOP                            ;386
                  |L45.180|
0000b4  f8570024          LDR      r0,[r7,r4,LSL #2]     ;386
0000b8  b108              CBZ      r0,|L45.190|
0000ba  6871              LDR      r1,[r6,#4]            ;386  ; cJSON_free
0000bc  4788              BLX      r1                    ;386
                  |L45.190|
0000be  1c64              ADDS     r4,r4,#1              ;386
                  |L45.192|
0000c0  42ac              CMP      r4,r5                 ;386
0000c2  dbf7              BLT      |L45.180|
0000c4  6871              LDR      r1,[r6,#4]            ;387  ; cJSON_free
0000c6  4638              MOV      r0,r7                 ;387
0000c8  4788              BLX      r1                    ;387
0000ca  2000              MOVS     r0,#0                 ;388
0000cc  e7bc              B        |L45.72|
0000ce  bf00              NOP                            ;396
                  |L45.208|
0000d0  f8571026          LDR      r1,[r7,r6,LSL #2]     ;396
0000d4  4620              MOV      r0,r4                 ;396
0000d6  f7fffffe          BL       strcpy
0000da  f8570026          LDR      r0,[r7,r6,LSL #2]     ;396
0000de  f7fffffe          BL       strlen
0000e2  4404              ADD      r4,r4,r0              ;396
0000e4  1e68              SUBS     r0,r5,#1              ;397
0000e6  4286              CMP      r6,r0                 ;397
0000e8  d009              BEQ      |L45.254|
0000ea  202c              MOVS     r0,#0x2c              ;397
0000ec  f8040b01          STRB     r0,[r4],#1            ;397
0000f0  9802              LDR      r0,[sp,#8]            ;397
0000f2  b110              CBZ      r0,|L45.250|
0000f4  2020              MOVS     r0,#0x20              ;397
0000f6  f8040b01          STRB     r0,[r4],#1            ;397
                  |L45.250|
0000fa  f8849000          STRB     r9,[r4,#0]            ;397
                  |L45.254|
0000fe  f8da1004          LDR      r1,[r10,#4]           ;398  ; cJSON_free
000102  f8570026          LDR      r0,[r7,r6,LSL #2]     ;398
000106  4788              BLX      r1                    ;398
000108  1c76              ADDS     r6,r6,#1              ;394
                  |L45.266|
00010a  42ae              CMP      r6,r5                 ;394
00010c  dbe0              BLT      |L45.208|
00010e  f8da1004          LDR      r1,[r10,#4]           ;400  ; cJSON_free
000112  4638              MOV      r0,r7                 ;400
000114  4788              BLX      r1                    ;400
000116  205d              MOVS     r0,#0x5d              ;401
000118  7020              STRB     r0,[r4,#0]            ;401
00011a  f8849001          STRB     r9,[r4,#1]            ;401
00011e  4640              MOV      r0,r8                 ;402
000120  e792              B        |L45.72|
;;;404    
                          ENDP

000122  0000              DCW      0x0000
                  |L45.292|
                          DCD      ||.data||
                  |L45.296|
000128  5b5d00            DCB      "[]",0
00012b  00                DCB      0

                          AREA ||i.print_number||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_e
                  print_number PROC
;;;117    /* Render the number nicely from the given item into a string. */
;;;118    static char *print_number(cJSON *item)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;119    {
000004  4606              MOV      r6,r0
;;;120        char *str;
;;;121        double d=item->valuedouble;
;;;122        if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
;;;123        {
;;;124            str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
000006  4f34              LDR      r7,|L46.216|
000008  e9d64306          LDRD     r4,r3,[r6,#0x18]      ;122
00000c  f8df80cc          LDR      r8,|L46.220|
000010  461d              MOV      r5,r3                 ;121
000012  6940              LDR      r0,[r0,#0x14]         ;122
000014  f7fffffe          BL       __aeabi_i2d
000018  4622              MOV      r2,r4                 ;122
00001a  462b              MOV      r3,r5                 ;122
00001c  f7fffffe          BL       __aeabi_dsub
000020  f0214100          BIC      r1,r1,#0x80000000     ;122
000024  2200              MOVS     r2,#0                 ;122
000026  4643              MOV      r3,r8                 ;122
000028  f7fffffe          BL       __aeabi_cdcmple
00002c  d817              BHI      |L46.94|
00002e  4a2c              LDR      r2,|L46.224|
000030  4b2c              LDR      r3,|L46.228|
000032  4620              MOV      r0,r4                 ;122
000034  4629              MOV      r1,r5                 ;122
000036  f7fffffe          BL       __aeabi_cdcmple
00003a  d810              BHI      |L46.94|
00003c  2200              MOVS     r2,#0                 ;122
00003e  4b2a              LDR      r3,|L46.232|
000040  4620              MOV      r0,r4                 ;122
000042  4629              MOV      r1,r5                 ;122
000044  f7fffffe          BL       __aeabi_cdrcmple
000048  d809              BHI      |L46.94|
00004a  6839              LDR      r1,[r7,#0]  ; cJSON_malloc
00004c  2015              MOVS     r0,#0x15
00004e  4788              BLX      r1
000050  0007              MOVS     r7,r0
;;;125            if (str) sprintf(str,"%d",item->valueint);
000052  d03e              BEQ      |L46.210|
000054  a125              ADR      r1,|L46.236|
000056  6972              LDR      r2,[r6,#0x14]
000058  f7fffffe          BL       __2sprintf
00005c  e039              B        |L46.210|
                  |L46.94|
;;;126        }
;;;127        else
;;;128        {
;;;129            str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
00005e  6839              LDR      r1,[r7,#0]  ; cJSON_malloc
000060  2040              MOVS     r0,#0x40
000062  4788              BLX      r1
000064  0007              MOVS     r7,r0
;;;130            if (str)
000066  d034              BEQ      |L46.210|
;;;131            {
;;;132                if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
000068  4620              MOV      r0,r4
00006a  4629              MOV      r1,r5
00006c  f7fffffe          BL       floor
000070  4622              MOV      r2,r4
000072  462b              MOV      r3,r5
000074  f7fffffe          BL       __aeabi_dsub
000078  f0214100          BIC      r1,r1,#0x80000000
00007c  2200              MOVS     r2,#0
00007e  4643              MOV      r3,r8
000080  f7fffffe          BL       __aeabi_cdcmple
000084  d80b              BHI      |L46.158|
000086  4620              MOV      r0,r4
000088  f0254100          BIC      r1,r5,#0x80000000
00008c  4a18              LDR      r2,|L46.240|
00008e  4b19              LDR      r3,|L46.244|
000090  f7fffffe          BL       __aeabi_cdcmple
000094  d203              BCS      |L46.158|
000096  4622              MOV      r2,r4
000098  462b              MOV      r3,r5
00009a  a117              ADR      r1,|L46.248|
00009c  e016              B        |L46.204|
                  |L46.158|
;;;133                else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
00009e  f0254100          BIC      r1,r5,#0x80000000
0000a2  4620              MOV      r0,r4
0000a4  460e              MOV      r6,r1
0000a6  4a16              LDR      r2,|L46.256|
0000a8  4b16              LDR      r3,|L46.260|
0000aa  f7fffffe          BL       __aeabi_cdcmple
0000ae  d306              BCC      |L46.190|
0000b0  2200              MOVS     r2,#0
0000b2  4b15              LDR      r3,|L46.264|
0000b4  4620              MOV      r0,r4
0000b6  4631              MOV      r1,r6
0000b8  f7fffffe          BL       __aeabi_cdrcmple
0000bc  d203              BCS      |L46.198|
                  |L46.190|
0000be  4622              MOV      r2,r4
0000c0  462b              MOV      r3,r5
0000c2  a112              ADR      r1,|L46.268|
0000c4  e002              B        |L46.204|
                  |L46.198|
;;;134                else												sprintf(str,"%f",d);
0000c6  4622              MOV      r2,r4
0000c8  462b              MOV      r3,r5
0000ca  a111              ADR      r1,|L46.272|
                  |L46.204|
0000cc  4638              MOV      r0,r7                 ;133
0000ce  f7fffffe          BL       __2sprintf
                  |L46.210|
;;;135            }
;;;136        }
;;;137        return str;
0000d2  4638              MOV      r0,r7
;;;138    }
0000d4  e8bd81f0          POP      {r4-r8,pc}
;;;139    
                          ENDP

                  |L46.216|
                          DCD      ||.data||
                  |L46.220|
                          DCD      0x3cb00000
                  |L46.224|
                          DCD      0xffc00000
                  |L46.228|
                          DCD      0x41dfffff
                  |L46.232|
                          DCD      0xc1e00000
                  |L46.236|
0000ec  256400            DCB      "%d",0
0000ef  00                DCB      0
                  |L46.240|
                          DCD      0xe4c2f344
                  |L46.244|
                          DCD      0x4c63e9e4
                  |L46.248|
0000f8  252e3066          DCB      "%.0f",0
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L46.256|
                          DCD      0xa0b5ed8d
                  |L46.260|
                          DCD      0x3eb0c6f7
                  |L46.264|
                          DCD      0x41cdcd65
                  |L46.268|
00010c  256500            DCB      "%e",0
00010f  00                DCB      0
                  |L46.272|
000110  256600            DCB      "%f",0
000113  00                DCB      0

                          AREA ||i.print_object||, CODE, READONLY, ALIGN=2

                  print_object PROC
;;;441    /* Render an object to text. */
;;;442    static char *print_object(cJSON *item,int depth,int fmt)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;443    {
000004  4607              MOV      r7,r0
;;;444        char **entries=0,**names=0;
;;;445        char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
000006  2007              MOVS     r0,#7
000008  f04f0b00          MOV      r11,#0
;;;446        cJSON *child=item->child;
00000c  9000              STR      r0,[sp,#0]
;;;447        int numentries=0,fail=0;
00000e  68b8              LDR      r0,[r7,#8]
000010  4615              MOV      r5,r2                 ;443
000012  460c              MOV      r4,r1                 ;443
000014  465e              MOV      r6,r11
000016  f8cdb008          STR      r11,[sp,#8]           ;443
00001a  e001              B        |L47.32|
                  |L47.28|
;;;448        /* Count the number of entries. */
;;;449        while (child) numentries++,child=child->next;
00001c  6800              LDR      r0,[r0,#0]
00001e  1c76              ADDS     r6,r6,#1
                  |L47.32|
000020  2800              CMP      r0,#0
000022  d1fb              BNE      |L47.28|
;;;450        /* Explicitly handle empty object case */
;;;451        if (!numentries)
;;;452        {
;;;453            out=(char*)cJSON_malloc(fmt?depth+4:3);
000024  4a7a              LDR      r2,|L47.528|
000026  6811              LDR      r1,[r2,#0]            ;451
000028  b1ee              CBZ      r6,|L47.102|
00002a  00b0              LSLS     r0,r6,#2              ;451
;;;454            if (!out)	return 0;
;;;455            ptr=out;*ptr++='{';
;;;456            if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
;;;457            *ptr++='}';*ptr++=0;
;;;458            return out;
;;;459        }
;;;460        /* Allocate space for the names and the objects */
;;;461        entries=(char**)cJSON_malloc(numentries*sizeof(char*));
00002c  4682              MOV      r10,r0
00002e  4788              BLX      r1
000030  ea5f0900          MOVS     r9,r0
;;;462        if (!entries) return 0;
000034  d036              BEQ      |L47.164|
;;;463        names=(char**)cJSON_malloc(numentries*sizeof(char*));
000036  4976              LDR      r1,|L47.528|
000038  4650              MOV      r0,r10                ;462
00003a  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00003c  4788              BLX      r1
00003e  ea5f0800          MOVS     r8,r0
;;;464        if (!names) {cJSON_free(entries);return 0;}
000042  d031              BEQ      |L47.168|
000044  4651              MOV      r1,r10
;;;465        memset(entries,0,sizeof(char*)*numentries);
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       __aeabi_memclr4
00004c  4651              MOV      r1,r10
;;;466        memset(names,0,sizeof(char*)*numentries);
00004e  4640              MOV      r0,r8
000050  f7fffffe          BL       __aeabi_memclr4
;;;467    
;;;468        /* Collect all the results into our arrays: */
;;;469        child=item->child;depth++;if (fmt) len+=depth;
000054  68bf              LDR      r7,[r7,#8]
000056  f1040a01          ADD      r10,r4,#1
00005a  b3ed              CBZ      r5,|L47.216|
00005c  9900              LDR      r1,[sp,#0]
00005e  eb01000a          ADD      r0,r1,r10
000062  9000              STR      r0,[sp,#0]
000064  e04f              B        |L47.262|
                  |L47.102|
000066  b10d              CBZ      r5,|L47.108|
000068  1d20              ADDS     r0,r4,#4              ;453
00006a  e000              B        |L47.110|
                  |L47.108|
00006c  2003              MOVS     r0,#3                 ;453
                  |L47.110|
00006e  4788              BLX      r1                    ;453
000070  0001              MOVS     r1,r0                 ;453
000072  d017              BEQ      |L47.164|
000074  227b              MOVS     r2,#0x7b              ;455
000076  7002              STRB     r2,[r0,#0]            ;455
000078  1c48              ADDS     r0,r1,#1              ;455
00007a  b165              CBZ      r5,|L47.150|
00007c  220a              MOVS     r2,#0xa               ;456
00007e  f8002b01          STRB     r2,[r0],#1            ;456
000082  2200              MOVS     r2,#0                 ;456
000084  2309              MOVS     r3,#9                 ;456
000086  1e64              SUBS     r4,r4,#1              ;456
000088  e003              B        |L47.146|
00008a  bf00              NOP                            ;456
                  |L47.140|
00008c  f8003b01          STRB     r3,[r0],#1            ;456
000090  1c52              ADDS     r2,r2,#1              ;456
                  |L47.146|
000092  42a2              CMP      r2,r4                 ;456
000094  dbfa              BLT      |L47.140|
                  |L47.150|
000096  227d              MOVS     r2,#0x7d              ;457
000098  7002              STRB     r2,[r0,#0]            ;457
00009a  2200              MOVS     r2,#0                 ;457
00009c  7042              STRB     r2,[r0,#1]            ;457
00009e  4608              MOV      r0,r1                 ;458
                  |L47.160|
;;;470        while (child)
;;;471        {
;;;472            names[i]=str=print_string_ptr(child->string);
;;;473            entries[i++]=ret=print_value(child,depth,fmt);
;;;474            if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
;;;475            child=child->next;
;;;476        }
;;;477    
;;;478        /* Try to allocate the output string */
;;;479        if (!fail) out=(char*)cJSON_malloc(len);
;;;480        if (!out) fail=1;
;;;481    
;;;482        /* Handle failure */
;;;483        if (fail)
;;;484        {
;;;485            for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
;;;486            cJSON_free(names);cJSON_free(entries);
;;;487            return 0;
;;;488        }
;;;489    
;;;490        /* Compose the output: */
;;;491        *out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
;;;492        for (i=0;i<numentries;i++)
;;;493        {
;;;494            if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
;;;495            strcpy(ptr,names[i]);ptr+=strlen(names[i]);
;;;496            *ptr++=':';if (fmt) *ptr++='\t';
;;;497            strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
;;;498            if (i!=numentries-1) *ptr++=',';
;;;499            if (fmt) *ptr++='\n';*ptr=0;
;;;500            cJSON_free(names[i]);cJSON_free(entries[i]);
;;;501        }
;;;502    
;;;503        cJSON_free(names);cJSON_free(entries);
;;;504        if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
;;;505        *ptr++='}';*ptr++=0;
;;;506        return out;
;;;507    }
0000a0  e8bd8ffe          POP      {r1-r11,pc}
                  |L47.164|
0000a4  2000              MOVS     r0,#0                 ;462
0000a6  e7fb              B        |L47.160|
                  |L47.168|
0000a8  4959              LDR      r1,|L47.528|
0000aa  4648              MOV      r0,r9                 ;464
0000ac  6849              LDR      r1,[r1,#4]            ;464  ; cJSON_free
0000ae  e057              B        |L47.352|
                  |L47.176|
0000b0  6a38              LDR      r0,[r7,#0x20]         ;472
0000b2  f7fffffe          BL       print_string_ptr
0000b6  9001              STR      r0,[sp,#4]            ;472
0000b8  f848002b          STR      r0,[r8,r11,LSL #2]    ;472
0000bc  462a              MOV      r2,r5                 ;473
0000be  4651              MOV      r1,r10                ;473
0000c0  4638              MOV      r0,r7                 ;473
0000c2  f7fffffe          BL       print_value
0000c6  4601              MOV      r1,r0                 ;473
0000c8  f849002b          STR      r0,[r9,r11,LSL #2]    ;473
0000cc  9801              LDR      r0,[sp,#4]            ;474
0000ce  f10b0b01          ADD      r11,r11,#1            ;473
0000d2  b1a8              CBZ      r0,|L47.256|
0000d4  b1a1              CBZ      r1,|L47.256|
0000d6  e000              B        |L47.218|
                  |L47.216|
0000d8  e015              B        |L47.262|
                  |L47.218|
0000da  4608              MOV      r0,r1                 ;474
0000dc  f7fffffe          BL       strlen
0000e0  4604              MOV      r4,r0                 ;474
0000e2  9801              LDR      r0,[sp,#4]            ;474
0000e4  f7fffffe          BL       strlen
0000e8  1821              ADDS     r1,r4,r0              ;474
0000ea  b115              CBZ      r5,|L47.242|
0000ec  f10a0002          ADD      r0,r10,#2             ;474
0000f0  e000              B        |L47.244|
                  |L47.242|
0000f2  2000              MOVS     r0,#0                 ;474
                  |L47.244|
0000f4  4401              ADD      r1,r1,r0              ;474
0000f6  9800              LDR      r0,[sp,#0]            ;474
0000f8  4408              ADD      r0,r0,r1              ;474
0000fa  1c80              ADDS     r0,r0,#2              ;474
0000fc  9000              STR      r0,[sp,#0]            ;474
0000fe  e001              B        |L47.260|
                  |L47.256|
000100  2001              MOVS     r0,#1                 ;474
000102  9002              STR      r0,[sp,#8]            ;474
                  |L47.260|
000104  683f              LDR      r7,[r7,#0]            ;475
                  |L47.262|
000106  2f00              CMP      r7,#0                 ;470
000108  d1d2              BNE      |L47.176|
00010a  9802              LDR      r0,[sp,#8]            ;479
00010c  b998              CBNZ     r0,|L47.310|
00010e  4940              LDR      r1,|L47.528|
000110  9800              LDR      r0,[sp,#0]            ;479
000112  6809              LDR      r1,[r1,#0]            ;479  ; cJSON_malloc
000114  4788              BLX      r1                    ;479
000116  ea5f0b00          MOVS     r11,r0                ;479
00011a  d00c              BEQ      |L47.310|
00011c  217b              MOVS     r1,#0x7b              ;491
00011e  f88b1000          STRB     r1,[r11,#0]           ;491
000122  f10b0401          ADD      r4,r11,#1             ;491
000126  b115              CBZ      r5,|L47.302|
000128  200a              MOVS     r0,#0xa               ;491
00012a  f8040b01          STRB     r0,[r4],#1            ;491
                  |L47.302|
00012e  2000              MOVS     r0,#0                 ;491
000130  7020              STRB     r0,[r4,#0]            ;491
000132  4607              MOV      r7,r0                 ;492
000134  e051              B        |L47.474|
                  |L47.310|
000136  2400              MOVS     r4,#0                 ;485
000138  4d35              LDR      r5,|L47.528|
00013a  e00a              B        |L47.338|
                  |L47.316|
00013c  f8580024          LDR      r0,[r8,r4,LSL #2]     ;485
000140  b108              CBZ      r0,|L47.326|
000142  6869              LDR      r1,[r5,#4]            ;485  ; cJSON_free
000144  4788              BLX      r1                    ;485
                  |L47.326|
000146  f8590024          LDR      r0,[r9,r4,LSL #2]     ;485
00014a  b108              CBZ      r0,|L47.336|
00014c  6869              LDR      r1,[r5,#4]            ;485  ; cJSON_free
00014e  4788              BLX      r1                    ;485
                  |L47.336|
000150  1c64              ADDS     r4,r4,#1              ;485
                  |L47.338|
000152  42b4              CMP      r4,r6                 ;485
000154  dbf2              BLT      |L47.316|
000156  6869              LDR      r1,[r5,#4]            ;486  ; cJSON_free
000158  4640              MOV      r0,r8                 ;486
00015a  4788              BLX      r1                    ;486
00015c  6869              LDR      r1,[r5,#4]            ;486  ; cJSON_free
00015e  4648              MOV      r0,r9                 ;486
                  |L47.352|
000160  4788              BLX      r1                    ;486
000162  e79f              B        |L47.164|
                  |L47.356|
000164  b13d              CBZ      r5,|L47.374|
000166  2000              MOVS     r0,#0                 ;494
000168  2109              MOVS     r1,#9                 ;456
00016a  e002              B        |L47.370|
                  |L47.364|
00016c  f8041b01          STRB     r1,[r4],#1            ;494
000170  1c40              ADDS     r0,r0,#1              ;494
                  |L47.370|
000172  4550              CMP      r0,r10                ;494
000174  dbfa              BLT      |L47.364|
                  |L47.374|
000176  f8581027          LDR      r1,[r8,r7,LSL #2]     ;495
00017a  4620              MOV      r0,r4                 ;495
00017c  f7fffffe          BL       strcpy
000180  f8580027          LDR      r0,[r8,r7,LSL #2]     ;495
000184  f7fffffe          BL       strlen
000188  4404              ADD      r4,r4,r0              ;495
00018a  203a              MOVS     r0,#0x3a              ;496
00018c  f8040b01          STRB     r0,[r4],#1            ;496
000190  b115              CBZ      r5,|L47.408|
000192  2009              MOVS     r0,#9                 ;496
000194  f8040b01          STRB     r0,[r4],#1            ;496
                  |L47.408|
000198  f8591027          LDR      r1,[r9,r7,LSL #2]     ;497
00019c  4620              MOV      r0,r4                 ;497
00019e  f7fffffe          BL       strcpy
0001a2  f8590027          LDR      r0,[r9,r7,LSL #2]     ;497
0001a6  f7fffffe          BL       strlen
0001aa  4404              ADD      r4,r4,r0              ;497
0001ac  1e70              SUBS     r0,r6,#1              ;498
0001ae  4287              CMP      r7,r0                 ;498
0001b0  d002              BEQ      |L47.440|
0001b2  202c              MOVS     r0,#0x2c              ;498
0001b4  f8040b01          STRB     r0,[r4],#1            ;498
                  |L47.440|
0001b8  b115              CBZ      r5,|L47.448|
0001ba  200a              MOVS     r0,#0xa               ;499
0001bc  f8040b01          STRB     r0,[r4],#1            ;499
                  |L47.448|
0001c0  4913              LDR      r1,|L47.528|
0001c2  2000              MOVS     r0,#0                 ;499
0001c4  7020              STRB     r0,[r4,#0]            ;499
0001c6  6849              LDR      r1,[r1,#4]            ;500  ; cJSON_free
0001c8  f8580027          LDR      r0,[r8,r7,LSL #2]     ;500
0001cc  4788              BLX      r1                    ;500
0001ce  4910              LDR      r1,|L47.528|
0001d0  f8590027          LDR      r0,[r9,r7,LSL #2]     ;500
0001d4  6849              LDR      r1,[r1,#4]            ;500  ; cJSON_free
0001d6  4788              BLX      r1                    ;500
0001d8  1c7f              ADDS     r7,r7,#1              ;492
                  |L47.474|
0001da  42b7              CMP      r7,r6                 ;492
0001dc  dbc2              BLT      |L47.356|
0001de  4e0c              LDR      r6,|L47.528|
0001e0  4640              MOV      r0,r8                 ;503
0001e2  6871              LDR      r1,[r6,#4]            ;503  ; cJSON_free
0001e4  4788              BLX      r1                    ;503
0001e6  6871              LDR      r1,[r6,#4]            ;503  ; cJSON_free
0001e8  4648              MOV      r0,r9                 ;503
0001ea  4788              BLX      r1                    ;503
0001ec  b14d              CBZ      r5,|L47.514|
0001ee  2100              MOVS     r1,#0                 ;504
0001f0  2209              MOVS     r2,#9                 ;456
0001f2  f1aa0001          SUB      r0,r10,#1             ;456
0001f6  e002              B        |L47.510|
                  |L47.504|
0001f8  f8042b01          STRB     r2,[r4],#1            ;504
0001fc  1c49              ADDS     r1,r1,#1              ;504
                  |L47.510|
0001fe  4281              CMP      r1,r0                 ;504
000200  dbfa              BLT      |L47.504|
                  |L47.514|
000202  207d              MOVS     r0,#0x7d              ;505
000204  7020              STRB     r0,[r4,#0]            ;505
000206  2000              MOVS     r0,#0                 ;505
000208  7060              STRB     r0,[r4,#1]            ;505
00020a  4658              MOV      r0,r11                ;506
00020c  e748              B        |L47.160|
;;;508    
                          ENDP

00020e  0000              DCW      0x0000
                  |L47.528|
                          DCD      ||.data||

                          AREA ||i.print_string_ptr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  print_string_ptr PROC
;;;214    /* Render the cstring provided to an escaped version that can be printed. */
;;;215    static char *print_string_ptr(const char *str)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;216    {
000004  0004              MOVS     r4,r0
;;;217        const char *ptr;char *ptr2,*out;int len=0;unsigned char token;
000006  f04f0500          MOV      r5,#0
00000a  d001              BEQ      |L48.16|
;;;218    
;;;219        if (!str) return cJSON_strdup("");
;;;220        ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<32) len+=5;ptr++;}
00000c  4606              MOV      r6,r0
00000e  e00f              B        |L48.48|
                  |L48.16|
000010  e8bd41f0          POP      {r4-r8,lr}            ;219
000014  a02d              ADR      r0,|L48.204|
000016  f7ffbffe          B.W      cJSON_strdup
                  |L48.26|
00001a  4639              MOV      r1,r7
00001c  a02c              ADR      r0,|L48.208|
00001e  f7fffffe          BL       strchr
000022  b108              CBZ      r0,|L48.40|
000024  1c6d              ADDS     r5,r5,#1
000026  e002              B        |L48.46|
                  |L48.40|
000028  2f20              CMP      r7,#0x20
00002a  d200              BCS      |L48.46|
00002c  1d6d              ADDS     r5,r5,#5
                  |L48.46|
00002e  1c76              ADDS     r6,r6,#1
                  |L48.48|
000030  7837              LDRB     r7,[r6,#0]
000032  b10f              CBZ      r7,|L48.56|
000034  1c6d              ADDS     r5,r5,#1
000036  d1f0              BNE      |L48.26|
                  |L48.56|
;;;221    
;;;222        out=(char*)cJSON_malloc(len+3);
000038  4927              LDR      r1,|L48.216|
00003a  1ce8              ADDS     r0,r5,#3
00003c  6809              LDR      r1,[r1,#0]  ; cJSON_malloc
00003e  4788              BLX      r1
000040  0005              MOVS     r5,r0
;;;223        if (!out) return 0;
000042  d02f              BEQ      |L48.164|
;;;224    
;;;225        ptr2=out;ptr=str;
;;;226        *ptr2++='\"';
000044  2622              MOVS     r6,#0x22
000046  7006              STRB     r6,[r0,#0]
000048  1c68              ADDS     r0,r5,#1
00004a  f04f085c          MOV      r8,#0x5c              ;220
;;;227        while (*ptr)
00004e  e023              B        |L48.152|
                  |L48.80|
;;;228        {
;;;229            if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
000050  291f              CMP      r1,#0x1f
000052  d907              BLS      |L48.100|
000054  2922              CMP      r1,#0x22
000056  d005              BEQ      |L48.100|
000058  295c              CMP      r1,#0x5c
00005a  d003              BEQ      |L48.100|
00005c  f8001b01          STRB     r1,[r0],#1
000060  1c64              ADDS     r4,r4,#1
000062  e019              B        |L48.152|
                  |L48.100|
;;;230            else
;;;231            {
;;;232                *ptr2++='\\';
000064  f8008b01          STRB     r8,[r0],#1
;;;233                switch (token=*ptr++)
000068  f8142b01          LDRB     r2,[r4],#1
00006c  4641              MOV      r1,r8                 ;232
00006e  4607              MOV      r7,r0                 ;232
000070  2a0c              CMP      r2,#0xc
000072  d020              BEQ      |L48.182|
000074  dc06              BGT      |L48.132|
000076  2a08              CMP      r2,#8
000078  d01b              BEQ      |L48.178|
00007a  2a09              CMP      r2,#9
00007c  d021              BEQ      |L48.194|
00007e  2a0a              CMP      r2,#0xa
000080  d106              BNE      |L48.144|
000082  e01a              B        |L48.186|
                  |L48.132|
000084  2a0d              CMP      r2,#0xd
000086  d01a              BEQ      |L48.190|
000088  2a22              CMP      r2,#0x22
00008a  d00f              BEQ      |L48.172|
00008c  2a5c              CMP      r2,#0x5c
00008e  d00b              BEQ      |L48.168|
                  |L48.144|
;;;234                {
;;;235                    case '\\':	*ptr2++='\\';	break;
;;;236                    case '\"':	*ptr2++='\"';	break;
;;;237                    case '\b':	*ptr2++='b';	break;
;;;238                    case '\f':	*ptr2++='f';	break;
;;;239                    case '\n':	*ptr2++='n';	break;
;;;240                    case '\r':	*ptr2++='r';	break;
;;;241                    case '\t':	*ptr2++='t';	break;
;;;242                    default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
000090  a112              ADR      r1,|L48.220|
000092  f7fffffe          BL       __2sprintf
000096  1d78              ADDS     r0,r7,#5
                  |L48.152|
000098  7821              LDRB     r1,[r4,#0]            ;227
00009a  2900              CMP      r1,#0                 ;227
00009c  d1d8              BNE      |L48.80|
;;;243                }
;;;244            }
;;;245        }
;;;246        *ptr2++='\"';*ptr2++=0;
00009e  7006              STRB     r6,[r0,#0]
0000a0  7041              STRB     r1,[r0,#1]
;;;247        return out;
0000a2  4628              MOV      r0,r5
                  |L48.164|
;;;248    }
0000a4  e8bd81f0          POP      {r4-r8,pc}
                  |L48.168|
0000a8  7039              STRB     r1,[r7,#0]            ;235
0000aa  e000              B        |L48.174|
                  |L48.172|
0000ac  703e              STRB     r6,[r7,#0]            ;236
                  |L48.174|
0000ae  1c40              ADDS     r0,r0,#1              ;236
0000b0  e7f2              B        |L48.152|
                  |L48.178|
0000b2  2062              MOVS     r0,#0x62              ;237
0000b4  e006              B        |L48.196|
                  |L48.182|
0000b6  2066              MOVS     r0,#0x66              ;238
0000b8  e004              B        |L48.196|
                  |L48.186|
0000ba  206e              MOVS     r0,#0x6e              ;239
0000bc  e002              B        |L48.196|
                  |L48.190|
0000be  2072              MOVS     r0,#0x72              ;240
0000c0  e000              B        |L48.196|
                  |L48.194|
0000c2  2074              MOVS     r0,#0x74              ;241
                  |L48.196|
0000c4  7038              STRB     r0,[r7,#0]            ;241
0000c6  1c78              ADDS     r0,r7,#1              ;241
0000c8  e7e6              B        |L48.152|
;;;249    /* Invote print_string_ptr (which is useful) on an item. */
                          ENDP

0000ca  0000              DCW      0x0000
                  |L48.204|
0000cc  00                DCB      0
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L48.208|
0000d0  225c080c          DCB      """\\\b\f\n\r\t",0
0000d4  0a0d0900
                  |L48.216|
                          DCD      ||.data||
                  |L48.220|
0000dc  75253034          DCB      "u%04x",0
0000e0  7800    
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.print_value||, CODE, READONLY, ALIGN=2

                  print_value PROC
;;;301    /* Render a value to text. */
;;;302    static char *print_value(cJSON *item,int depth,int fmt)
000000  b430              PUSH     {r4,r5}
;;;303    {
000002  0004              MOVS     r4,r0
;;;304        char *out=0;
000004  f04f0000          MOV      r0,#0
000008  d009              BEQ      |L49.30|
;;;305        if (!item) return 0;
;;;306        switch ((item->type)&255)
00000a  7b23              LDRB     r3,[r4,#0xc]
00000c  b2dd              UXTB     r5,r3
00000e  2d07              CMP      r5,#7
000010  d206              BCS      |L49.32|
000012  e8dff005          TBB      [pc,r5]
000016  090b              DCB      0x09,0x0b
000018  070f1317          DCB      0x07,0x0f,0x13,0x17
00001c  1b00              DCB      0x1b,0x00
                  |L49.30|
00001e  2000              MOVS     r0,#0                 ;305
                  |L49.32|
;;;307        {
;;;308            case cJSON_NULL:	out=cJSON_strdup("null");	break;
;;;309            case cJSON_False:	out=cJSON_strdup("false");break;
;;;310            case cJSON_True:	out=cJSON_strdup("true"); break;
;;;311            case cJSON_Number:	out=print_number(item);break;
;;;312            case cJSON_String:	out=print_string(item);break;
;;;313            case cJSON_Array:	out=print_array(item,depth,fmt);break;
;;;314            case cJSON_Object:	out=print_object(item,depth,fmt);break;
;;;315        }
;;;316        return out;
;;;317    }
000020  bc30              POP      {r4,r5}
000022  4770              BX       lr
000024  a00b              ADR      r0,|L49.84|
000026  e002              B        |L49.46|
000028  a00c              ADR      r0,|L49.92|
00002a  e000              B        |L49.46|
00002c  a00d              ADR      r0,|L49.100|
                  |L49.46|
00002e  bc30              POP      {r4,r5}               ;310
000030  f7ffbffe          B.W      cJSON_strdup
000034  4620              MOV      r0,r4                 ;311
000036  bc30              POP      {r4,r5}               ;311
000038  f7ffbffe          B.W      print_number
00003c  6920              LDR      r0,[r4,#0x10]         ;311
00003e  bc30              POP      {r4,r5}               ;311
000040  f7ffbffe          B.W      print_string_ptr
000044  4620              MOV      r0,r4                 ;313
000046  bc30              POP      {r4,r5}               ;313
000048  f7ffbffe          B.W      print_array
00004c  4620              MOV      r0,r4                 ;314
00004e  bc30              POP      {r4,r5}               ;314
000050  f7ffbffe          B.W      print_object
;;;318    
                          ENDP

                  |L49.84|
000054  6e756c6c          DCB      "null",0
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L49.92|
00005c  66616c73          DCB      "false",0
000060  6500    
000062  00                DCB      0
000063  00                DCB      0
                  |L49.100|
000064  74727565          DCB      "true",0
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.skip||, CODE, READONLY, ALIGN=1

                  skip PROC
;;;260    /* Utility to jump whitespace and cr/lf */
;;;261    static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
000000  e000              B        |L50.4|
                  |L50.2|
000002  1c40              ADDS     r0,r0,#1
                  |L50.4|
000004  2800              CMP      r0,#0
000006  d004              BEQ      |L50.18|
000008  7801              LDRB     r1,[r0,#0]
00000a  2900              CMP      r1,#0
00000c  d001              BEQ      |L50.18|
00000e  2920              CMP      r1,#0x20
000010  d9f7              BLS      |L50.2|
                  |L50.18|
000012  4770              BX       lr
;;;262    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  firstByteMark
000000  0000c0e0          DCB      0x00,0x00,0xc0,0xe0
000004  f0f8fc            DCB      0xf0,0xf8,0xfc

                          AREA ||.data||, DATA, ALIGN=2

                  cJSON_malloc
                          DCD      malloc
                  cJSON_free
                          DCD      free
                  ||ep||
                          DCD      0x00000000
