; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\os_stat.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\os_stat.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\os_stat.crf ..\UCOSIII\uCOS-III\Source\os_stat.c]
                          THUMB

                          AREA ||i.OSStatReset||, CODE, READONLY, ALIGN=2

                  OSStatReset PROC
;;;56     
;;;57     void  OSStatReset (OS_ERR  *p_err)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;58     {
000004  4606              MOV      r6,r0
;;;59     #if (OS_CFG_DBG_EN > 0u)
;;;60         OS_TCB      *p_tcb;
;;;61     #if (OS_MSG_EN > 0u)
;;;62         OS_MSG_Q    *p_msg_q;
;;;63     #endif
;;;64     #if (OS_CFG_Q_EN > 0u)
;;;65         OS_Q        *p_q;
;;;66     #endif
;;;67         CPU_SR_ALLOC();
;;;68     #endif
;;;69     
;;;70     
;;;71     
;;;72     #ifdef OS_SAFETY_CRITICAL
;;;73         if (p_err == (OS_ERR *)0) {
;;;74             OS_SAFETY_CRITICAL_EXCEPTION();
;;;75             return;
;;;76         }
;;;77     #endif
;;;78     
;;;79         CPU_CRITICAL_ENTER();
000006  f7fffffe          BL       CPU_SR_Save
;;;80     #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;81         OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
00000a  4923              LDR      r1,|L1.152|
00000c  2400              MOVS     r4,#0
;;;82         OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
00000e  600c              STR      r4,[r1,#0]  ; OSIntQTaskTimeMax
000010  4922              LDR      r1,|L1.156|
000012  800c              STRH     r4,[r1,#0]
;;;83     #endif
;;;84     
;;;85     #if OS_CFG_STAT_TASK_EN > 0u
;;;86         OSStatTaskCPUUsageMax = 0u;
000014  4922              LDR      r1,|L1.160|
000016  800c              STRH     r4,[r1,#0]
;;;87         OSStatTaskTimeMax     = (CPU_TS)0;
000018  4922              LDR      r1,|L1.164|
;;;88     #endif
;;;89     
;;;90         OSTickTaskTimeMax     = (CPU_TS)0;
00001a  600c              STR      r4,[r1,#0]  ; OSStatTaskTimeMax
00001c  4922              LDR      r1,|L1.168|
;;;91     
;;;92     #if OS_CFG_TMR_EN > 0u
;;;93         OSTmrTaskTimeMax      = (CPU_TS)0;
00001e  600c              STR      r4,[r1,#0]  ; OSTickTaskTimeMax
000020  4922              LDR      r1,|L1.172|
;;;94     #endif
;;;95     
;;;96     #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;97         OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
;;;98     #endif
;;;99     
;;;100    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;101        OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
000022  600c              STR      r4,[r1,#0]  ; OSTmrTaskTimeMax
000024  4922              LDR      r1,|L1.176|
;;;102    #endif
;;;103    
;;;104    #if OS_MSG_EN > 0u
;;;105        OSMsgPool.NbrUsedMax  = 0;
000026  600c              STR      r4,[r1,#0]  ; OSSchedLockTimeMax
000028  4922              LDR      r1,|L1.180|
00002a  810c              STRH     r4,[r1,#8]
;;;106    #endif
;;;107        CPU_CRITICAL_EXIT();
00002c  f7fffffe          BL       CPU_SR_Restore
;;;108    
;;;109    #if OS_CFG_DBG_EN > 0u
;;;110        CPU_CRITICAL_ENTER();
000030  f7fffffe          BL       CPU_SR_Save
;;;111        p_tcb = OSTaskDbgListPtr;
000034  4920              LDR      r1,|L1.184|
;;;112        CPU_CRITICAL_EXIT();
;;;113        while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
000036  680d              LDR      r5,[r1,#0]  ; OSTaskDbgListPtr
000038  e015              B        |L1.102|
;;;114            CPU_CRITICAL_ENTER();
00003a  bf00              NOP      
                  |L1.60|
00003c  f7fffffe          BL       CPU_SR_Save
000040  3578              ADDS     r5,r5,#0x78
000042  4607              MOV      r7,r0
;;;115    
;;;116    #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;117            p_tcb->IntDisTimeMax    = (CPU_TS      )0;
;;;118    #endif
;;;119    
;;;120    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;121            p_tcb->SchedLockTimeMax = (CPU_TS      )0;
;;;122    #endif
;;;123    
;;;124    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;125    #if OS_CFG_TASK_Q_EN > 0u
;;;126            p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
000044  63ec              STR      r4,[r5,#0x3c]
;;;127    #endif
;;;128            p_tcb->SemPendTimeMax   = (CPU_TS      )0;
000046  602c              STR      r4,[r5,#0]
;;;129            p_tcb->CtxSwCtr         = (OS_CTR      )0;
000048  632c              STR      r4,[r5,#0x30]
;;;130            p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
00004a  61ac              STR      r4,[r5,#0x18]
00004c  82ac              STRH     r4,[r5,#0x14]
;;;131            p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
00004e  82ec              STRH     r4,[r5,#0x16]
;;;132            p_tcb->CyclesTotal      = (OS_CYCLES   )0;
;;;133            p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
000050  626c              STR      r4,[r5,#0x24]
;;;134            p_tcb->CyclesStart      =  OS_TS_GET();
000052  62ac              STR      r4,[r5,#0x28]
000054  f7fffffe          BL       CPU_TS_TmrRd
000058  6228              STR      r0,[r5,#0x20]
;;;135    #endif
;;;136    
;;;137    #if OS_CFG_TASK_Q_EN > 0u
;;;138            p_msg_q                 = &p_tcb->MsgQ;
00005a  2070              MOVS     r0,#0x70
00005c  3d78              SUBS     r5,r5,#0x78           ;134
;;;139            p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
00005e  5344              STRH     r4,[r0,r5]
;;;140    #endif
;;;141            p_tcb                   = p_tcb->DbgNextPtr;
000060  f8d550bc          LDR      r5,[r5,#0xbc]
;;;142            CPU_CRITICAL_EXIT();
000064  4638              MOV      r0,r7
                  |L1.102|
000066  f7fffffe          BL       CPU_SR_Restore
00006a  2d00              CMP      r5,#0                 ;112
00006c  d1e6              BNE      |L1.60|
;;;143        }
;;;144    #endif
;;;145    
;;;146    #if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
;;;147        CPU_CRITICAL_ENTER();
00006e  f7fffffe          BL       CPU_SR_Save
;;;148        p_q = OSQDbgListPtr;
000072  4912              LDR      r1,|L1.188|
;;;149        CPU_CRITICAL_EXIT();
;;;150        while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
000074  680d              LDR      r5,[r1,#0]  ; OSQDbgListPtr
000076  e003              B        |L1.128|
                  |L1.120|
;;;151            CPU_CRITICAL_ENTER();
000078  f7fffffe          BL       CPU_SR_Save
;;;152            p_msg_q                = &p_q->MsgQ;
;;;153            p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
00007c  85ac              STRH     r4,[r5,#0x2c]
;;;154            p_q                    = p_q->DbgNextPtr;
00007e  69ad              LDR      r5,[r5,#0x18]
                  |L1.128|
000080  f7fffffe          BL       CPU_SR_Restore
000084  2d00              CMP      r5,#0                 ;149
000086  d1f7              BNE      |L1.120|
;;;155            CPU_CRITICAL_EXIT();
;;;156        }
;;;157    #endif
;;;158    
;;;159        OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
000088  f7fffffe          BL       OS_TickListResetPeak
;;;160    
;;;161    #if OS_CFG_TMR_EN > 0u
;;;162        OS_TmrResetPeak();
00008c  f7fffffe          BL       OS_TmrResetPeak
;;;163    #endif
;;;164    
;;;165    
;;;166       *p_err = OS_ERR_NONE;
000090  8034              STRH     r4,[r6,#0]
;;;167    }
000092  e8bd81f0          POP      {r4-r8,pc}
;;;168    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      OSIntQTaskTimeMax
                  |L1.156|
                          DCD      OSIntQNbrEntriesMax
                  |L1.160|
                          DCD      OSStatTaskCPUUsageMax
                  |L1.164|
                          DCD      OSStatTaskTimeMax
                  |L1.168|
                          DCD      OSTickTaskTimeMax
                  |L1.172|
                          DCD      OSTmrTaskTimeMax
                  |L1.176|
                          DCD      OSSchedLockTimeMax
                  |L1.180|
                          DCD      OSMsgPool
                  |L1.184|
                          DCD      OSTaskDbgListPtr
                  |L1.188|
                          DCD      OSQDbgListPtr

                          AREA ||i.OSStatTaskCPUUsageInit||, CODE, READONLY, ALIGN=2

                  OSStatTaskCPUUsageInit PROC
;;;190    
;;;191    void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
000000  b5f8              PUSH     {r3-r7,lr}
;;;192    {
000002  4604              MOV      r4,r0
;;;193        OS_ERR   err;
;;;194        OS_TICK  dly;
;;;195        CPU_SR_ALLOC();
;;;196    
;;;197    
;;;198    
;;;199    #ifdef OS_SAFETY_CRITICAL
;;;200        if (p_err == (OS_ERR *)0) {
;;;201            OS_SAFETY_CRITICAL_EXCEPTION();
;;;202            return;
;;;203        }
;;;204    #endif
;;;205    
;;;206    #if (OS_CFG_TMR_EN > 0u)
;;;207        OSTaskSuspend(&OSTmrTaskTCB, &err);
000004  4669              MOV      r1,sp
000006  481e              LDR      r0,|L2.128|
000008  f7fffffe          BL       OSTaskSuspend
;;;208        if (err != OS_ERR_NONE) {
00000c  f8bd0000          LDRH     r0,[sp,#0]
000010  bb28              CBNZ     r0,|L2.94|
;;;209           *p_err = err;
;;;210            return;
;;;211        }
;;;212    #endif
;;;213    
;;;214        OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
000012  466a              MOV      r2,sp
000014  2100              MOVS     r1,#0
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       OSTimeDly
;;;215                  (OS_OPT  )OS_OPT_TIME_DLY,
;;;216                  (OS_ERR *)&err);
;;;217        if (err != OS_ERR_NONE) {
00001c  f8bd0000          LDRH     r0,[sp,#0]
000020  b9e8              CBNZ     r0,|L2.94|
;;;218           *p_err = err;
;;;219            return;
;;;220        }
;;;221        CPU_CRITICAL_ENTER();
000022  f7fffffe          BL       CPU_SR_Save
;;;222        OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
000026  4e17              LDR      r6,|L2.132|
000028  2500              MOVS     r5,#0
;;;223        CPU_CRITICAL_EXIT();
00002a  6035              STR      r5,[r6,#0]  ; OSStatTaskCtr
00002c  f7fffffe          BL       CPU_SR_Restore
;;;224    
;;;225        dly = (OS_TICK)0;
;;;226        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
000030  4915              LDR      r1,|L2.136|
000032  4816              LDR      r0,|L2.140|
000034  680a              LDR      r2,[r1,#0]  ; OSCfg_TickRate_Hz
000036  6803              LDR      r3,[r0,#0]  ; OSCfg_StatTaskRate_Hz
000038  429a              CMP      r2,r3
00003a  d902              BLS      |L2.66|
;;;227            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
00003c  fbb2f0f3          UDIV     r0,r2,r3
000040  b910              CBNZ     r0,|L2.72|
                  |L2.66|
;;;228        }
;;;229        if (dly == (OS_TICK)0) {
;;;230            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
000042  210a              MOVS     r1,#0xa
000044  fbb2f0f1          UDIV     r0,r2,r1
                  |L2.72|
;;;231        }
;;;232    
;;;233        OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
000048  466a              MOV      r2,sp
00004a  2100              MOVS     r1,#0
00004c  f7fffffe          BL       OSTimeDly
;;;234                  OS_OPT_TIME_DLY,
;;;235                  &err);
;;;236    
;;;237    #if (OS_CFG_TMR_EN > 0u)
;;;238        OSTaskResume(&OSTmrTaskTCB, &err);
000050  4669              MOV      r1,sp
000052  480b              LDR      r0,|L2.128|
000054  f7fffffe          BL       OSTaskResume
;;;239        if (err != OS_ERR_NONE) {
000058  f8bd0000          LDRH     r0,[sp,#0]
00005c  b108              CBZ      r0,|L2.98|
                  |L2.94|
;;;240           *p_err = err;
00005e  8020              STRH     r0,[r4,#0]
;;;241            return;
;;;242        }
;;;243    #endif
;;;244    
;;;245        CPU_CRITICAL_ENTER();
;;;246        OSStatTaskTimeMax = (CPU_TS)0;
;;;247    
;;;248        OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
;;;249        OSStatTaskRdy     = OS_STATE_RDY;
;;;250        CPU_CRITICAL_EXIT();
;;;251       *p_err             = OS_ERR_NONE;
;;;252    }
000060  bdf8              POP      {r3-r7,pc}
                  |L2.98|
000062  f7fffffe          BL       CPU_SR_Save
000066  490a              LDR      r1,|L2.144|
000068  4a0a              LDR      r2,|L2.148|
00006a  600d              STR      r5,[r1,#0]            ;248  ; OSStatTaskTimeMax
00006c  6831              LDR      r1,[r6,#0]            ;248  ; OSStatTaskCtr
00006e  6011              STR      r1,[r2,#0]            ;249  ; OSStatTaskCtrMax
000070  4a09              LDR      r2,|L2.152|
000072  2101              MOVS     r1,#1                 ;249
000074  7011              STRB     r1,[r2,#0]            ;249
000076  f7fffffe          BL       CPU_SR_Restore
00007a  8025              STRH     r5,[r4,#0]            ;251
00007c  bdf8              POP      {r3-r7,pc}
;;;253    
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      OSTmrTaskTCB
                  |L2.132|
                          DCD      OSStatTaskCtr
                  |L2.136|
                          DCD      OSCfg_TickRate_Hz
                  |L2.140|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L2.144|
                          DCD      OSStatTaskTimeMax
                  |L2.148|
                          DCD      OSStatTaskCtrMax
                  |L2.152|
                          DCD      OSStatTaskRdy

                          AREA ||i.OS_StatTask||, CODE, READONLY, ALIGN=2

                  OS_StatTask PROC
;;;280    
;;;281    void  OS_StatTask (void  *p_arg)
000000  b51c              PUSH     {r2-r4,lr}
;;;282    {
;;;283    #if OS_CFG_DBG_EN > 0u
;;;284    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;285        OS_CPU_USAGE usage;
;;;286        OS_CYCLES    cycles_total;
;;;287        OS_CYCLES    cycles_div;
;;;288        OS_CYCLES    cycles_mult;
;;;289        OS_CYCLES    cycles_max;
;;;290    #endif
;;;291        OS_TCB      *p_tcb;
;;;292    #endif
;;;293        OS_TICK      ctr_max;
;;;294        OS_TICK      ctr_mult;
;;;295        OS_TICK      ctr_div;
;;;296        OS_ERR       err;
;;;297        OS_TICK      dly;
;;;298        CPU_TS       ts_start;
;;;299        CPU_TS       ts_end;
;;;300        CPU_SR_ALLOC();
;;;301    
;;;302    
;;;303    
;;;304        p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */
;;;305        while (OSStatTaskRdy != DEF_TRUE) {
;;;306            OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
000002  4c7a              LDR      r4,|L3.492|
000004  4e7a              LDR      r6,|L3.496|
000006  6820              LDR      r0,[r4,#0]
000008  0045              LSLS     r5,r0,#1
00000a  e004              B        |L3.22|
                  |L3.12|
00000c  466a              MOV      r2,sp
00000e  2100              MOVS     r1,#0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       OSTimeDly
                  |L3.22|
000016  7830              LDRB     r0,[r6,#0]            ;305  ; OSStatTaskRdy
000018  2801              CMP      r0,#1                 ;305
00001a  d1f7              BNE      |L3.12|
;;;307                      OS_OPT_TIME_DLY,
;;;308                      &err);
;;;309        }
;;;310        OSStatReset(&err);                                      /* Reset statistics                                       */
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       OSStatReset
;;;311    
;;;312        dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
;;;313        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
000022  4874              LDR      r0,|L3.500|
000024  6821              LDR      r1,[r4,#0]  ; OSCfg_StatTaskRate_Hz
000026  6802              LDR      r2,[r0,#0]  ; OSCfg_TickRate_Hz
000028  428a              CMP      r2,r1
00002a  d904              BLS      |L3.54|
;;;314            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
00002c  fbb2f9f1          UDIV     r9,r2,r1
;;;315        }
;;;316        if (dly == (OS_TICK)0) {
000030  f1b90f00          CMP      r9,#0
000034  d102              BNE      |L3.60|
                  |L3.54|
;;;317            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
000036  210a              MOVS     r1,#0xa
000038  fbb2f9f1          UDIV     r9,r2,r1
                  |L3.60|
;;;318        }
;;;319    
;;;320        while (DEF_ON) {
;;;321            ts_start        = OS_TS_GET();
;;;322    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;323            OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
;;;324    #endif
;;;325    
;;;326            CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
;;;327            OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
;;;328            OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
;;;329            CPU_CRITICAL_EXIT();
;;;330    
;;;331            if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
;;;332                if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
;;;333                    ctr_mult = 10000u;
;;;334                    ctr_div  =     1u;
;;;335                } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
;;;336                    ctr_mult =  1000u;
;;;337                    ctr_div  =    10u;
;;;338                } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
;;;339                    ctr_mult =   100u;
;;;340                    ctr_div  =   100u;
;;;341                } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
;;;342                    ctr_mult =    10u;
;;;343                    ctr_div  =  1000u;
;;;344                } else {                                                                 /*  400,000,000 and up           */
;;;345                    ctr_mult =     1u;
;;;346                    ctr_div  = 10000u;
;;;347                }
;;;348                ctr_max            = OSStatTaskCtrMax / ctr_div;
;;;349                OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
00003c  f8dfb1b8          LDR      r11,|L3.504|
;;;350                if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
;;;351                    OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
;;;352                }
;;;353            } else {
;;;354                OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
;;;355            }
;;;356    
;;;357            OSStatTaskHook();                                   /* Invoke user definable hook                             */
;;;358    
;;;359    
;;;360    #if OS_CFG_DBG_EN > 0u
;;;361    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;362            cycles_total = (OS_CYCLES)0;
;;;363    
;;;364            CPU_CRITICAL_ENTER();
;;;365            p_tcb = OSTaskDbgListPtr;
000040  f8df81b8          LDR      r8,|L3.508|
000044  f2427a10          MOV      r10,#0x2710           ;333
000048  f05f0600          MOVS.W   r6,#0                 ;333
                  |L3.76|
00004c  f7fffffe          BL       CPU_TS_TmrRd
000050  9001              STR      r0,[sp,#4]            ;326
000052  f7fffffe          BL       CPU_SR_Save
000056  496a              LDR      r1,|L3.512|
000058  4c6a              LDR      r4,|L3.516|
00005a  680a              LDR      r2,[r1,#0]            ;327  ; OSStatTaskCtr
00005c  6022              STR      r2,[r4,#0]            ;328  ; OSStatTaskCtrRun
00005e  600e              STR      r6,[r1,#0]            ;329  ; OSStatTaskCtr
000060  f7fffffe          BL       CPU_SR_Restore
000064  4868              LDR      r0,|L3.520|
000066  6823              LDR      r3,[r4,#0]            ;331  ; OSStatTaskCtrRun
000068  6802              LDR      r2,[r0,#0]            ;331  ; OSStatTaskCtrMax
00006a  429a              CMP      r2,r3                 ;331
00006c  d92b              BLS      |L3.198|
00006e  4867              LDR      r0,|L3.524|
000070  4282              CMP      r2,r0                 ;332
000072  d202              BCS      |L3.122|
000074  4650              MOV      r0,r10                ;333
000076  2101              MOVS     r1,#1                 ;334
000078  e015              B        |L3.166|
                  |L3.122|
00007a  4865              LDR      r0,|L3.528|
00007c  4282              CMP      r2,r0                 ;335
00007e  d203              BCS      |L3.136|
000080  f44f707a          MOV      r0,#0x3e8             ;336
000084  210a              MOVS     r1,#0xa               ;337
000086  e00e              B        |L3.166|
                  |L3.136|
000088  4862              LDR      r0,|L3.532|
00008a  4282              CMP      r2,r0                 ;338
00008c  d202              BCS      |L3.148|
00008e  2064              MOVS     r0,#0x64              ;339
000090  4601              MOV      r1,r0                 ;340
000092  e008              B        |L3.166|
                  |L3.148|
000094  4860              LDR      r0,|L3.536|
000096  4282              CMP      r2,r0                 ;341
000098  d203              BCS      |L3.162|
00009a  200a              MOVS     r0,#0xa               ;342
00009c  f44f717a          MOV      r1,#0x3e8             ;343
0000a0  e001              B        |L3.166|
                  |L3.162|
0000a2  2001              MOVS     r0,#1                 ;345
0000a4  4651              MOV      r1,r10                ;346
                  |L3.166|
0000a6  fbb2f1f1          UDIV     r1,r2,r1              ;348
0000aa  4358              MULS     r0,r3,r0              ;349
0000ac  fbb0f1f1          UDIV     r1,r0,r1              ;349
0000b0  ebaa0001          SUB      r0,r10,r1             ;349
0000b4  4959              LDR      r1,|L3.540|
0000b6  b280              UXTH     r0,r0                 ;349
0000b8  f8ab0000          STRH     r0,[r11,#0]           ;349
0000bc  880a              LDRH     r2,[r1,#0]            ;350  ; OSStatTaskCPUUsageMax
0000be  4282              CMP      r2,r0                 ;350
0000c0  d203              BCS      |L3.202|
0000c2  8008              STRH     r0,[r1,#0]            ;351
0000c4  e001              B        |L3.202|
                  |L3.198|
0000c6  f8aba000          STRH     r10,[r11,#0]          ;354
                  |L3.202|
0000ca  f7fffffe          BL       OSStatTaskHook
0000ce  2400              MOVS     r4,#0                 ;362
0000d0  f7fffffe          BL       CPU_SR_Save
;;;366            CPU_CRITICAL_EXIT();
;;;367            while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
0000d4  f8d85000          LDR      r5,[r8,#0]  ; OSTaskDbgListPtr
0000d8  e024              B        |L3.292|
;;;368                OS_CRITICAL_ENTER();
0000da  bf00              NOP      
                  |L3.220|
0000dc  f7fffffe          BL       CPU_SR_Save
0000e0  4f4f              LDR      r7,|L3.544|
0000e2  7839              LDRB     r1,[r7,#0]  ; OSSchedLockNestingCtr
0000e4  1c49              ADDS     r1,r1,#1
0000e6  7039              STRB     r1,[r7,#0]
0000e8  f7fffffe          BL       CPU_SR_Restore
;;;369                p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
0000ec  f8550f9c          LDR      r0,[r5,#0x9c]!
0000f0  e8656027          STRD     r6,r0,[r5],#-0x9c
;;;370                p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
;;;371                OS_CRITICAL_EXIT();
0000f4  f7fffffe          BL       CPU_SR_Save
0000f8  7839              LDRB     r1,[r7,#0]  ; OSSchedLockNestingCtr
0000fa  1e49              SUBS     r1,r1,#1
0000fc  f01101ff          ANDS     r1,r1,#0xff
000100  7039              STRB     r1,[r7,#0]
000102  d107              BNE      |L3.276|
000104  4947              LDR      r1,|L3.548|
000106  8809              LDRH     r1,[r1,#0]  ; OSIntQNbrEntries
000108  b121              CBZ      r1,|L3.276|
00010a  f7fffffe          BL       CPU_SR_Restore
00010e  f7fffffe          BL       OS_Sched0
000112  e001              B        |L3.280|
                  |L3.276|
000114  f7fffffe          BL       CPU_SR_Restore
                  |L3.280|
;;;372    
;;;373                cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
000118  f8550fa0          LDR      r0,[r5,#0xa0]!
00011c  4404              ADD      r4,r4,r0
;;;374    
;;;375                CPU_CRITICAL_ENTER();
00011e  f7fffffe          BL       CPU_SR_Save
;;;376                p_tcb                  = p_tcb->DbgNextPtr;
000122  69ed              LDR      r5,[r5,#0x1c]
                  |L3.292|
000124  f7fffffe          BL       CPU_SR_Restore
000128  2d00              CMP      r5,#0                 ;366
00012a  d1d7              BNE      |L3.220|
;;;377                CPU_CRITICAL_EXIT();
;;;378            }
;;;379    #endif
;;;380    
;;;381    
;;;382    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;383                                                                /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
;;;384            if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
00012c  b1f4              CBZ      r4,|L3.364|
;;;385                if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
00012e  4837              LDR      r0,|L3.524|
000130  4284              CMP      r4,r0
000132  d202              BCS      |L3.314|
;;;386                    cycles_mult = 10000u;
000134  4655              MOV      r5,r10
;;;387                    cycles_div  =     1u;
000136  2001              MOVS     r0,#1
000138  e015              B        |L3.358|
                  |L3.314|
;;;388                } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
00013a  4835              LDR      r0,|L3.528|
00013c  4284              CMP      r4,r0
00013e  d203              BCS      |L3.328|
;;;389                    cycles_mult =  1000u;
000140  f44f757a          MOV      r5,#0x3e8
;;;390                    cycles_div  =    10u;
000144  200a              MOVS     r0,#0xa
000146  e00e              B        |L3.358|
                  |L3.328|
;;;391                } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
000148  4832              LDR      r0,|L3.532|
00014a  4284              CMP      r4,r0
00014c  d202              BCS      |L3.340|
;;;392                    cycles_mult =   100u;
00014e  2564              MOVS     r5,#0x64
;;;393                    cycles_div  =   100u;
000150  4628              MOV      r0,r5
000152  e008              B        |L3.358|
                  |L3.340|
;;;394                } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
000154  4830              LDR      r0,|L3.536|
000156  4284              CMP      r4,r0
000158  d203              BCS      |L3.354|
;;;395                    cycles_mult =    10u;
00015a  250a              MOVS     r5,#0xa
;;;396                    cycles_div  =  1000u;
00015c  f44f707a          MOV      r0,#0x3e8
000160  e001              B        |L3.358|
                  |L3.354|
;;;397                } else {                                                                 /*  400,000,000 and up           */
;;;398                    cycles_mult =     1u;
000162  2501              MOVS     r5,#1
;;;399                    cycles_div  = 10000u;
000164  4650              MOV      r0,r10
                  |L3.358|
;;;400                }
;;;401                cycles_max  = cycles_total / cycles_div;
000166  fbb4f7f0          UDIV     r7,r4,r0
00016a  e001              B        |L3.368|
                  |L3.364|
;;;402            } else {
;;;403                cycles_mult = 0u;
00016c  2500              MOVS     r5,#0
;;;404                cycles_max  = 1u;
00016e  2701              MOVS     r7,#1
                  |L3.368|
;;;405            }
;;;406    #endif
;;;407            CPU_CRITICAL_ENTER();
000170  f7fffffe          BL       CPU_SR_Save
;;;408            p_tcb = OSTaskDbgListPtr;
;;;409            CPU_CRITICAL_EXIT();
;;;410            while (p_tcb != (OS_TCB *)0) {
000174  f8d84000          LDR      r4,[r8,#0]  ; OSTaskDbgListPtr
000178  e01c              B        |L3.436|
;;;411    #if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
;;;412                usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
00017a  bf00              NOP      
                  |L3.380|
00017c  f8d400a0          LDR      r0,[r4,#0xa0]
000180  4368              MULS     r0,r5,r0
000182  fbb0f0f7          UDIV     r0,r0,r7
000186  b280              UXTH     r0,r0
;;;413                if (usage > 10000u) {
000188  4550              CMP      r0,r10
00018a  d900              BLS      |L3.398|
;;;414                    usage = 10000u;
00018c  4650              MOV      r0,r10
                  |L3.398|
;;;415                }
;;;416                p_tcb->CPUUsage = usage;
00018e  f8a4008c          STRH     r0,[r4,#0x8c]
;;;417                if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
000192  f8b4108e          LDRH     r1,[r4,#0x8e]
000196  4281              CMP      r1,r0
000198  d201              BCS      |L3.414|
;;;418                    p_tcb->CPUUsageMax = usage;
00019a  f8a4008e          STRH     r0,[r4,#0x8e]
                  |L3.414|
;;;419                }
;;;420    #endif
;;;421    
;;;422    #if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
;;;423                OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
00019e  f10402ac          ADD      r2,r4,#0xac
0001a2  466b              MOV      r3,sp
0001a4  1d11              ADDS     r1,r2,#4
0001a6  4620              MOV      r0,r4
0001a8  f7fffffe          BL       OSTaskStkChk
;;;424                             &p_tcb->StkFree,
;;;425                             &p_tcb->StkUsed,
;;;426                             &err);
;;;427    #endif
;;;428    
;;;429                CPU_CRITICAL_ENTER();
0001ac  f7fffffe          BL       CPU_SR_Save
;;;430                p_tcb = p_tcb->DbgNextPtr;
0001b0  f8d440bc          LDR      r4,[r4,#0xbc]
                  |L3.436|
0001b4  f7fffffe          BL       CPU_SR_Restore
0001b8  2c00              CMP      r4,#0                 ;409
0001ba  d1df              BNE      |L3.380|
;;;431                CPU_CRITICAL_EXIT();
;;;432            }
;;;433    #endif
;;;434    
;;;435            if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
0001bc  481a              LDR      r0,|L3.552|
0001be  7801              LDRB     r1,[r0,#0]  ; OSStatResetFlag
0001c0  2901              CMP      r1,#1
0001c2  d103              BNE      |L3.460|
;;;436                OSStatResetFlag  = DEF_FALSE;
0001c4  7006              STRB     r6,[r0,#0]
;;;437                OSStatReset(&err);
0001c6  4668              MOV      r0,sp
0001c8  f7fffffe          BL       OSStatReset
                  |L3.460|
;;;438            }
;;;439    
;;;440            ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
0001cc  f7fffffe          BL       CPU_TS_TmrRd
0001d0  9901              LDR      r1,[sp,#4]
0001d2  1a40              SUBS     r0,r0,r1
;;;441            if (OSStatTaskTimeMax < ts_end) {
0001d4  4915              LDR      r1,|L3.556|
0001d6  680a              LDR      r2,[r1,#0]  ; OSStatTaskTimeMax
0001d8  4282              CMP      r2,r0
0001da  d200              BCS      |L3.478|
;;;442                OSStatTaskTimeMax = ts_end;
0001dc  6008              STR      r0,[r1,#0]  ; OSStatTaskTimeMax
                  |L3.478|
;;;443            }
;;;444    
;;;445            OSTimeDly(dly,
0001de  466a              MOV      r2,sp
0001e0  2100              MOVS     r1,#0
0001e2  4648              MOV      r0,r9
0001e4  f7fffffe          BL       OSTimeDly
0001e8  e730              B        |L3.76|
;;;446                      OS_OPT_TIME_DLY,
;;;447                      &err);
;;;448        }
;;;449    }
;;;450    
                          ENDP

0001ea  0000              DCW      0x0000
                  |L3.492|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L3.496|
                          DCD      OSStatTaskRdy
                  |L3.500|
                          DCD      OSCfg_TickRate_Hz
                  |L3.504|
                          DCD      OSStatTaskCPUUsage
                  |L3.508|
                          DCD      OSTaskDbgListPtr
                  |L3.512|
                          DCD      OSStatTaskCtr
                  |L3.516|
                          DCD      OSStatTaskCtrRun
                  |L3.520|
                          DCD      OSStatTaskCtrMax
                  |L3.524|
                          DCD      0x00061a80
                  |L3.528|
                          DCD      0x003d0900
                  |L3.532|
                          DCD      0x02625a00
                  |L3.536|
                          DCD      0x17d78400
                  |L3.540|
                          DCD      OSStatTaskCPUUsageMax
                  |L3.544|
                          DCD      OSSchedLockNestingCtr
                  |L3.548|
                          DCD      OSIntQNbrEntries
                  |L3.552|
                          DCD      OSStatResetFlag
                  |L3.556|
                          DCD      OSStatTaskTimeMax

                          AREA ||i.OS_StatTaskInit||, CODE, READONLY, ALIGN=2

                  OS_StatTaskInit PROC
;;;471    
;;;472    void  OS_StatTaskInit (OS_ERR  *p_err)
000000  b530              PUSH     {r4,r5,lr}
;;;473    {
;;;474    #ifdef OS_SAFETY_CRITICAL
;;;475        if (p_err == (OS_ERR *)0) {
;;;476            OS_SAFETY_CRITICAL_EXCEPTION();
;;;477            return;
;;;478        }
;;;479    #endif
;;;480    
;;;481        OSStatTaskCtr    = (OS_TICK)0;
000002  4a1d              LDR      r2,|L4.120|
000004  b089              SUB      sp,sp,#0x24           ;473
000006  2100              MOVS     r1,#0
;;;482        OSStatTaskCtrRun = (OS_TICK)0;
000008  6011              STR      r1,[r2,#0]  ; OSStatTaskCtr
00000a  4a1c              LDR      r2,|L4.124|
;;;483        OSStatTaskCtrMax = (OS_TICK)0;
00000c  6011              STR      r1,[r2,#0]  ; OSStatTaskCtrRun
00000e  4a1c              LDR      r2,|L4.128|
;;;484        OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
000010  6011              STR      r1,[r2,#0]  ; OSStatTaskCtrMax
000012  4a1c              LDR      r2,|L4.132|
000014  7011              STRB     r1,[r2,#0]
;;;485        OSStatResetFlag  = DEF_FALSE;
000016  4a1c              LDR      r2,|L4.136|
000018  7011              STRB     r1,[r2,#0]
;;;486    
;;;487                                                                /* ---------------- CREATE THE STAT TASK ---------------- */
;;;488        if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
00001a  4a1c              LDR      r2,|L4.140|
00001c  6813              LDR      r3,[r2,#0]            ;473  ; OSCfg_StatTaskStkBasePtr
00001e  b143              CBZ      r3,|L4.50|
;;;489           *p_err = OS_ERR_STAT_STK_INVALID;
;;;490            return;
;;;491        }
;;;492    
;;;493        if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
000020  4b1b              LDR      r3,|L4.144|
000022  4d1c              LDR      r5,|L4.148|
000024  681c              LDR      r4,[r3,#0]  ; OSCfg_StatTaskStkSize
000026  682d              LDR      r5,[r5,#0]  ; OSCfg_StkSizeMin
000028  42ac              CMP      r4,r5
00002a  d205              BCS      |L4.56|
;;;494           *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
00002c  f646612c          MOV      r1,#0x6e2c
;;;495            return;
000030  e008              B        |L4.68|
                  |L4.50|
000032  f646612b          MOV      r1,#0x6e2b            ;489
000036  e005              B        |L4.68|
                  |L4.56|
;;;496        }
;;;497    
;;;498        if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
000038  4c17              LDR      r4,|L4.152|
00003a  7825              LDRB     r5,[r4,#0]  ; OSCfg_StatTaskPrio
00003c  2d3f              CMP      r5,#0x3f
00003e  d304              BCC      |L4.74|
;;;499           *p_err = OS_ERR_STAT_PRIO_INVALID;
000040  f646612a          MOV      r1,#0x6e2a
                  |L4.68|
000044  8001              STRH     r1,[r0,#0]
                  |L4.70|
;;;500            return;
;;;501        }
;;;502    
;;;503        OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
;;;504                     (CPU_CHAR   *)((void *)"uC/OS-III Stat Task"),
;;;505                     (OS_TASK_PTR )OS_StatTask,
;;;506                     (void       *)0,
;;;507                     (OS_PRIO     )OSCfg_StatTaskPrio,
;;;508                     (CPU_STK    *)OSCfg_StatTaskStkBasePtr,
;;;509                     (CPU_STK_SIZE)OSCfg_StatTaskStkLimit,
;;;510                     (CPU_STK_SIZE)OSCfg_StatTaskStkSize,
;;;511                     (OS_MSG_QTY  )0,
;;;512                     (OS_TICK     )0,
;;;513                     (void       *)0,
;;;514                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;515                     (OS_ERR     *)p_err);
;;;516    }
000046  b009              ADD      sp,sp,#0x24
000048  bd30              POP      {r4,r5,pc}
                  |L4.74|
00004a  2503              MOVS     r5,#3                 ;503
00004c  9105              STR      r1,[sp,#0x14]         ;503
00004e  9106              STR      r1,[sp,#0x18]         ;503
000050  e9cd5007          STRD     r5,r0,[sp,#0x1c]      ;503
000054  4811              LDR      r0,|L4.156|
000056  681b              LDR      r3,[r3,#0]            ;503  ; OSCfg_StatTaskStkSize
000058  6812              LDR      r2,[r2,#0]            ;503  ; OSCfg_StatTaskStkBasePtr
00005a  6800              LDR      r0,[r0,#0]            ;503  ; OSCfg_StatTaskStkLimit
00005c  e9cd2001          STRD     r2,r0,[sp,#4]         ;503
000060  e9cd3103          STRD     r3,r1,[sp,#0xc]       ;503
000064  7820              LDRB     r0,[r4,#0]            ;503  ; OSCfg_StatTaskPrio
000066  9000              STR      r0,[sp,#0]            ;503
000068  2300              MOVS     r3,#0                 ;503
00006a  4a0d              LDR      r2,|L4.160|
00006c  a10d              ADR      r1,|L4.164|
00006e  4812              LDR      r0,|L4.184|
000070  f7fffffe          BL       OSTaskCreate
000074  e7e7              B        |L4.70|
;;;517    
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      OSStatTaskCtr
                  |L4.124|
                          DCD      OSStatTaskCtrRun
                  |L4.128|
                          DCD      OSStatTaskCtrMax
                  |L4.132|
                          DCD      OSStatTaskRdy
                  |L4.136|
                          DCD      OSStatResetFlag
                  |L4.140|
                          DCD      OSCfg_StatTaskStkBasePtr
                  |L4.144|
                          DCD      OSCfg_StatTaskStkSize
                  |L4.148|
                          DCD      OSCfg_StkSizeMin
                  |L4.152|
                          DCD      OSCfg_StatTaskPrio
                  |L4.156|
                          DCD      OSCfg_StatTaskStkLimit
                  |L4.160|
                          DCD      OS_StatTask
                  |L4.164|
0000a4  75432f4f          DCB      "uC/OS-III Stat Task",0
0000a8  532d4949
0000ac  49205374
0000b0  61742054
0000b4  61736b00
                  |L4.184|
                          DCD      OSStatTaskTCB
