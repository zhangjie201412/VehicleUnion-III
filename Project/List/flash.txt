; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\flash.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\flash.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\flash.crf ..\BSP\src\flash.c]
                          THUMB

                          AREA ||i.flash_check_id||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  flash_check_id PROC
;;;159    
;;;160    uint8_t flash_check_id(void)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;161    {
;;;162        uint8_t id[4] = {0, 0, 0, 0};
;;;163        SELECT();
000004  f8df9084          LDR      r9,|L1.140|
000008  f44f5880          MOV      r8,#0x1000
00000c  2400              MOVS     r4,#0                 ;162
00000e  4641              MOV      r1,r8
000010  4648              MOV      r0,r9
000012  f7fffffe          BL       GPIO_ResetBits
;;;164        spi_send_byte(RDID);
000016  209f              MOVS     r0,#0x9f
000018  f7fffffe          BL       spi_send_byte
;;;165        id[0] = spi_recv_byte();
00001c  f7fffffe          BL       spi_recv_byte
000020  f3600407          BFI      r4,r0,#0,#8
000024  4607              MOV      r7,r0
;;;166        id[1] = spi_recv_byte();
000026  f7fffffe          BL       spi_recv_byte
00002a  f360240f          BFI      r4,r0,#8,#8
00002e  4606              MOV      r6,r0
;;;167        id[2] = spi_recv_byte();
000030  f7fffffe          BL       spi_recv_byte
000034  f3604417          BFI      r4,r0,#16,#8
000038  4605              MOV      r5,r0
;;;168        NOSELECT();
00003a  4641              MOV      r1,r8
00003c  4648              MOV      r0,r9
00003e  f7fffffe          BL       GPIO_SetBits
;;;169        logi("id = 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n",
000042  a803              ADD      r0,sp,#0xc
000044  f7fffffe          BL       OSTimeGet
000048  4911              LDR      r1,|L1.144|
00004a  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00004c  0789              LSLS     r1,r1,#30
00004e  d510              BPL      |L1.114|
000050  f2413288          MOV      r2,#0x1388
000054  fbb0f1f2          UDIV     r1,r0,r2
000058  fb020011          MLS      r0,r2,r1,r0
00005c  2205              MOVS     r2,#5
00005e  fbb0f2f2          UDIV     r2,r0,r2
000062  0e20              LSRS     r0,r4,#24
000064  9600              STR      r6,[sp,#0]
000066  e9cd5001          STRD     r5,r0,[sp,#4]
00006a  463b              MOV      r3,r7
00006c  a009              ADR      r0,|L1.148|
00006e  f7fffffe          BL       __2printf
                  |L1.114|
;;;170                id[0], id[1], id[2], id[3]);
;;;171        if(id[0] == 0x20 && (id[1] == 0x20)
000072  2f20              CMP      r7,#0x20
000074  d103              BNE      |L1.126|
000076  2e20              CMP      r6,#0x20
000078  d101              BNE      |L1.126|
;;;172                && (id[2] == 0x15)) {
00007a  2d15              CMP      r5,#0x15
00007c  d003              BEQ      |L1.134|
                  |L1.126|
;;;173            return 0;
;;;174        } else {
;;;175            return 0xff;
00007e  20ff              MOVS     r0,#0xff
                  |L1.128|
;;;176        }
;;;177    }
000080  b004              ADD      sp,sp,#0x10
000082  e8bd87f0          POP      {r4-r10,pc}
                  |L1.134|
000086  2000              MOVS     r0,#0                 ;173
000088  e7fa              B        |L1.128|
;;;178    
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x40010c00
                  |L1.144|
                          DCD      DEBUG_MODE
                  |L1.148|
000094  5b253035          DCB      "[%05d.%03d/I]: id = 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n\r"
000098  642e2530
00009c  33642f49
0000a0  5d3a2069
0000a4  64203d20
0000a8  30782530
0000ac  32782c20
0000b0  30782530
0000b4  32782c20
0000b8  30782530
0000bc  32782c20
0000c0  30782530
0000c4  32780d0a
0000c8  0d      
0000c9  0a00              DCB      "\n",0
0000cb  00                DCB      0

                          AREA ||i.flash_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  flash_init PROC
;;;178    
;;;179    void flash_init(void)
000000  b508              PUSH     {r3,lr}
;;;180    {
;;;181        //uint8_t temp;
;;;182        //uint8_t buffer[128];
;;;183    
;;;184        spi2_init();
000002  f7fffffe          BL       spi2_init
;;;185        delay_ms(10);
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       delay_ms
;;;186        if(!flash_check_id()) {
00000c  f7fffffe          BL       flash_check_id
000010  2800              CMP      r0,#0
000012  d012              BEQ      |L2.58|
;;;187            //logi("flash id check successfully!\r\n");
;;;188            /*flash_page_read(buffer, 0, 16);
;;;189              printk("buffer: %s", buffer);
;;;190              sprintf((char *)buffer, "hello, world!!\r\n");
;;;191              flash_page_write(buffer, 0, 16);
;;;192              flash_page_read(buffer, 0, 16);
;;;193              printk("buffer: %s", buffer);
;;;194              */
;;;195        } else {
;;;196            loge("flash id check failed\r\n");
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       OSTimeGet
00001a  4908              LDR      r1,|L2.60|
00001c  7809              LDRB     r1,[r1,#0]  ; DEBUG_MODE
00001e  07c9              LSLS     r1,r1,#31
000020  d00b              BEQ      |L2.58|
000022  f2413288          MOV      r2,#0x1388
000026  fbb0f1f2          UDIV     r1,r0,r2
00002a  fb020011          MLS      r0,r2,r1,r0
00002e  2205              MOVS     r2,#5
000030  fbb0f2f2          UDIV     r2,r0,r2
000034  a002              ADR      r0,|L2.64|
000036  f7fffffe          BL       __2printf
                  |L2.58|
;;;197        }
;;;198    }
00003a  bd08              POP      {r3,pc}
                          ENDP

                  |L2.60|
                          DCD      DEBUG_MODE
                  |L2.64|
000040  5b253035          DCB      "[%05d.%03d/E]: flash id check failed\r\n\r\n",0
000044  642e2530
000048  33642f45
00004c  5d3a2066
000050  6c617368
000054  20696420
000058  63686563
00005c  6b206661
000060  696c6564
000064  0d0a0d0a
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.flash_page_erase||, CODE, READONLY, ALIGN=2

                  flash_page_erase PROC
;;;90     
;;;91     void flash_page_erase(uint16_t page)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
000002  4604              MOV      r4,r0
;;;93         flash_wait_busy();
000004  f7fffffe          BL       flash_wait_busy
;;;94         SELECT();
000008  4e12              LDR      r6,|L3.84|
00000a  f44f5580          MOV      r5,#0x1000
00000e  4629              MOV      r1,r5
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       GPIO_ResetBits
;;;95         //write enable
;;;96         spi_send_byte(0x06);
000016  2006              MOVS     r0,#6
000018  f7fffffe          BL       spi_send_byte
;;;97         NOSELECT();
00001c  4629              MOV      r1,r5
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       GPIO_SetBits
;;;98     
;;;99         flash_wait_busy();
000024  f7fffffe          BL       flash_wait_busy
;;;100        SELECT();
000028  4629              MOV      r1,r5
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       GPIO_ResetBits
;;;101        //erase block
;;;102        spi_send_byte(SE);
000030  20d8              MOVS     r0,#0xd8
000032  f7fffffe          BL       spi_send_byte
;;;103        spi_send_byte((page & 0xff0000) >> 16);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       spi_send_byte
;;;104        spi_send_byte((page & 0xff00) >> 8);
00003c  0a20              LSRS     r0,r4,#8
00003e  f7fffffe          BL       spi_send_byte
;;;105        spi_send_byte(page & 0xff);
000042  b2e0              UXTB     r0,r4
000044  f7fffffe          BL       spi_send_byte
;;;106        NOSELECT();
000048  4629              MOV      r1,r5
00004a  4630              MOV      r0,r6
00004c  e8bd4070          POP      {r4-r6,lr}
000050  f7ffbffe          B.W      GPIO_SetBits
;;;107    }
;;;108    
                          ENDP

                  |L3.84|
                          DCD      0x40010c00

                          AREA ||i.flash_page_read||, CODE, READONLY, ALIGN=2

                  flash_page_read PROC
;;;108    
;;;109    void flash_page_read(uint8_t *data, uint32_t addr, int length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    {
000004  4615              MOV      r5,r2
000006  460c              MOV      r4,r1
000008  4606              MOV      r6,r0
;;;111        uint32_t i;
;;;112    
;;;113        flash_wait_busy();
00000a  f7fffffe          BL       flash_wait_busy
;;;114        SELECT();
00000e  f8df8048          LDR      r8,|L4.88|
000012  f44f5780          MOV      r7,#0x1000
000016  4639              MOV      r1,r7
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       GPIO_ResetBits
;;;115        spi_send_byte(0x03);
00001e  2003              MOVS     r0,#3
000020  f7fffffe          BL       spi_send_byte
;;;116        spi_send_byte((addr & 0xff0000) >> 16);
000024  f3c44007          UBFX     r0,r4,#16,#8
000028  f7fffffe          BL       spi_send_byte
;;;117        spi_send_byte((addr & 0xff00) >> 8);
00002c  f3c42007          UBFX     r0,r4,#8,#8
000030  f7fffffe          BL       spi_send_byte
;;;118        spi_send_byte(addr & 0xff);
000034  b2e0              UXTB     r0,r4
000036  f7fffffe          BL       spi_send_byte
;;;119    
;;;120        for(i = 0; i < length; i++) {
00003a  2400              MOVS     r4,#0
00003c  e004              B        |L4.72|
;;;121            data[i] = spi_recv_byte();
00003e  bf00              NOP      
                  |L4.64|
000040  f7fffffe          BL       spi_recv_byte
000044  5530              STRB     r0,[r6,r4]
000046  1c64              ADDS     r4,r4,#1              ;120
                  |L4.72|
000048  42ac              CMP      r4,r5                 ;120
00004a  d3f9              BCC      |L4.64|
;;;122        }
;;;123        NOSELECT();
00004c  4639              MOV      r1,r7
00004e  4640              MOV      r0,r8
000050  e8bd41f0          POP      {r4-r8,lr}
000054  f7ffbffe          B.W      GPIO_SetBits
;;;124    
;;;125    }
;;;126    
                          ENDP

                  |L4.88|
                          DCD      0x40010c00

                          AREA ||i.flash_page_write||, CODE, READONLY, ALIGN=2

                  flash_page_write PROC
;;;126    
;;;127    void flash_page_write(uint8_t *data, uint32_t addr, int length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;128    {
000004  4615              MOV      r5,r2
000006  460c              MOV      r4,r1
000008  4680              MOV      r8,r0
;;;129        uint32_t i;
;;;130    
;;;131        flash_wait_busy();
00000a  f7fffffe          BL       flash_wait_busy
;;;132        SELECT();
00000e  4f19              LDR      r7,|L5.116|
000010  f44f5680          MOV      r6,#0x1000
000014  4631              MOV      r1,r6
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       GPIO_ResetBits
;;;133        spi_send_byte(0x06);
00001c  2006              MOVS     r0,#6
00001e  f7fffffe          BL       spi_send_byte
;;;134        NOSELECT();
000022  4631              MOV      r1,r6
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       GPIO_SetBits
;;;135    
;;;136        flash_wait_busy();
00002a  f7fffffe          BL       flash_wait_busy
;;;137        SELECT();
00002e  4631              MOV      r1,r6
000030  4638              MOV      r0,r7
000032  f7fffffe          BL       GPIO_ResetBits
;;;138        spi_send_byte(0x02);
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       spi_send_byte
;;;139        spi_send_byte((addr & 0xff0000) >> 16);
00003c  f3c44007          UBFX     r0,r4,#16,#8
000040  f7fffffe          BL       spi_send_byte
;;;140        spi_send_byte((addr & 0xff00) >> 8);
000044  f3c42007          UBFX     r0,r4,#8,#8
000048  f7fffffe          BL       spi_send_byte
;;;141        spi_send_byte(addr & 0xff);
00004c  b2e0              UXTB     r0,r4
00004e  f7fffffe          BL       spi_send_byte
;;;142        for(i = 0; i < length; i++) {
000052  2400              MOVS     r4,#0
000054  e005              B        |L5.98|
;;;143            spi_send_byte(data[i]);
000056  bf00              NOP      
                  |L5.88|
000058  f8180004          LDRB     r0,[r8,r4]
00005c  f7fffffe          BL       spi_send_byte
000060  1c64              ADDS     r4,r4,#1              ;142
                  |L5.98|
000062  42ac              CMP      r4,r5                 ;142
000064  d3f8              BCC      |L5.88|
;;;144        }
;;;145    
;;;146        NOSELECT();
000066  4631              MOV      r1,r6
000068  4638              MOV      r0,r7
00006a  e8bd41f0          POP      {r4-r8,lr}
00006e  f7ffbffe          B.W      GPIO_SetBits
;;;147    }
;;;148    
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      0x40010c00

                          AREA ||i.flash_wait_busy||, CODE, READONLY, ALIGN=2

                  flash_wait_busy PROC
;;;148    
;;;149    void flash_wait_busy(void)
000000  b570              PUSH     {r4-r6,lr}
;;;150    {
;;;151        uint8_t status = 0;
;;;152        SELECT();
000002  4d0a              LDR      r5,|L6.44|
000004  f44f5480          MOV      r4,#0x1000
000008  4621              MOV      r1,r4
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GPIO_ResetBits
;;;153        spi_send_byte(RDSR);
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       spi_send_byte
                  |L6.22|
;;;154        do {
;;;155            status = spi_send_byte(Dummy_Byte);
000016  20a5              MOVS     r0,#0xa5
000018  f7fffffe          BL       spi_send_byte
;;;156        } while((status & WIP_Flag) == SET);
00001c  07c0              LSLS     r0,r0,#31
00001e  d1fa              BNE      |L6.22|
;;;157        NOSELECT();
000020  4621              MOV      r1,r4
000022  4628              MOV      r0,r5
000024  e8bd4070          POP      {r4-r6,lr}
000028  f7ffbffe          B.W      GPIO_SetBits
;;;158    }
;;;159    
                          ENDP

                  |L6.44|
                          DCD      0x40010c00

                          AREA ||i.spi2_init||, CODE, READONLY, ALIGN=2

                  spi2_init PROC
;;;11     
;;;12     void spi2_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;13     {
000002  b086              SUB      sp,sp,#0x18
;;;14         SPI_InitTypeDef spi;
;;;15         GPIO_InitTypeDef gpio;
;;;16     
;;;17         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);
000004  2101              MOVS     r1,#1
000006  200c              MOVS     r0,#0xc
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;18         RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;19     
;;;20         //config spi2 sck miso mosi
;;;21         gpio.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
000014  f44f4060          MOV      r0,#0xe000
000018  f8ad0014          STRH     r0,[sp,#0x14]
;;;22         gpio.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2403              MOVS     r4,#3
00001e  f88d4016          STRB     r4,[sp,#0x16]
;;;23         gpio.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
;;;24         GPIO_Init(GPIOB, &gpio);
000024  4e1d              LDR      r6,|L7.156|
000026  f88d0017          STRB     r0,[sp,#0x17]         ;23
00002a  a905              ADD      r1,sp,#0x14
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       GPIO_Init
;;;25     
;;;26         //config spi2 cs pin
;;;27         gpio.GPIO_Pin = GPIO_Pin_12;
000032  14b5              ASRS     r5,r6,#18
000034  f8ad5014          STRH     r5,[sp,#0x14]
;;;28         gpio.GPIO_Speed = GPIO_Speed_50MHz;
000038  f88d4016          STRB     r4,[sp,#0x16]
;;;29         gpio.GPIO_Mode = GPIO_Mode_Out_PP;
00003c  2010              MOVS     r0,#0x10
00003e  f88d0017          STRB     r0,[sp,#0x17]
;;;30         GPIO_Init(GPIOB, &gpio);
000042  a905              ADD      r1,sp,#0x14
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       GPIO_Init
;;;31     
;;;32         NOSELECT();
00004a  4629              MOV      r1,r5
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       GPIO_SetBits
;;;33     
;;;34         spi.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000052  2000              MOVS     r0,#0
000054  f8ad0000          STRH     r0,[sp,#0]
;;;35         spi.SPI_Mode = SPI_Mode_Master;
000058  f44f7182          MOV      r1,#0x104
00005c  f8ad1002          STRH     r1,[sp,#2]
;;;36         spi.SPI_DataSize = SPI_DataSize_8b;
000060  f8ad0004          STRH     r0,[sp,#4]
;;;37         spi.SPI_CPOL = SPI_CPOL_High;
000064  2102              MOVS     r1,#2
000066  f8ad1006          STRH     r1,[sp,#6]
;;;38         spi.SPI_CPHA = SPI_CPHA_2Edge;
00006a  2101              MOVS     r1,#1
00006c  f8ad1008          STRH     r1,[sp,#8]
;;;39         spi.SPI_NSS = SPI_NSS_Soft;
000070  0249              LSLS     r1,r1,#9
000072  f8ad100a          STRH     r1,[sp,#0xa]
;;;40         spi.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
000076  2108              MOVS     r1,#8
000078  f8ad100c          STRH     r1,[sp,#0xc]
;;;41         spi.SPI_FirstBit = SPI_FirstBit_MSB;
00007c  f8ad000e          STRH     r0,[sp,#0xe]
;;;42         spi.SPI_CRCPolynomial = 7;
000080  2007              MOVS     r0,#7
;;;43         SPI_Init(SPI2, &spi);
000082  4c07              LDR      r4,|L7.160|
000084  f8ad0010          STRH     r0,[sp,#0x10]         ;42
000088  4669              MOV      r1,sp
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       SPI_Init
;;;44     
;;;45         SPI_Cmd(SPI2, ENABLE);
000090  2101              MOVS     r1,#1
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       SPI_Cmd
;;;46     }
000098  b006              ADD      sp,sp,#0x18
00009a  bd70              POP      {r4-r6,pc}
;;;47     
                          ENDP

                  |L7.156|
                          DCD      0x40010c00
                  |L7.160|
                          DCD      0x40003800

                          AREA ||i.spi_read_byte||, CODE, READONLY, ALIGN=2

                  spi_read_byte PROC
;;;77     
;;;78     uint8_t spi_read_byte(uint8_t addr)
000000  b510              PUSH     {r4,lr}
;;;79     {
;;;80         //SELECT();
;;;81         //delay_ms(10);
;;;82         SPI_I2S_SendData(SPI2, (addr | 0x80) << 8 | 0x00);
000002  f0400080          ORR      r0,r0,#0x80
000006  4c0b              LDR      r4,|L8.52|
000008  0201              LSLS     r1,r0,#8
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_I2S_SendData
                  |L8.16|
;;;83         while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_I2S_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L8.16|
                  |L8.28|
;;;84         while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
00001c  2101              MOVS     r1,#1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L8.28|
;;;85         //delay_ms(10);
;;;86         //NOSELECT();
;;;87     
;;;88         return SPI_I2S_ReceiveData(SPI2) & 0xff;
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c0              UXTB     r0,r0
;;;89     }
000030  bd10              POP      {r4,pc}
;;;90     
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      0x40003800

                          AREA ||i.spi_recv_byte||, CODE, READONLY, ALIGN=1

                  spi_recv_byte PROC
;;;59     
;;;60     uint8_t spi_recv_byte(void)
000000  20a5              MOVS     r0,#0xa5
;;;61     {
;;;62         return (spi_send_byte(0xA5));
000002  f7ffbffe          B.W      spi_send_byte
;;;63     }
;;;64     
                          ENDP


                          AREA ||i.spi_send_byte||, CODE, READONLY, ALIGN=2

                  spi_send_byte PROC
;;;47     
;;;48     uint8_t spi_send_byte(uint8_t byte)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50         SPI_I2S_SendData(SPI2, byte);
000002  4c0b              LDR      r4,|L10.48|
000004  4601              MOV      r1,r0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_I2S_SendData
                  |L10.12|
;;;51     
;;;52         while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
00000c  2102              MOVS     r1,#2
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPI_I2S_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L10.12|
                  |L10.24|
;;;53         /* Wait to receive a byte */
;;;54         while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
000018  2101              MOVS     r1,#1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000020  2800              CMP      r0,#0
000022  d0f9              BEQ      |L10.24|
;;;55     
;;;56         /* Return the byte read from the SPI bus */
;;;57         return SPI_I2S_ReceiveData(SPI2);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       SPI_I2S_ReceiveData
00002a  b2c0              UXTB     r0,r0
;;;58     }
00002c  bd10              POP      {r4,pc}
;;;59     
                          ENDP

00002e  0000              DCW      0x0000
                  |L10.48|
                          DCD      0x40003800

                          AREA ||i.spi_write_byte||, CODE, READONLY, ALIGN=2

                  spi_write_byte PROC
;;;64     
;;;65     uint8_t spi_write_byte(uint8_t addr, uint8_t val)
000000  b510              PUSH     {r4,lr}
;;;66     {
;;;67         //SELECT();
;;;68         //delay_ms(10);
;;;69         SPI_I2S_SendData(SPI2, addr << 8 | val);
000002  4c0b              LDR      r4,|L11.48|
000004  ea412100          ORR      r1,r1,r0,LSL #8
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPI_I2S_SendData
                  |L11.14|
;;;70         while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
00000e  2102              MOVS     r1,#2
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SPI_I2S_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d0f9              BEQ      |L11.14|
                  |L11.26|
;;;71         while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L11.26|
;;;72         //delay_ms(10);
;;;73         //NOSELECT();
;;;74     
;;;75         return SPI_I2S_ReceiveData(SPI2) & 0xff;
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c0              UXTB     r0,r0
;;;76     }
00002e  bd10              POP      {r4,pc}
;;;77     
                          ENDP

                  |L11.48|
                          DCD      0x40003800
