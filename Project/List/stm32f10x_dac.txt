; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\OBJ\stm32f10x_dac.o --asm_dir=.\List\ --list_dir=.\List\ --depend=..\OBJ\stm32f10x_dac.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\BSP -I..\CORE -I..\STM32F10x_FWLib\inc -I..\USER -I..\UCOSIII\uC-CPU -I..\UCOSIII\uC-CPU\ARM-Cortex-M3\RealView -I..\UCOSIII\uC-LIB -I..\UCOSIII\uC-LIB\Ports\ARM-Cortex-M3\RealView -I..\UCOSIII\uCOS-III -I..\UCOSIII\uCOS-III\Ports -I..\UCOSIII\uCOS-III\Ports\ARM-Cortex-M3\Generic\RealView -I..\UCOSIII\uCOS-III\Source -I..\UCOSIII\UCOS_BSP -I..\UCOSIII\uCOS_CONFIG -I..\UCOSIII-Task -I..\SYSTEM -I..\BSP\inc -I..\PAL -I..\PAL\vehicles -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\OBJ\stm32f10x_dac.crf ..\STM32F10x_FWLib\src\stm32f10x_dac.c]
                          THUMB

                          AREA ||i.DAC_Cmd||, CODE, READONLY, ALIGN=2

                  DAC_Cmd PROC
;;;172      */
;;;173    void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  4a04              LDR      r2,|L1.20|
;;;174    {
;;;175      /* Check the parameters */
;;;176      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;177      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;178      if (NewState != DISABLE)
;;;179      {
;;;180        /* Enable the selected DAC channel */
;;;181        DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
000002  2301              MOVS     r3,#1
000004  4083              LSLS     r3,r3,r0
;;;182      }
;;;183      else
;;;184      {
;;;185        /* Disable the selected DAC channel */
;;;186        DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
000006  6810              LDR      r0,[r2,#0]
000008  b109              CBZ      r1,|L1.14|
00000a  4318              ORRS     r0,r0,r3              ;181
00000c  e000              B        |L1.16|
                  |L1.14|
00000e  4398              BICS     r0,r0,r3
                  |L1.16|
000010  6010              STR      r0,[r2,#0]            ;181
;;;187      }
;;;188    }
000012  4770              BX       lr
;;;189    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
                          ENDP

                  |L1.20|
                          DCD      0x40007400

                          AREA ||i.DAC_DMACmd||, CODE, READONLY, ALIGN=2

                  DAC_DMACmd PROC
;;;232      */
;;;233    void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  4a04              LDR      r2,|L2.20|
;;;234    {
;;;235      /* Check the parameters */
;;;236      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;237      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;238      if (NewState != DISABLE)
;;;239      {
;;;240        /* Enable the selected DAC channel DMA request */
;;;241        DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
000002  1493              ASRS     r3,r2,#18
000004  4083              LSLS     r3,r3,r0
;;;242      }
;;;243      else
;;;244      {
;;;245        /* Disable the selected DAC channel DMA request */
;;;246        DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
000006  6810              LDR      r0,[r2,#0]
000008  b109              CBZ      r1,|L2.14|
00000a  4318              ORRS     r0,r0,r3              ;241
00000c  e000              B        |L2.16|
                  |L2.14|
00000e  4398              BICS     r0,r0,r3
                  |L2.16|
000010  6010              STR      r0,[r2,#0]            ;241
;;;247      }
;;;248    }
000012  4770              BX       lr
;;;249    
                          ENDP

                  |L2.20|
                          DCD      0x40007400

                          AREA ||i.DAC_DeInit||, CODE, READONLY, ALIGN=1

                  DAC_DeInit PROC
;;;97       */
;;;98     void DAC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;99     {
;;;100      /* Enable DAC reset state */
;;;101      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
000002  2101              MOVS     r1,#1
000004  074c              LSLS     r4,r1,#29
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;102      /* Release DAC from reset state */
;;;103      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;104    }
;;;105    
                          ENDP


                          AREA ||i.DAC_DualSoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_DualSoftwareTriggerCmd PROC
;;;283      */
;;;284    void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L4.24|
;;;285    {
;;;286      /* Check the parameters */
;;;287      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;288      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;289      {
;;;290        /* Enable software trigger for both DAC channels */
;;;291        DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
;;;292      }
;;;293      else
;;;294      {
;;;295        /* Disable software trigger for both DAC channels */
;;;296        DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L4.14|
000008  f0400003          ORR      r0,r0,#3              ;291
00000c  e001              B        |L4.18|
                  |L4.14|
00000e  f0200003          BIC      r0,r0,#3
                  |L4.18|
000012  6008              STR      r0,[r1,#0]            ;291
;;;297      }
;;;298    }
000014  4770              BX       lr
;;;299    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40007404

                          AREA ||i.DAC_GetDataOutputValue||, CODE, READONLY, ALIGN=2

                  DAC_GetDataOutputValue PROC
;;;429      */
;;;430    uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
000000  4902              LDR      r1,|L5.12|
;;;431    {
;;;432      __IO uint32_t tmp = 0;
;;;433      
;;;434      /* Check the parameters */
;;;435      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;436      
;;;437      tmp = (uint32_t) DAC_BASE ;
;;;438      tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
000002  eb010090          ADD      r0,r1,r0,LSR #2
;;;439      
;;;440      /* Returns the DAC channel data output register value */
;;;441      return (uint16_t) (*(__IO uint32_t*) tmp);
000006  6ac0              LDR      r0,[r0,#0x2c]
000008  b280              UXTH     r0,r0
;;;442    }
00000a  4770              BX       lr
;;;443    
                          ENDP

                  |L5.12|
                          DCD      0x40007400

                          AREA ||i.DAC_Init||, CODE, READONLY, ALIGN=2

                  DAC_Init PROC
;;;116      */
;;;117    void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;118    {
;;;119      uint32_t tmpreg1 = 0, tmpreg2 = 0;
;;;120      /* Check the DAC parameters */
;;;121      assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
;;;122      assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
;;;123      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
;;;124      assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
;;;125    /*---------------------------- DAC CR Configuration --------------------------*/
;;;126      /* Get the DAC CR value */
;;;127      tmpreg1 = DAC->CR;
000002  4c08              LDR      r4,|L6.36|
000004  6823              LDR      r3,[r4,#0]
;;;128      /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
;;;129      tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
000006  f64072fe          MOV      r2,#0xffe
00000a  4082              LSLS     r2,r2,r0
00000c  4393              BICS     r3,r3,r2
00000e  e9d12500          LDRD     r2,r5,[r1,#0]
;;;130      /* Configure for the selected DAC channel: buffer output, trigger, wave generation,
;;;131         mask/amplitude for wave generation */
;;;132      /* Set TSELx and TENx bits according to DAC_Trigger value */
;;;133      /* Set WAVEx bits according to DAC_WaveGeneration value */
;;;134      /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
;;;135      /* Set BOFFx bit according to DAC_OutputBuffer value */   
;;;136      tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
000012  432a              ORRS     r2,r2,r5
000014  e9d15102          LDRD     r5,r1,[r1,#8]
000018  430d              ORRS     r5,r5,r1
00001a  432a              ORRS     r2,r2,r5
;;;137                 DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
;;;138      /* Calculate CR register value depending on DAC_Channel */
;;;139      tmpreg1 |= tmpreg2 << DAC_Channel;
00001c  4082              LSLS     r2,r2,r0
00001e  431a              ORRS     r2,r2,r3
;;;140      /* Write to DAC CR */
;;;141      DAC->CR = tmpreg1;
000020  6022              STR      r2,[r4,#0]
;;;142    }
000022  bd30              POP      {r4,r5,pc}
;;;143    
                          ENDP

                  |L6.36|
                          DCD      0x40007400

                          AREA ||i.DAC_SetChannel1Data||, CODE, READONLY, ALIGN=2

                  DAC_SetChannel1Data PROC
;;;341      */
;;;342    void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
000000  4a01              LDR      r2,|L7.8|
;;;343    {  
;;;344      __IO uint32_t tmp = 0;
;;;345      
;;;346      /* Check the parameters */
;;;347      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;348      assert_param(IS_DAC_DATA(Data));
;;;349      
;;;350      tmp = (uint32_t)DAC_BASE; 
;;;351      tmp += DHR12R1_OFFSET + DAC_Align;
000002  4410              ADD      r0,r0,r2
;;;352    
;;;353      /* Set the DAC channel1 selected data holding register */
;;;354      *(__IO uint32_t *) tmp = Data;
000004  6081              STR      r1,[r0,#8]
;;;355    }
000006  4770              BX       lr
;;;356    
                          ENDP

                  |L7.8|
                          DCD      0x40007400

                          AREA ||i.DAC_SetChannel2Data||, CODE, READONLY, ALIGN=2

                  DAC_SetChannel2Data PROC
;;;366      */
;;;367    void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
000000  4a01              LDR      r2,|L8.8|
;;;368    {
;;;369      __IO uint32_t tmp = 0;
;;;370    
;;;371      /* Check the parameters */
;;;372      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;373      assert_param(IS_DAC_DATA(Data));
;;;374      
;;;375      tmp = (uint32_t)DAC_BASE;
;;;376      tmp += DHR12R2_OFFSET + DAC_Align;
000002  4410              ADD      r0,r0,r2
;;;377    
;;;378      /* Set the DAC channel2 selected data holding register */
;;;379      *(__IO uint32_t *)tmp = Data;
000004  6141              STR      r1,[r0,#0x14]
;;;380    }
000006  4770              BX       lr
;;;381    
                          ENDP

                  |L8.8|
                          DCD      0x40007400

                          AREA ||i.DAC_SetDualChannelData||, CODE, READONLY, ALIGN=2

                  DAC_SetDualChannelData PROC
;;;395      */
;;;396    void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
000000  2808              CMP      r0,#8
;;;397    {
000002  d005              BEQ      |L9.16|
;;;398      uint32_t data = 0, tmp = 0;
;;;399      
;;;400      /* Check the parameters */
;;;401      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;402      assert_param(IS_DAC_DATA(Data1));
;;;403      assert_param(IS_DAC_DATA(Data2));
;;;404      
;;;405      /* Calculate and set dual DAC data holding register value */
;;;406      if (DAC_Align == DAC_Align_8b_R)
;;;407      {
;;;408        data = ((uint32_t)Data2 << 8) | Data1; 
;;;409      }
;;;410      else
;;;411      {
;;;412        data = ((uint32_t)Data2 << 16) | Data1;
000004  ea424101          ORR      r1,r2,r1,LSL #16
                  |L9.8|
;;;413      }
;;;414      
;;;415      tmp = (uint32_t)DAC_BASE;
000008  4a03              LDR      r2,|L9.24|
;;;416      tmp += DHR12RD_OFFSET + DAC_Align;
00000a  4410              ADD      r0,r0,r2
;;;417    
;;;418      /* Set the dual DAC selected data holding register */
;;;419      *(__IO uint32_t *)tmp = data;
00000c  6201              STR      r1,[r0,#0x20]
;;;420    }
00000e  4770              BX       lr
                  |L9.16|
000010  ea422101          ORR      r1,r2,r1,LSL #8       ;408
000014  e7f8              B        |L9.8|
;;;421    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40007400

                          AREA ||i.DAC_SoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_SoftwareTriggerCmd PROC
;;;259      */
;;;260    void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  0903              LSRS     r3,r0,#4
;;;261    {
;;;262      /* Check the parameters */
;;;263      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;264      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;265      if (NewState != DISABLE)
;;;266      {
;;;267        /* Enable software trigger for the selected DAC channel */
;;;268        DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
000002  4a05              LDR      r2,|L10.24|
000004  2001              MOVS     r0,#1
000006  4098              LSLS     r0,r0,r3
000008  2900              CMP      r1,#0                 ;265
;;;269      }
;;;270      else
;;;271      {
;;;272        /* Disable software trigger for the selected DAC channel */
;;;273        DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
00000a  6811              LDR      r1,[r2,#0]
00000c  d001              BEQ      |L10.18|
00000e  4301              ORRS     r1,r1,r0              ;268
000010  e000              B        |L10.20|
                  |L10.18|
000012  4381              BICS     r1,r1,r0
                  |L10.20|
000014  6011              STR      r1,[r2,#0]            ;268
;;;274      }
;;;275    }
000016  4770              BX       lr
;;;276    
                          ENDP

                  |L10.24|
                          DCD      0x40007404

                          AREA ||i.DAC_StructInit||, CODE, READONLY, ALIGN=1

                  DAC_StructInit PROC
;;;149      */
;;;150    void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
000000  2100              MOVS     r1,#0
;;;151    {
;;;152    /*--------------- Reset DAC init structure parameters values -----------------*/
;;;153      /* Initialize the DAC_Trigger member */
;;;154      DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
;;;155      /* Initialize the DAC_WaveGeneration member */
;;;156      DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
000002  6001              STR      r1,[r0,#0]
;;;157      /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
;;;158      DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
000004  6041              STR      r1,[r0,#4]
;;;159      /* Initialize the DAC_OutputBuffer member */
;;;160      DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;161    }
00000a  4770              BX       lr
;;;162    
                          ENDP


                          AREA ||i.DAC_WaveGenerationCmd||, CODE, READONLY, ALIGN=2

                  DAC_WaveGenerationCmd PROC
;;;313      */
;;;314    void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
000000  4b04              LDR      r3,|L12.20|
;;;315    {
;;;316      /* Check the parameters */
;;;317      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;318      assert_param(IS_DAC_WAVE(DAC_Wave)); 
;;;319      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;320      if (NewState != DISABLE)
;;;321      {
;;;322        /* Enable the selected wave generation for the selected DAC channel */
;;;323        DAC->CR |= DAC_Wave << DAC_Channel;
000002  4081              LSLS     r1,r1,r0
;;;324      }
;;;325      else
;;;326      {
;;;327        /* Disable the selected wave generation for the selected DAC channel */
;;;328        DAC->CR &= ~(DAC_Wave << DAC_Channel);
000004  6818              LDR      r0,[r3,#0]
000006  b10a              CBZ      r2,|L12.12|
000008  4308              ORRS     r0,r0,r1              ;323
00000a  e000              B        |L12.14|
                  |L12.12|
00000c  4388              BICS     r0,r0,r1
                  |L12.14|
00000e  6018              STR      r0,[r3,#0]            ;323
;;;329      }
;;;330    }
000010  4770              BX       lr
;;;331    
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      0x40007400
